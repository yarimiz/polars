Search.setIndex({"alltitles": {"ABS": [[1283, "abs"]], "ACOS": [[1286, "acos"]], "ACOSD": [[1286, "acosd"]], "ARRAY_AGG": [[1280, "array-agg"]], "ARRAY_CONTAINS": [[1280, "array-contains"]], "ARRAY_GET": [[1280, "array-get"]], "ARRAY_LENGTH": [[1280, "array-length"]], "ARRAY_LOWER": [[1280, "array-lower"]], "ARRAY_MEAN": [[1280, "array-mean"]], "ARRAY_REVERSE": [[1280, "array-reverse"]], "ARRAY_SUM": [[1280, "array-sum"]], "ARRAY_TO_STRING": [[1280, "array-to-string"]], "ARRAY_UNIQUE": [[1280, "array-unique"]], "ARRAY_UPPER": [[1280, "array-upper"]], "ASIN": [[1286, "asin"]], "ASIND": [[1286, "asind"]], "ATAN": [[1286, "atan"]], "ATAN2": [[1286, "atan2"]], "ATAN2D": [[1286, "atan2d"]], "ATAND": [[1286, "atand"]], "AVG": [[1279, "avg"]], "Aggregate": [[1279, "aggregate"]], "Aggregation": [[169, "aggregation"], [320, "aggregation"], [792, "aggregation"], [896, "aggregation"]], "Aliases": [[1279, null], [1279, null], [1283, null], [1283, null], [1284, null], [1284, null]], "Array": [[770, "array"], [1254, "array"], [1280, "array"]], "Asserts": [[1292, "asserts"]], "Attributes": [[308, "attributes"], [885, "attributes"], [1255, "attributes"]], "Available registrations": [[1, "available-registrations"]], "Avro": [[791, "avro"]], "BIT_LENGTH": [[1284, "bit-length"]], "Binary": [[771, "binary"], [784, "binary"], [1256, "binary"]], "Boolean": [[772, "boolean"], [1257, "boolean"]], "CAST": [[1287, "cast"]], "CBRT": [[1283, "cbrt"]], "CEIL": [[1283, "ceil"]], "COALESCE": [[1281, "coalesce"]], "CONCAT": [[1284, "concat"]], "CONCAT_WS": [[1284, "concat-ws"]], "COS": [[1286, "cos"]], "COSD": [[1286, "cosd"]], "COT": [[1286, "cot"]], "COTD": [[1286, "cotd"]], "COUNT": [[1279, "count"]], "CREATE TABLE": [[1291, "create-table"]], "CSV": [[791, "csv"]], "Categories": [[773, "categories"], [1258, "categories"]], "Clipboard": [[791, "clipboard"]], "Columns / names": [[775, "columns-names"]], "Comparison": [[784, "comparison"], [1266, "comparison"]], "Computation": [[309, "computation"], [776, "computation"], [1259, "computation"]], "Conditional": [[1281, "conditional"]], "Config": [[168, "config"]], "Config load, save, state": [[168, "config-load-save-state"]], "Config options": [[168, "config-options"]], "Conjunction": [[784, "conjunction"]], "Conversion": [[789, "conversion"]], "DATE": [[1284, "date"]], "DATE_PART": [[1285, "date-part"]], "DEGREES": [[1286, "degrees"]], "DISTINCT": [[1278, "distinct"]], "DIV": [[1283, "div"]], "DROP TABLES": [[1291, "drop-tables"]], "Data types": [[318, "data-types"]], "DataFrame": [[313, "dataframe"]], "DataType": [[318, "datatype"]], "Database": [[791, "database"]], "Delta Lake": [[791, "delta-lake"]], "Descriptive": [[310, "descriptive"], [886, "descriptive"], [1260, "descriptive"]], "Documentation": [[1289, null], [1289, null], [1289, null]], "ENDS_WITH": [[1284, "ends-with"]], "EXCEPT": [[1290, "except"]], "EXP": [[1283, "exp"]], "EXPLAIN": [[1291, "explain"]], "EXTRACT": [[1285, "extract"]], "Errors": [[319, "errors"]], "Examples": [[1, "examples"], [895, "examples"], [1292, "examples"]], "Excel / ODS": [[791, "excel-ods"]], "Exceptions": [[319, "exceptions"]], "Export": [[311, "export"], [1261, "export"]], "Expression SQL": [[1289, "expression-sql"]], "Expressions": [[778, "expressions"]], "Extending the API": [[1, "extending-the-api"]], "FIRST": [[1279, "first"]], "FLOOR": [[1283, "floor"]], "FROM": [[1278, "from"]], "Feather / IPC": [[791, "feather-ipc"]], "Frame SQL": [[1289, "frame-sql"]], "Functions": [[777, "functions"], [789, "functions"], [895, "functions"]], "GREATEST": [[1281, "greatest"]], "GROUP BY": [[1278, "group-by"]], "Global SQL": [[1289, "global-sql"]], "GroupBy": [[312, "groupby"], [887, "groupby"]], "HAVING": [[1278, "having"]], "IF": [[1281, "if"]], "IFNULL": [[1281, "ifnull"]], "INITCAP": [[1284, "initcap"]], "INTERSECT": [[1290, "intersect"]], "Iceberg": [[791, "iceberg"]], "Importing": [[895, "importing"]], "InProcessQuery": [[888, "inprocessquery"]], "Index": [[0, "index"]], "Input/output": [[791, "input-output"]], "Introduction": [[1289, "introduction"]], "JOIN": [[1278, "join"]], "JSON": [[791, "json"]], "LAST": [[1279, "last"]], "LEAST": [[1281, "least"]], "LEFT": [[1284, "left"]], "LENGTH": [[1284, "length"]], "LIMIT": [[1278, "limit"]], "LN": [[1283, "ln"]], "LOG": [[1283, "log"]], "LOG10": [[1283, "log10"]], "LOG1P": [[1283, "log1p"]], "LOG2": [[1283, "log2"]], "LOWER": [[1284, "lower"]], "LTRIM": [[1284, "ltrim"]], "LazyFrame": [[889, "lazyframe"]], "List": [[779, "list"], [1263, "list"]], "MAX": [[1279, "max"]], "MEDIAN": [[1279, "median"]], "MIN": [[1279, "min"]], "MOD": [[1283, "mod"]], "Manipulation/selection": [[315, "manipulation-selection"], [782, "manipulation-selection"], [891, "manipulation-selection"], [1265, "manipulation-selection"]], "Math": [[1283, "math"]], "Meta": [[780, "meta"]], "Metadata": [[892, "metadata"]], "Methods": [[1289, "methods"]], "Miscellaneous": [[314, "miscellaneous"], [781, "miscellaneous"], [789, "miscellaneous"], [890, "miscellaneous"], [1264, "miscellaneous"]], "NULLIF": [[1281, "nullif"]], "Name": [[783, "name"]], "Nested": [[318, "nested"]], "Numeric": [[318, "numeric"], [784, "numeric"], [1266, "numeric"]], "OCTET_LENGTH": [[1284, "octet-length"]], "OFFSET": [[1278, "offset"]], "ORDER BY": [[1278, "order-by"]], "Operators": [[784, "operators"], [1266, "operators"]], "Other": [[318, "other"]], "PI": [[1283, "pi"]], "POW": [[1283, "pow"]], "Panic": [[319, "panic"]], "Parallelization": [[789, "parallelization"]], "Parametric testing": [[1292, "parametric-testing"]], "Parquet": [[791, "parquet"]], "Plot": [[316, "plot"], [1267, "plot"]], "Plugins": [[893, "plugins"]], "Polars strategies": [[1292, "polars-strategies"]], "Profiles": [[1292, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[791, "pyarrow-datasets"]], "Python API": [[1289, "python-api"]], "Python API reference": [[790, "python-api-reference"]], "Querying": [[1289, "querying"]], "RADIANS": [[1286, "radians"]], "REGEXP_LIKE": [[1284, "regexp-like"]], "REPLACE": [[1284, "replace"]], "REVERSE": [[1284, "reverse"]], "RIGHT": [[1284, "right"]], "ROUND": [[1283, "round"]], "RTRIM": [[1284, "rtrim"]], "Random": [[789, "random"]], "SELECT": [[1278, "select"]], "SHOW TABLES": [[1291, "show-tables"]], "SIGN": [[1283, "sign"]], "SIN": [[1286, "sin"]], "SIND": [[1286, "sind"]], "SQL Clauses": [[1278, "sql-clauses"]], "SQL Functions": [[1282, "sql-functions"]], "SQL Interface": [[1288, "sql-interface"]], "SQLContext": [[1289, "sqlcontext"]], "SQRT": [[1283, "sqrt"]], "STARTS_WITH": [[1284, "starts-with"]], "STDDEV": [[1279, "stddev"]], "STRFTIME": [[1285, "strftime"]], "STRPOS": [[1284, "strpos"]], "STRPTIME": [[1284, "strptime"]], "SUBSTRING": [[1284, "substring"]], "SUM": [[1279, "sum"]], "Schema": [[894, "schema"]], "Selectors": [[895, "selectors"]], "Serialization": [[314, "serialization"], [890, "serialization"]], "Series": [[1262, "series"]], "Set Operations": [[1290, "set-operations"]], "Set operations": [[895, "set-operations"]], "Strategy helpers": [[1292, "strategy-helpers"]], "String": [[318, "string"], [785, "string"], [1268, "string"], [1284, "string"]], "StringCache": [[789, "stringcache"]], "Struct": [[786, "struct"], [1269, "struct"]], "Style": [[317, "style"]], "TAN": [[1286, "tan"]], "TAND": [[1286, "tand"]], "TIMESTAMP": [[1284, "timestamp"]], "TRUNCATE": [[1291, "truncate"]], "TRY_CAST": [[1287, "try-cast"]], "Table Operations": [[1291, "table-operations"]], "Temporal": [[318, "temporal"], [787, "temporal"], [1270, "temporal"], [1285, "temporal"]], "Testing": [[1292, "testing"]], "Trigonometry": [[1286, "trigonometry"]], "Types": [[1287, "types"]], "UNION": [[1290, "union"]], "UNION ALL": [[1290, "union-all"]], "UNION BY NAME": [[1290, "union-by-name"]], "UNNEST": [[1280, "unnest"], [1291, "unnest"]], "UPPER": [[1284, "upper"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "VARIANCE": [[1279, "variance"]], "WHERE": [[1278, "where"]], "Warnings": [[319, "warnings"]], "Window": [[788, "window"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.__array__": [[170, "polars-dataframe-array"]], "polars.DataFrame.__arrow_c_stream__": [[171, "polars-dataframe-arrow-c-stream"]], "polars.DataFrame.__dataframe__": [[172, "polars-dataframe-dataframe"]], "polars.DataFrame.__getitem__": [[173, "polars-dataframe-getitem"]], "polars.DataFrame.approx_n_unique": [[174, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.bottom_k": [[175, "polars-dataframe-bottom-k"]], "polars.DataFrame.cast": [[176, "polars-dataframe-cast"]], "polars.DataFrame.clear": [[177, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[178, "polars-dataframe-clone"]], "polars.DataFrame.collect_schema": [[179, "polars-dataframe-collect-schema"]], "polars.DataFrame.columns": [[180, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[181, "polars-dataframe-corr"]], "polars.DataFrame.count": [[182, "polars-dataframe-count"]], "polars.DataFrame.describe": [[183, "polars-dataframe-describe"]], "polars.DataFrame.deserialize": [[184, "polars-dataframe-deserialize"]], "polars.DataFrame.drop": [[185, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[186, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[187, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[188, "polars-dataframe-dtypes"]], "polars.DataFrame.equals": [[189, "polars-dataframe-equals"]], "polars.DataFrame.estimated_size": [[190, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[191, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[192, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[193, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[194, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[195, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[196, "polars-dataframe-flags"]], "polars.DataFrame.fold": [[197, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[198, "polars-dataframe-gather-every"]], "polars.DataFrame.get_column": [[199, "polars-dataframe-get-column"]], "polars.DataFrame.get_column_index": [[200, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[201, "polars-dataframe-get-columns"]], "polars.DataFrame.glimpse": [[202, "polars-dataframe-glimpse"]], "polars.DataFrame.group_by": [[203, "polars-dataframe-group-by"]], "polars.DataFrame.group_by_dynamic": [[204, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[205, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[206, "polars-dataframe-head"]], "polars.DataFrame.height": [[207, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[208, "polars-dataframe-hstack"]], "polars.DataFrame.insert_column": [[209, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[210, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[211, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[212, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[213, "polars-dataframe-is-unique"]], "polars.DataFrame.item": [[214, "polars-dataframe-item"]], "polars.DataFrame.iter_columns": [[215, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[216, "polars-dataframe-iter-rows"]], "polars.DataFrame.iter_slices": [[217, "polars-dataframe-iter-slices"]], "polars.DataFrame.join": [[218, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[219, "polars-dataframe-join-asof"]], "polars.DataFrame.join_where": [[220, "polars-dataframe-join-where"]], "polars.DataFrame.lazy": [[221, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[222, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[223, "polars-dataframe-map-rows"]], "polars.DataFrame.max": [[224, "polars-dataframe-max"]], "polars.DataFrame.max_horizontal": [[225, "polars-dataframe-max-horizontal"]], "polars.DataFrame.mean": [[226, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[227, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.median": [[228, "polars-dataframe-median"]], "polars.DataFrame.melt": [[229, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[230, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[231, "polars-dataframe-min"]], "polars.DataFrame.min_horizontal": [[232, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_chunks": [[233, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[234, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[235, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[236, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[237, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[238, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[239, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[240, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[241, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[242, "polars-dataframe-rename"]], "polars.DataFrame.replace_column": [[243, "polars-dataframe-replace-column"]], "polars.DataFrame.reverse": [[244, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[245, "polars-dataframe-rolling"]], "polars.DataFrame.row": [[246, "polars-dataframe-row"]], "polars.DataFrame.rows": [[247, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[248, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sample": [[249, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[250, "polars-dataframe-schema"]], "polars.DataFrame.select": [[251, "polars-dataframe-select"]], "polars.DataFrame.select_seq": [[252, "polars-dataframe-select-seq"]], "polars.DataFrame.serialize": [[253, "polars-dataframe-serialize"]], "polars.DataFrame.set_sorted": [[254, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[255, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[256, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[257, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[258, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[259, "polars-dataframe-sort"]], "polars.DataFrame.sql": [[260, "polars-dataframe-sql"]], "polars.DataFrame.std": [[261, "polars-dataframe-std"]], "polars.DataFrame.sum": [[262, "polars-dataframe-sum"]], "polars.DataFrame.sum_horizontal": [[263, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.tail": [[264, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[265, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[266, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[267, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[268, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[269, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_jax": [[270, "polars-dataframe-to-jax"]], "polars.DataFrame.to_numpy": [[271, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[272, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[273, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[274, "polars-dataframe-to-struct"]], "polars.DataFrame.to_torch": [[275, "polars-dataframe-to-torch"]], "polars.DataFrame.top_k": [[276, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[277, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[278, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[279, "polars-dataframe-unnest"]], "polars.DataFrame.unpivot": [[280, "polars-dataframe-unpivot"]], "polars.DataFrame.unstack": [[281, "polars-dataframe-unstack"]], "polars.DataFrame.update": [[282, "polars-dataframe-update"]], "polars.DataFrame.upsample": [[283, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[284, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[285, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[286, "polars-dataframe-width"]], "polars.DataFrame.with_columns": [[287, "polars-dataframe-with-columns"]], "polars.DataFrame.with_columns_seq": [[288, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_row_count": [[289, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_row_index": [[290, "polars-dataframe-with-row-index"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Expr.abs": [[321, "polars-expr-abs"]], "polars.Expr.add": [[322, "polars-expr-add"]], "polars.Expr.agg_groups": [[323, "polars-expr-agg-groups"]], "polars.Expr.alias": [[324, "polars-expr-alias"]], "polars.Expr.all": [[325, "polars-expr-all"]], "polars.Expr.and_": [[326, "polars-expr-and"]], "polars.Expr.any": [[327, "polars-expr-any"]], "polars.Expr.append": [[328, "polars-expr-append"]], "polars.Expr.approx_n_unique": [[329, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[330, "polars-expr-arccos"]], "polars.Expr.arccosh": [[331, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[332, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[333, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[334, "polars-expr-arctan"]], "polars.Expr.arctanh": [[335, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[336, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[337, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[338, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[339, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[340, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[341, "polars-expr-arr-all"]], "polars.Expr.arr.any": [[342, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[343, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[344, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[345, "polars-expr-arr-contains"]], "polars.Expr.arr.count_matches": [[346, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[347, "polars-expr-arr-explode"]], "polars.Expr.arr.first": [[348, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[349, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[350, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[351, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[352, "polars-expr-arr-max"]], "polars.Expr.arr.median": [[353, "polars-expr-arr-median"]], "polars.Expr.arr.min": [[354, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[355, "polars-expr-arr-n-unique"]], "polars.Expr.arr.reverse": [[356, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[357, "polars-expr-arr-shift"]], "polars.Expr.arr.sort": [[358, "polars-expr-arr-sort"]], "polars.Expr.arr.std": [[359, "polars-expr-arr-std"]], "polars.Expr.arr.sum": [[360, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[361, "polars-expr-arr-to-list"]], "polars.Expr.arr.to_struct": [[362, "polars-expr-arr-to-struct"]], "polars.Expr.arr.unique": [[363, "polars-expr-arr-unique"]], "polars.Expr.arr.var": [[364, "polars-expr-arr-var"]], "polars.Expr.backward_fill": [[365, "polars-expr-backward-fill"]], "polars.Expr.bin.contains": [[366, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[367, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[368, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[369, "polars-expr-bin-ends-with"]], "polars.Expr.bin.size": [[370, "polars-expr-bin-size"]], "polars.Expr.bin.starts_with": [[371, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[372, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[373, "polars-expr-bottom-k-by"]], "polars.Expr.cast": [[374, "polars-expr-cast"]], "polars.Expr.cat.get_categories": [[375, "polars-expr-cat-get-categories"]], "polars.Expr.cbrt": [[376, "polars-expr-cbrt"]], "polars.Expr.ceil": [[377, "polars-expr-ceil"]], "polars.Expr.clip": [[378, "polars-expr-clip"]], "polars.Expr.cos": [[379, "polars-expr-cos"]], "polars.Expr.cosh": [[380, "polars-expr-cosh"]], "polars.Expr.cot": [[381, "polars-expr-cot"]], "polars.Expr.count": [[382, "polars-expr-count"]], "polars.Expr.cum_count": [[383, "polars-expr-cum-count"]], "polars.Expr.cum_max": [[384, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[385, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[386, "polars-expr-cum-prod"]], "polars.Expr.cum_sum": [[387, "polars-expr-cum-sum"]], "polars.Expr.cumulative_eval": [[388, "polars-expr-cumulative-eval"]], "polars.Expr.cut": [[389, "polars-expr-cut"]], "polars.Expr.degrees": [[390, "polars-expr-degrees"]], "polars.Expr.deserialize": [[391, "polars-expr-deserialize"]], "polars.Expr.diff": [[392, "polars-expr-diff"]], "polars.Expr.dot": [[393, "polars-expr-dot"]], "polars.Expr.drop_nans": [[394, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[395, "polars-expr-drop-nulls"]], "polars.Expr.dt.add_business_days": [[396, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[397, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.cast_time_unit": [[398, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.century": [[399, "polars-expr-dt-century"]], "polars.Expr.dt.combine": [[400, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[401, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.date": [[402, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[403, "polars-expr-dt-datetime"]], "polars.Expr.dt.day": [[404, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[405, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[406, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[407, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[408, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.iso_year": [[409, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[410, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millennium": [[411, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[412, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[413, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[414, "polars-expr-dt-month"]], "polars.Expr.dt.month_end": [[415, "polars-expr-dt-month-end"]], "polars.Expr.dt.month_start": [[416, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanosecond": [[417, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[418, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[419, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[420, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[421, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[422, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[423, "polars-expr-dt-second"]], "polars.Expr.dt.strftime": [[424, "polars-expr-dt-strftime"]], "polars.Expr.dt.time": [[425, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[426, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[427, "polars-expr-dt-to-string"]], "polars.Expr.dt.total_days": [[428, "polars-expr-dt-total-days"]], "polars.Expr.dt.total_hours": [[429, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[430, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_milliseconds": [[431, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[432, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_nanoseconds": [[433, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_seconds": [[434, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.truncate": [[435, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[436, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[437, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[438, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[439, "polars-expr-dt-year"]], "polars.Expr.entropy": [[440, "polars-expr-entropy"]], "polars.Expr.eq": [[441, "polars-expr-eq"]], "polars.Expr.eq_missing": [[442, "polars-expr-eq-missing"]], "polars.Expr.ewm_mean": [[443, "polars-expr-ewm-mean"]], "polars.Expr.ewm_mean_by": [[444, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_std": [[445, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[446, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[447, "polars-expr-exclude"]], "polars.Expr.exp": [[448, "polars-expr-exp"]], "polars.Expr.explode": [[449, "polars-expr-explode"]], "polars.Expr.extend_constant": [[450, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[451, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[452, "polars-expr-fill-null"]], "polars.Expr.filter": [[453, "polars-expr-filter"]], "polars.Expr.first": [[454, "polars-expr-first"]], "polars.Expr.flatten": [[455, "polars-expr-flatten"]], "polars.Expr.floor": [[456, "polars-expr-floor"]], "polars.Expr.floordiv": [[457, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[458, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[459, "polars-expr-from-json"]], "polars.Expr.gather": [[460, "polars-expr-gather"]], "polars.Expr.gather_every": [[461, "polars-expr-gather-every"]], "polars.Expr.ge": [[462, "polars-expr-ge"]], "polars.Expr.get": [[463, "polars-expr-get"]], "polars.Expr.gt": [[464, "polars-expr-gt"]], "polars.Expr.has_nulls": [[465, "polars-expr-has-nulls"]], "polars.Expr.hash": [[466, "polars-expr-hash"]], "polars.Expr.head": [[467, "polars-expr-head"]], "polars.Expr.hist": [[468, "polars-expr-hist"]], "polars.Expr.implode": [[469, "polars-expr-implode"]], "polars.Expr.inspect": [[470, "polars-expr-inspect"]], "polars.Expr.interpolate": [[471, "polars-expr-interpolate"]], "polars.Expr.interpolate_by": [[472, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[473, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[474, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[475, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[476, "polars-expr-is-first-distinct"]], "polars.Expr.is_in": [[477, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[478, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[479, "polars-expr-is-last-distinct"]], "polars.Expr.is_nan": [[480, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[481, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[482, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[483, "polars-expr-is-null"]], "polars.Expr.is_unique": [[484, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[485, "polars-expr-kurtosis"]], "polars.Expr.last": [[486, "polars-expr-last"]], "polars.Expr.le": [[487, "polars-expr-le"]], "polars.Expr.len": [[488, "polars-expr-len"]], "polars.Expr.limit": [[489, "polars-expr-limit"]], "polars.Expr.list.all": [[490, "polars-expr-list-all"]], "polars.Expr.list.any": [[491, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[492, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[493, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[494, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[495, "polars-expr-list-contains"]], "polars.Expr.list.count_matches": [[496, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[497, "polars-expr-list-diff"]], "polars.Expr.list.drop_nulls": [[498, "polars-expr-list-drop-nulls"]], "polars.Expr.list.eval": [[499, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[500, "polars-expr-list-explode"]], "polars.Expr.list.first": [[501, "polars-expr-list-first"]], "polars.Expr.list.gather": [[502, "polars-expr-list-gather"]], "polars.Expr.list.gather_every": [[503, "polars-expr-list-gather-every"]], "polars.Expr.list.get": [[504, "polars-expr-list-get"]], "polars.Expr.list.head": [[505, "polars-expr-list-head"]], "polars.Expr.list.join": [[506, "polars-expr-list-join"]], "polars.Expr.list.last": [[507, "polars-expr-list-last"]], "polars.Expr.list.len": [[508, "polars-expr-list-len"]], "polars.Expr.list.max": [[509, "polars-expr-list-max"]], "polars.Expr.list.mean": [[510, "polars-expr-list-mean"]], "polars.Expr.list.median": [[511, "polars-expr-list-median"]], "polars.Expr.list.min": [[512, "polars-expr-list-min"]], "polars.Expr.list.n_unique": [[513, "polars-expr-list-n-unique"]], "polars.Expr.list.reverse": [[514, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[515, "polars-expr-list-sample"]], "polars.Expr.list.set_difference": [[516, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[517, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_symmetric_difference": [[518, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[519, "polars-expr-list-set-union"]], "polars.Expr.list.shift": [[520, "polars-expr-list-shift"]], "polars.Expr.list.slice": [[521, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[522, "polars-expr-list-sort"]], "polars.Expr.list.std": [[523, "polars-expr-list-std"]], "polars.Expr.list.sum": [[524, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[525, "polars-expr-list-tail"]], "polars.Expr.list.to_array": [[526, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[527, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[528, "polars-expr-list-unique"]], "polars.Expr.list.var": [[529, "polars-expr-list-var"]], "polars.Expr.log": [[530, "polars-expr-log"]], "polars.Expr.log10": [[531, "polars-expr-log10"]], "polars.Expr.log1p": [[532, "polars-expr-log1p"]], "polars.Expr.lower_bound": [[533, "polars-expr-lower-bound"]], "polars.Expr.lt": [[534, "polars-expr-lt"]], "polars.Expr.map_batches": [[535, "polars-expr-map-batches"]], "polars.Expr.map_elements": [[536, "polars-expr-map-elements"]], "polars.Expr.max": [[537, "polars-expr-max"]], "polars.Expr.mean": [[538, "polars-expr-mean"]], "polars.Expr.median": [[539, "polars-expr-median"]], "polars.Expr.meta.eq": [[540, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[541, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.is_column_selection": [[542, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.is_regex_projection": [[543, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[544, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[545, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[546, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[547, "polars-expr-meta-root-names"]], "polars.Expr.meta.serialize": [[548, "polars-expr-meta-serialize"]], "polars.Expr.meta.tree_format": [[549, "polars-expr-meta-tree-format"]], "polars.Expr.meta.undo_aliases": [[550, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[551, "polars-expr-meta-write-json"]], "polars.Expr.min": [[552, "polars-expr-min"]], "polars.Expr.mod": [[553, "polars-expr-mod"]], "polars.Expr.mode": [[554, "polars-expr-mode"]], "polars.Expr.mul": [[555, "polars-expr-mul"]], "polars.Expr.n_unique": [[556, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[557, "polars-expr-name-keep"]], "polars.Expr.name.map": [[558, "polars-expr-name-map"]], "polars.Expr.name.map_fields": [[559, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix": [[560, "polars-expr-name-prefix"]], "polars.Expr.name.prefix_fields": [[561, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[562, "polars-expr-name-suffix"]], "polars.Expr.name.suffix_fields": [[563, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_lowercase": [[564, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[565, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_max": [[566, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[567, "polars-expr-nan-min"]], "polars.Expr.ne": [[568, "polars-expr-ne"]], "polars.Expr.ne_missing": [[569, "polars-expr-ne-missing"]], "polars.Expr.neg": [[570, "polars-expr-neg"]], "polars.Expr.not_": [[571, "polars-expr-not"]], "polars.Expr.null_count": [[572, "polars-expr-null-count"]], "polars.Expr.or_": [[573, "polars-expr-or"]], "polars.Expr.over": [[574, "polars-expr-over"]], "polars.Expr.pct_change": [[575, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[576, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[577, "polars-expr-peak-min"]], "polars.Expr.pipe": [[578, "polars-expr-pipe"]], "polars.Expr.pow": [[579, "polars-expr-pow"]], "polars.Expr.product": [[580, "polars-expr-product"]], "polars.Expr.qcut": [[581, "polars-expr-qcut"]], "polars.Expr.quantile": [[582, "polars-expr-quantile"]], "polars.Expr.radians": [[583, "polars-expr-radians"]], "polars.Expr.rank": [[584, "polars-expr-rank"]], "polars.Expr.rechunk": [[585, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[586, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[587, "polars-expr-repeat-by"]], "polars.Expr.replace": [[588, "polars-expr-replace"]], "polars.Expr.replace_strict": [[589, "polars-expr-replace-strict"]], "polars.Expr.reshape": [[590, "polars-expr-reshape"]], "polars.Expr.reverse": [[591, "polars-expr-reverse"]], "polars.Expr.rle": [[592, "polars-expr-rle"]], "polars.Expr.rle_id": [[593, "polars-expr-rle-id"]], "polars.Expr.rolling": [[594, "polars-expr-rolling"]], "polars.Expr.rolling_map": [[595, "polars-expr-rolling-map"]], "polars.Expr.rolling_max": [[596, "polars-expr-rolling-max"]], "polars.Expr.rolling_max_by": [[597, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_mean": [[598, "polars-expr-rolling-mean"]], "polars.Expr.rolling_mean_by": [[599, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[600, "polars-expr-rolling-median"]], "polars.Expr.rolling_median_by": [[601, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_min": [[602, "polars-expr-rolling-min"]], "polars.Expr.rolling_min_by": [[603, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_quantile": [[604, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_quantile_by": [[605, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_skew": [[606, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[607, "polars-expr-rolling-std"]], "polars.Expr.rolling_std_by": [[608, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_sum": [[609, "polars-expr-rolling-sum"]], "polars.Expr.rolling_sum_by": [[610, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_var": [[611, "polars-expr-rolling-var"]], "polars.Expr.rolling_var_by": [[612, "polars-expr-rolling-var-by"]], "polars.Expr.round": [[613, "polars-expr-round"]], "polars.Expr.round_sig_figs": [[614, "polars-expr-round-sig-figs"]], "polars.Expr.sample": [[615, "polars-expr-sample"]], "polars.Expr.search_sorted": [[616, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[617, "polars-expr-set-sorted"]], "polars.Expr.shift": [[618, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[619, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[620, "polars-expr-shuffle"]], "polars.Expr.sign": [[621, "polars-expr-sign"]], "polars.Expr.sin": [[622, "polars-expr-sin"]], "polars.Expr.sinh": [[623, "polars-expr-sinh"]], "polars.Expr.skew": [[624, "polars-expr-skew"]], "polars.Expr.slice": [[625, "polars-expr-slice"]], "polars.Expr.sort": [[626, "polars-expr-sort"]], "polars.Expr.sort_by": [[627, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[628, "polars-expr-sqrt"]], "polars.Expr.std": [[629, "polars-expr-std"]], "polars.Expr.str.concat": [[630, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[631, "polars-expr-str-contains"]], "polars.Expr.str.contains_any": [[632, "polars-expr-str-contains-any"]], "polars.Expr.str.count_matches": [[633, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[634, "polars-expr-str-decode"]], "polars.Expr.str.encode": [[635, "polars-expr-str-encode"]], "polars.Expr.str.ends_with": [[636, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[637, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[638, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[639, "polars-expr-str-extract-all"]], "polars.Expr.str.extract_groups": [[640, "polars-expr-str-extract-groups"]], "polars.Expr.str.extract_many": [[641, "polars-expr-str-extract-many"]], "polars.Expr.str.find": [[642, "polars-expr-str-find"]], "polars.Expr.str.head": [[643, "polars-expr-str-head"]], "polars.Expr.str.join": [[644, "polars-expr-str-join"]], "polars.Expr.str.json_decode": [[645, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[646, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_bytes": [[647, "polars-expr-str-len-bytes"]], "polars.Expr.str.len_chars": [[648, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_end": [[649, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[650, "polars-expr-str-pad-start"]], "polars.Expr.str.replace": [[651, "polars-expr-str-replace"]], "polars.Expr.str.replace_all": [[652, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[653, "polars-expr-str-replace-many"]], "polars.Expr.str.reverse": [[654, "polars-expr-str-reverse"]], "polars.Expr.str.slice": [[655, "polars-expr-str-slice"]], "polars.Expr.str.split": [[656, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[657, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[658, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[659, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_chars": [[660, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_chars_end": [[661, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars_start": [[662, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[663, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_suffix": [[664, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[665, "polars-expr-str-strptime"]], "polars.Expr.str.tail": [[666, "polars-expr-str-tail"]], "polars.Expr.str.to_date": [[667, "polars-expr-str-to-date"]], "polars.Expr.str.to_datetime": [[668, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[669, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[670, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[671, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[672, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[673, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_uppercase": [[674, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[675, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[676, "polars-expr-struct-field"]], "polars.Expr.struct.json_encode": [[677, "polars-expr-struct-json-encode"]], "polars.Expr.struct.rename_fields": [[678, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.with_fields": [[679, "polars-expr-struct-with-fields"]], "polars.Expr.sub": [[680, "polars-expr-sub"]], "polars.Expr.sum": [[681, "polars-expr-sum"]], "polars.Expr.tail": [[682, "polars-expr-tail"]], "polars.Expr.tan": [[683, "polars-expr-tan"]], "polars.Expr.tanh": [[684, "polars-expr-tanh"]], "polars.Expr.to_physical": [[685, "polars-expr-to-physical"]], "polars.Expr.top_k": [[686, "polars-expr-top-k"]], "polars.Expr.top_k_by": [[687, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[688, "polars-expr-truediv"]], "polars.Expr.unique": [[689, "polars-expr-unique"]], "polars.Expr.unique_counts": [[690, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[691, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[692, "polars-expr-value-counts"]], "polars.Expr.var": [[693, "polars-expr-var"]], "polars.Expr.where": [[694, "polars-expr-where"]], "polars.Expr.xor": [[695, "polars-expr-xor"]], "polars.LazyFrame.approx_n_unique": [[793, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[794, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[795, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[796, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[797, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[798, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[799, "polars-lazyframe-collect"]], "polars.LazyFrame.collect_async": [[800, "polars-lazyframe-collect-async"]], "polars.LazyFrame.collect_schema": [[801, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.columns": [[802, "polars-lazyframe-columns"]], "polars.LazyFrame.count": [[803, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[804, "polars-lazyframe-describe"]], "polars.LazyFrame.deserialize": [[805, "polars-lazyframe-deserialize"]], "polars.LazyFrame.drop": [[806, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[807, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[808, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explain": [[809, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[810, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[811, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[812, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[813, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[814, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[815, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[816, "polars-lazyframe-group-by"]], "polars.LazyFrame.group_by_dynamic": [[817, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.head": [[818, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[819, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[820, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[821, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[822, "polars-lazyframe-join-asof"]], "polars.LazyFrame.join_where": [[823, "polars-lazyframe-join-where"]], "polars.LazyFrame.last": [[824, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[825, "polars-lazyframe-lazy"]], "polars.LazyFrame.limit": [[826, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[827, "polars-lazyframe-map-batches"]], "polars.LazyFrame.max": [[828, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[829, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[830, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[831, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[832, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.min": [[833, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[834, "polars-lazyframe-null-count"]], "polars.LazyFrame.pipe": [[835, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[836, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[837, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[838, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[839, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[840, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[841, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[842, "polars-lazyframe-select"]], "polars.LazyFrame.select_seq": [[843, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[844, "polars-lazyframe-serialize"]], "polars.LazyFrame.set_sorted": [[845, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[846, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[847, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.slice": [[848, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[849, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[850, "polars-lazyframe-sql"]], "polars.LazyFrame.std": [[851, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[852, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[853, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[854, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[855, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[856, "polars-lazyframe-unnest"]], "polars.LazyFrame.unpivot": [[857, "polars-lazyframe-unpivot"]], "polars.LazyFrame.update": [[858, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[859, "polars-lazyframe-var"]], "polars.LazyFrame.width": [[860, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[861, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_columns_seq": [[862, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_context": [[863, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[864, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[865, "polars-lazyframe-with-row-index"]], "polars.SQLContext.execute": [[1271, "polars-sqlcontext-execute"]], "polars.SQLContext.execute_global": [[1272, "polars-sqlcontext-execute-global"]], "polars.SQLContext.register": [[1273, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[1274, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[1275, "polars-sqlcontext-register-many"]], "polars.SQLContext.tables": [[1276, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[1277, "polars-sqlcontext-unregister"]], "polars.Series.__array__": [[897, "polars-series-array"]], "polars.Series.__arrow_c_stream__": [[898, "polars-series-arrow-c-stream"]], "polars.Series.__getitem__": [[899, "polars-series-getitem"]], "polars.Series.abs": [[900, "polars-series-abs"]], "polars.Series.alias": [[901, "polars-series-alias"]], "polars.Series.all": [[902, "polars-series-all"]], "polars.Series.any": [[903, "polars-series-any"]], "polars.Series.append": [[904, "polars-series-append"]], "polars.Series.arccos": [[905, "polars-series-arccos"]], "polars.Series.arccosh": [[906, "polars-series-arccosh"]], "polars.Series.arcsin": [[907, "polars-series-arcsin"]], "polars.Series.arcsinh": [[908, "polars-series-arcsinh"]], "polars.Series.arctan": [[909, "polars-series-arctan"]], "polars.Series.arctanh": [[910, "polars-series-arctanh"]], "polars.Series.arg_max": [[911, "polars-series-arg-max"]], "polars.Series.arg_min": [[912, "polars-series-arg-min"]], "polars.Series.arg_sort": [[913, "polars-series-arg-sort"]], "polars.Series.arg_true": [[914, "polars-series-arg-true"]], "polars.Series.arg_unique": [[915, "polars-series-arg-unique"]], "polars.Series.arr.all": [[916, "polars-series-arr-all"]], "polars.Series.arr.any": [[917, "polars-series-arr-any"]], "polars.Series.arr.arg_max": [[918, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[919, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[920, "polars-series-arr-contains"]], "polars.Series.arr.count_matches": [[921, "polars-series-arr-count-matches"]], "polars.Series.arr.explode": [[922, "polars-series-arr-explode"]], "polars.Series.arr.first": [[923, "polars-series-arr-first"]], "polars.Series.arr.get": [[924, "polars-series-arr-get"]], "polars.Series.arr.join": [[925, "polars-series-arr-join"]], "polars.Series.arr.last": [[926, "polars-series-arr-last"]], "polars.Series.arr.max": [[927, "polars-series-arr-max"]], "polars.Series.arr.median": [[928, "polars-series-arr-median"]], "polars.Series.arr.min": [[929, "polars-series-arr-min"]], "polars.Series.arr.n_unique": [[930, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[931, "polars-series-arr-reverse"]], "polars.Series.arr.shift": [[932, "polars-series-arr-shift"]], "polars.Series.arr.sort": [[933, "polars-series-arr-sort"]], "polars.Series.arr.std": [[934, "polars-series-arr-std"]], "polars.Series.arr.sum": [[935, "polars-series-arr-sum"]], "polars.Series.arr.to_list": [[936, "polars-series-arr-to-list"]], "polars.Series.arr.to_struct": [[937, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[938, "polars-series-arr-unique"]], "polars.Series.arr.var": [[939, "polars-series-arr-var"]], "polars.Series.bin.contains": [[940, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[941, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[942, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[943, "polars-series-bin-ends-with"]], "polars.Series.bin.size": [[944, "polars-series-bin-size"]], "polars.Series.bin.starts_with": [[945, "polars-series-bin-starts-with"]], "polars.Series.bottom_k": [[946, "polars-series-bottom-k"]], "polars.Series.cast": [[947, "polars-series-cast"]], "polars.Series.cat.get_categories": [[948, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[949, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[950, "polars-series-cat-to-local"]], "polars.Series.cat.uses_lexical_ordering": [[951, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cbrt": [[952, "polars-series-cbrt"]], "polars.Series.ceil": [[953, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[954, "polars-series-chunk-lengths"]], "polars.Series.clear": [[955, "polars-series-clear"]], "polars.Series.clip": [[956, "polars-series-clip"]], "polars.Series.clone": [[957, "polars-series-clone"]], "polars.Series.cos": [[958, "polars-series-cos"]], "polars.Series.cosh": [[959, "polars-series-cosh"]], "polars.Series.cot": [[960, "polars-series-cot"]], "polars.Series.count": [[961, "polars-series-count"]], "polars.Series.cum_count": [[962, "polars-series-cum-count"]], "polars.Series.cum_max": [[963, "polars-series-cum-max"]], "polars.Series.cum_min": [[964, "polars-series-cum-min"]], "polars.Series.cum_prod": [[965, "polars-series-cum-prod"]], "polars.Series.cum_sum": [[966, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[967, "polars-series-cumulative-eval"]], "polars.Series.cut": [[968, "polars-series-cut"]], "polars.Series.describe": [[969, "polars-series-describe"]], "polars.Series.diff": [[970, "polars-series-diff"]], "polars.Series.dot": [[971, "polars-series-dot"]], "polars.Series.drop_nans": [[972, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[973, "polars-series-drop-nulls"]], "polars.Series.dt.add_business_days": [[974, "polars-series-dt-add-business-days"]], "polars.Series.dt.base_utc_offset": [[975, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[976, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.century": [[977, "polars-series-dt-century"]], "polars.Series.dt.combine": [[978, "polars-series-dt-combine"]], "polars.Series.dt.convert_time_zone": [[979, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.date": [[980, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[981, "polars-series-dt-datetime"]], "polars.Series.dt.day": [[982, "polars-series-dt-day"]], "polars.Series.dt.dst_offset": [[983, "polars-series-dt-dst-offset"]], "polars.Series.dt.epoch": [[984, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[985, "polars-series-dt-hour"]], "polars.Series.dt.is_leap_year": [[986, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[987, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[988, "polars-series-dt-max"]], "polars.Series.dt.mean": [[989, "polars-series-dt-mean"]], "polars.Series.dt.median": [[990, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[991, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[992, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[993, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[994, "polars-series-dt-min"]], "polars.Series.dt.minute": [[995, "polars-series-dt-minute"]], "polars.Series.dt.month": [[996, "polars-series-dt-month"]], "polars.Series.dt.month_end": [[997, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[998, "polars-series-dt-month-start"]], "polars.Series.dt.nanosecond": [[999, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[1000, "polars-series-dt-offset-by"]], "polars.Series.dt.ordinal_day": [[1001, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[1002, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[1003, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.round": [[1004, "polars-series-dt-round"]], "polars.Series.dt.second": [[1005, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[1006, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[1007, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[1008, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[1009, "polars-series-dt-to-string"]], "polars.Series.dt.total_days": [[1010, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[1011, "polars-series-dt-total-hours"]], "polars.Series.dt.total_microseconds": [[1012, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[1013, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1014, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[1015, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.total_seconds": [[1016, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[1017, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[1018, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[1019, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1020, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1021, "polars-series-dt-year"]], "polars.Series.dtype": [[1022, "polars-series-dtype"]], "polars.Series.entropy": [[1023, "polars-series-entropy"]], "polars.Series.eq": [[1024, "polars-series-eq"]], "polars.Series.eq_missing": [[1025, "polars-series-eq-missing"]], "polars.Series.equals": [[1026, "polars-series-equals"]], "polars.Series.estimated_size": [[1027, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[1028, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1029, "polars-series-ewm-mean-by"]], "polars.Series.ewm_std": [[1030, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[1031, "polars-series-ewm-var"]], "polars.Series.exp": [[1032, "polars-series-exp"]], "polars.Series.explode": [[1033, "polars-series-explode"]], "polars.Series.extend": [[1034, "polars-series-extend"]], "polars.Series.extend_constant": [[1035, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[1036, "polars-series-fill-nan"]], "polars.Series.fill_null": [[1037, "polars-series-fill-null"]], "polars.Series.filter": [[1038, "polars-series-filter"]], "polars.Series.flags": [[1039, "polars-series-flags"]], "polars.Series.floor": [[1040, "polars-series-floor"]], "polars.Series.gather": [[1041, "polars-series-gather"]], "polars.Series.gather_every": [[1042, "polars-series-gather-every"]], "polars.Series.ge": [[1043, "polars-series-ge"]], "polars.Series.get_chunks": [[1044, "polars-series-get-chunks"]], "polars.Series.gt": [[1045, "polars-series-gt"]], "polars.Series.has_nulls": [[1046, "polars-series-has-nulls"]], "polars.Series.has_validity": [[1047, "polars-series-has-validity"]], "polars.Series.hash": [[1048, "polars-series-hash"]], "polars.Series.head": [[1049, "polars-series-head"]], "polars.Series.hist": [[1050, "polars-series-hist"]], "polars.Series.implode": [[1051, "polars-series-implode"]], "polars.Series.interpolate": [[1052, "polars-series-interpolate"]], "polars.Series.interpolate_by": [[1053, "polars-series-interpolate-by"]], "polars.Series.is_between": [[1054, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1055, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1056, "polars-series-is-empty"]], "polars.Series.is_finite": [[1057, "polars-series-is-finite"]], "polars.Series.is_first_distinct": [[1058, "polars-series-is-first-distinct"]], "polars.Series.is_in": [[1059, "polars-series-is-in"]], "polars.Series.is_infinite": [[1060, "polars-series-is-infinite"]], "polars.Series.is_last_distinct": [[1061, "polars-series-is-last-distinct"]], "polars.Series.is_nan": [[1062, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[1063, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1064, "polars-series-is-not-null"]], "polars.Series.is_null": [[1065, "polars-series-is-null"]], "polars.Series.is_sorted": [[1066, "polars-series-is-sorted"]], "polars.Series.is_unique": [[1067, "polars-series-is-unique"]], "polars.Series.item": [[1068, "polars-series-item"]], "polars.Series.kurtosis": [[1069, "polars-series-kurtosis"]], "polars.Series.le": [[1070, "polars-series-le"]], "polars.Series.len": [[1071, "polars-series-len"]], "polars.Series.limit": [[1072, "polars-series-limit"]], "polars.Series.list.all": [[1073, "polars-series-list-all"]], "polars.Series.list.any": [[1074, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1075, "polars-series-list-arg-max"]], "polars.Series.list.arg_min": [[1076, "polars-series-list-arg-min"]], "polars.Series.list.concat": [[1077, "polars-series-list-concat"]], "polars.Series.list.contains": [[1078, "polars-series-list-contains"]], "polars.Series.list.count_matches": [[1079, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1080, "polars-series-list-diff"]], "polars.Series.list.drop_nulls": [[1081, "polars-series-list-drop-nulls"]], "polars.Series.list.eval": [[1082, "polars-series-list-eval"]], "polars.Series.list.explode": [[1083, "polars-series-list-explode"]], "polars.Series.list.first": [[1084, "polars-series-list-first"]], "polars.Series.list.gather": [[1085, "polars-series-list-gather"]], "polars.Series.list.gather_every": [[1086, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1087, "polars-series-list-get"]], "polars.Series.list.head": [[1088, "polars-series-list-head"]], "polars.Series.list.join": [[1089, "polars-series-list-join"]], "polars.Series.list.last": [[1090, "polars-series-list-last"]], "polars.Series.list.len": [[1091, "polars-series-list-len"]], "polars.Series.list.max": [[1092, "polars-series-list-max"]], "polars.Series.list.mean": [[1093, "polars-series-list-mean"]], "polars.Series.list.median": [[1094, "polars-series-list-median"]], "polars.Series.list.min": [[1095, "polars-series-list-min"]], "polars.Series.list.n_unique": [[1096, "polars-series-list-n-unique"]], "polars.Series.list.reverse": [[1097, "polars-series-list-reverse"]], "polars.Series.list.sample": [[1098, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1099, "polars-series-list-set-difference"]], "polars.Series.list.set_intersection": [[1100, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1101, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[1102, "polars-series-list-set-union"]], "polars.Series.list.shift": [[1103, "polars-series-list-shift"]], "polars.Series.list.slice": [[1104, "polars-series-list-slice"]], "polars.Series.list.sort": [[1105, "polars-series-list-sort"]], "polars.Series.list.std": [[1106, "polars-series-list-std"]], "polars.Series.list.sum": [[1107, "polars-series-list-sum"]], "polars.Series.list.tail": [[1108, "polars-series-list-tail"]], "polars.Series.list.to_array": [[1109, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1110, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1111, "polars-series-list-unique"]], "polars.Series.list.var": [[1112, "polars-series-list-var"]], "polars.Series.log": [[1113, "polars-series-log"]], "polars.Series.log10": [[1114, "polars-series-log10"]], "polars.Series.log1p": [[1115, "polars-series-log1p"]], "polars.Series.lower_bound": [[1116, "polars-series-lower-bound"]], "polars.Series.lt": [[1117, "polars-series-lt"]], "polars.Series.map_elements": [[1118, "polars-series-map-elements"]], "polars.Series.max": [[1119, "polars-series-max"]], "polars.Series.mean": [[1120, "polars-series-mean"]], "polars.Series.median": [[1121, "polars-series-median"]], "polars.Series.min": [[1122, "polars-series-min"]], "polars.Series.mode": [[1123, "polars-series-mode"]], "polars.Series.n_chunks": [[1124, "polars-series-n-chunks"]], "polars.Series.n_unique": [[1125, "polars-series-n-unique"]], "polars.Series.name": [[1126, "polars-series-name"]], "polars.Series.nan_max": [[1127, "polars-series-nan-max"]], "polars.Series.nan_min": [[1128, "polars-series-nan-min"]], "polars.Series.ne": [[1129, "polars-series-ne"]], "polars.Series.ne_missing": [[1130, "polars-series-ne-missing"]], "polars.Series.new_from_index": [[1131, "polars-series-new-from-index"]], "polars.Series.not_": [[1132, "polars-series-not"]], "polars.Series.null_count": [[1133, "polars-series-null-count"]], "polars.Series.pct_change": [[1134, "polars-series-pct-change"]], "polars.Series.peak_max": [[1135, "polars-series-peak-max"]], "polars.Series.peak_min": [[1136, "polars-series-peak-min"]], "polars.Series.pow": [[1137, "polars-series-pow"]], "polars.Series.product": [[1138, "polars-series-product"]], "polars.Series.qcut": [[1139, "polars-series-qcut"]], "polars.Series.quantile": [[1140, "polars-series-quantile"]], "polars.Series.rank": [[1141, "polars-series-rank"]], "polars.Series.rechunk": [[1142, "polars-series-rechunk"]], "polars.Series.reinterpret": [[1143, "polars-series-reinterpret"]], "polars.Series.rename": [[1144, "polars-series-rename"]], "polars.Series.replace": [[1145, "polars-series-replace"]], "polars.Series.replace_strict": [[1146, "polars-series-replace-strict"]], "polars.Series.reshape": [[1147, "polars-series-reshape"]], "polars.Series.reverse": [[1148, "polars-series-reverse"]], "polars.Series.rle": [[1149, "polars-series-rle"]], "polars.Series.rle_id": [[1150, "polars-series-rle-id"]], "polars.Series.rolling_map": [[1151, "polars-series-rolling-map"]], "polars.Series.rolling_max": [[1152, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1153, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[1154, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[1155, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[1156, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[1157, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[1158, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1159, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[1160, "polars-series-rolling-var"]], "polars.Series.round": [[1161, "polars-series-round"]], "polars.Series.round_sig_figs": [[1162, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1163, "polars-series-sample"]], "polars.Series.scatter": [[1164, "polars-series-scatter"]], "polars.Series.search_sorted": [[1165, "polars-series-search-sorted"]], "polars.Series.set": [[1166, "polars-series-set"]], "polars.Series.set_sorted": [[1167, "polars-series-set-sorted"]], "polars.Series.shape": [[1168, "polars-series-shape"]], "polars.Series.shift": [[1169, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1170, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1171, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[1172, "polars-series-shuffle"]], "polars.Series.sign": [[1173, "polars-series-sign"]], "polars.Series.sin": [[1174, "polars-series-sin"]], "polars.Series.sinh": [[1175, "polars-series-sinh"]], "polars.Series.skew": [[1176, "polars-series-skew"]], "polars.Series.slice": [[1177, "polars-series-slice"]], "polars.Series.sort": [[1178, "polars-series-sort"]], "polars.Series.sqrt": [[1179, "polars-series-sqrt"]], "polars.Series.std": [[1180, "polars-series-std"]], "polars.Series.str.concat": [[1181, "polars-series-str-concat"]], "polars.Series.str.contains": [[1182, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1183, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1184, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1185, "polars-series-str-decode"]], "polars.Series.str.encode": [[1186, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1187, "polars-series-str-ends-with"]], "polars.Series.str.explode": [[1188, "polars-series-str-explode"]], "polars.Series.str.extract": [[1189, "polars-series-str-extract"]], "polars.Series.str.extract_all": [[1190, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1191, "polars-series-str-extract-groups"]], "polars.Series.str.extract_many": [[1192, "polars-series-str-extract-many"]], "polars.Series.str.find": [[1193, "polars-series-str-find"]], "polars.Series.str.head": [[1194, "polars-series-str-head"]], "polars.Series.str.join": [[1195, "polars-series-str-join"]], "polars.Series.str.json_decode": [[1196, "polars-series-str-json-decode"]], "polars.Series.str.json_path_match": [[1197, "polars-series-str-json-path-match"]], "polars.Series.str.len_bytes": [[1198, "polars-series-str-len-bytes"]], "polars.Series.str.len_chars": [[1199, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1200, "polars-series-str-pad-end"]], "polars.Series.str.pad_start": [[1201, "polars-series-str-pad-start"]], "polars.Series.str.replace": [[1202, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[1203, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1204, "polars-series-str-replace-many"]], "polars.Series.str.reverse": [[1205, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1206, "polars-series-str-slice"]], "polars.Series.str.split": [[1207, "polars-series-str-split"]], "polars.Series.str.split_exact": [[1208, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1209, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1210, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars": [[1211, "polars-series-str-strip-chars"]], "polars.Series.str.strip_chars_end": [[1212, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1213, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip_prefix": [[1214, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1215, "polars-series-str-strip-suffix"]], "polars.Series.str.strptime": [[1216, "polars-series-str-strptime"]], "polars.Series.str.tail": [[1217, "polars-series-str-tail"]], "polars.Series.str.to_date": [[1218, "polars-series-str-to-date"]], "polars.Series.str.to_datetime": [[1219, "polars-series-str-to-datetime"]], "polars.Series.str.to_decimal": [[1220, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1221, "polars-series-str-to-integer"]], "polars.Series.str.to_lowercase": [[1222, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1223, "polars-series-str-to-time"]], "polars.Series.str.to_titlecase": [[1224, "polars-series-str-to-titlecase"]], "polars.Series.str.to_uppercase": [[1225, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1226, "polars-series-str-zfill"]], "polars.Series.struct.field": [[1227, "polars-series-struct-field"]], "polars.Series.struct.fields": [[1228, "polars-series-struct-fields"]], "polars.Series.struct.json_encode": [[1229, "polars-series-struct-json-encode"]], "polars.Series.struct.rename_fields": [[1230, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1231, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1232, "polars-series-struct-unnest"]], "polars.Series.sum": [[1233, "polars-series-sum"]], "polars.Series.tail": [[1234, "polars-series-tail"]], "polars.Series.tan": [[1235, "polars-series-tan"]], "polars.Series.tanh": [[1236, "polars-series-tanh"]], "polars.Series.to_arrow": [[1237, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[1238, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1239, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1240, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1241, "polars-series-to-jax"]], "polars.Series.to_list": [[1242, "polars-series-to-list"]], "polars.Series.to_numpy": [[1243, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[1244, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1245, "polars-series-to-physical"]], "polars.Series.to_torch": [[1246, "polars-series-to-torch"]], "polars.Series.top_k": [[1247, "polars-series-top-k"]], "polars.Series.unique": [[1248, "polars-series-unique"]], "polars.Series.unique_counts": [[1249, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1250, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1251, "polars-series-value-counts"]], "polars.Series.var": [[1252, "polars-series-var"]], "polars.Series.zip_with": [[1253, "polars-series-zip-with"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.all": [[696, "polars-all"]], "polars.all_horizontal": [[697, "polars-all-horizontal"]], "polars.any": [[698, "polars-any"]], "polars.any_horizontal": [[699, "polars-any-horizontal"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.approx_n_unique": [[700, "polars-approx-n-unique"]], "polars.arange": [[701, "polars-arange"]], "polars.arctan2": [[702, "polars-arctan2"]], "polars.arctan2d": [[703, "polars-arctan2d"]], "polars.arg_sort_by": [[704, "polars-arg-sort-by"]], "polars.arg_where": [[705, "polars-arg-where"]], "polars.build_info": [[52, "polars-build-info"]], "polars.business_day_count": [[706, "polars-business-day-count"]], "polars.coalesce": [[707, "polars-coalesce"]], "polars.col": [[774, "polars-col"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.concat": [[55, "polars-concat"]], "polars.concat_list": [[708, "polars-concat-list"]], "polars.concat_str": [[709, "polars-concat-str"]], "polars.corr": [[710, "polars-corr"]], "polars.count": [[711, "polars-count"]], "polars.cov": [[712, "polars-cov"]], "polars.cum_count": [[713, "polars-cum-count"]], "polars.cum_fold": [[714, "polars-cum-fold"]], "polars.cum_reduce": [[715, "polars-cum-reduce"]], "polars.cum_sum": [[716, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[717, "polars-cum-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.__iter__": [[291, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[292, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.all": [[293, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.count": [[294, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[295, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[296, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.last": [[297, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.len": [[298, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.map_groups": [[299, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[300, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[301, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.median": [[302, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[303, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[304, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[305, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[306, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[307, "polars-dataframe-group-by-groupby-tail"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.date": [[718, "polars-date"]], "polars.date_range": [[719, "polars-date-range"]], "polars.date_ranges": [[720, "polars-date-ranges"]], "polars.datetime": [[721, "polars-datetime"]], "polars.datetime_range": [[722, "polars-datetime-range"]], "polars.datetime_ranges": [[723, "polars-datetime-ranges"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.duration": [[724, "polars-duration"]], "polars.element": [[725, "polars-element"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.exclude": [[726, "polars-exclude"]], "polars.first": [[727, "polars-first"]], "polars.fold": [[728, "polars-fold"]], "polars.format": [[729, "polars-format"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_epoch": [[730, "polars-from-epoch"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.from_records": [[122, "polars-from-records"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.groups": [[731, "polars-groups"]], "polars.head": [[732, "polars-head"]], "polars.implode": [[733, "polars-implode"]], "polars.int_range": [[734, "polars-int-range"]], "polars.int_ranges": [[735, "polars-int-ranges"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.last": [[736, "polars-last"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[866, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[867, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[868, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[869, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[870, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[871, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[872, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[873, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[874, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[875, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[876, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[877, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[878, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[879, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[880, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[881, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[882, "polars-lazyframe-in-process-inprocessquery-cancel"]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[883, "polars-lazyframe-in-process-inprocessquery-fetch"]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[884, "polars-lazyframe-in-process-inprocessquery-fetch-blocking"]], "polars.len": [[737, "polars-len"]], "polars.lit": [[738, "polars-lit"]], "polars.map_batches": [[739, "polars-map-batches"]], "polars.map_groups": [[740, "polars-map-groups"]], "polars.max": [[741, "polars-max"]], "polars.max_horizontal": [[742, "polars-max-horizontal"]], "polars.mean": [[743, "polars-mean"]], "polars.mean_horizontal": [[744, "polars-mean-horizontal"]], "polars.median": [[745, "polars-median"]], "polars.min": [[746, "polars-min"]], "polars.min_horizontal": [[747, "polars-min-horizontal"]], "polars.n_unique": [[748, "polars-n-unique"]], "polars.nth": [[749, "polars-nth"]], "polars.ones": [[750, "polars-ones"]], "polars.quantile": [[751, "polars-quantile"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.read_database": [[131, "polars-read-database"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_json": [[138, "polars-read-json"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.reduce": [[752, "polars-reduce"]], "polars.repeat": [[753, "polars-repeat"]], "polars.rolling_corr": [[754, "polars-rolling-corr"]], "polars.rolling_cov": [[755, "polars-rolling-cov"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.select": [[756, "polars-select"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.sql": [[757, "polars-sql"]], "polars.sql_expr": [[758, "polars-sql-expr"]], "polars.std": [[759, "polars-std"]], "polars.struct": [[760, "polars-struct"]], "polars.sum": [[761, "polars-sum"]], "polars.sum_horizontal": [[762, "polars-sum-horizontal"]], "polars.tail": [[763, "polars-tail"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.time": [[764, "polars-time"]], "polars.time_range": [[765, "polars-time-range"]], "polars.time_ranges": [[766, "polars-time-ranges"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.var": [[767, "polars-var"]], "polars.when": [[768, "polars-when"]], "polars.zeros": [[769, "polars-zeros"]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[170, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[897, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[171, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[898, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[172, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1289, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1289, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[173, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[899, "polars.Series.__getitem__", false]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.sqlcontext method)": [[1289, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[321, "polars.Expr.abs", false]], "abs() (polars.series method)": [[900, "polars.Series.abs", false]], "add() (polars.expr method)": [[322, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[396, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[974, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[323, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[324, "polars.Expr.alias", false]], "alias() (polars.series method)": [[901, "polars.Series.alias", false]], "align_frames() (in module polars)": [[47, "polars.align_frames", false]], "all() (in module polars)": [[696, "polars.all", false]], "all() (in module polars.selectors)": [[895, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[325, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[341, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[490, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[902, "polars.Series.all", false]], "all() (polars.series.arr method)": [[916, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1073, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[697, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[895, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[895, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[326, "polars.Expr.and_", false]], "any() (in module polars)": [[698, "polars.any", false]], "any() (polars.expr method)": [[327, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[342, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[491, "polars.Expr.list.any", false]], "any() (polars.series method)": [[903, "polars.Series.any", false]], "any() (polars.series.arr method)": [[917, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1074, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[699, "polars.any_horizontal", false]], "append() (polars.expr method)": [[328, "polars.Expr.append", false]], "append() (polars.series method)": [[904, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[700, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[174, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[329, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[793, "polars.LazyFrame.approx_n_unique", false]], "arange() (in module polars)": [[701, "polars.arange", false]], "arccos() (polars.expr method)": [[330, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[905, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[331, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[906, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[332, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[907, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[333, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[908, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[334, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[909, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[702, "polars.arctan2", false]], "arctan2d() (in module polars)": [[703, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[335, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[910, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[336, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[343, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[492, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[911, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[918, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1075, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[337, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[344, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[493, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[912, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[919, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1076, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[338, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[913, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[704, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[339, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[914, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[340, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[915, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[705, "polars.arg_where", false]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[365, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[397, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[975, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[895, "polars.selectors.binary", false]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[895, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[175, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[372, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[794, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[946, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[373, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[52, "polars.build_info", false]], "business_day_count() (in module polars)": [[706, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[895, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[895, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[895, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[795, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[882, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[176, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[374, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[796, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[947, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[398, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[976, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[895, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[376, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[952, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[377, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[953, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[399, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[977, "polars.Series.dt.century", false]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[954, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[177, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[797, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[955, "polars.Series.clear", false]], "clip() (polars.expr method)": [[378, "polars.Expr.clip", false]], "clip() (polars.series method)": [[956, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[178, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[798, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[957, "polars.Series.clone", false]], "coalesce() (in module polars)": [[707, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[799, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[53, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[800, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[179, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[801, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column", false]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[180, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[802, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[400, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[978, "polars.Series.dt.combine", false]], "computeerror": [[89, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[55, "polars.concat", false]], "concat() (polars.expr.list method)": [[494, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[630, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1077, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1181, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[708, "polars.concat_list", false]], "concat_str() (in module polars)": [[709, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[895, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[345, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[366, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[495, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[631, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[920, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[940, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1078, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1182, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[632, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1183, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[401, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[979, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[710, "polars.corr", false]], "corr() (polars.dataframe method)": [[181, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[379, "polars.Expr.cos", false]], "cos() (polars.series method)": [[958, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[380, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[959, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[381, "polars.Expr.cot", false]], "cot() (polars.series method)": [[960, "polars.Series.cot", false]], "count() (in module polars)": [[711, "polars.count", false]], "count() (polars.dataframe method)": [[182, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[382, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[803, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[961, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[346, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[496, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[633, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[921, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1079, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1184, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[712, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy", false]], "cum_count() (in module polars)": [[713, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[383, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[962, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[714, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[384, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[963, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[385, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[964, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[386, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[965, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[715, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[716, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[387, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[966, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[717, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[388, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[967, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[389, "polars.Expr.cut", false]], "cut() (polars.series method)": [[968, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date", false]], "date() (in module polars)": [[718, "polars.date", false]], "date() (in module polars.selectors)": [[895, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[402, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[980, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[719, "polars.date_range", false]], "date_ranges() (in module polars)": [[720, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[721, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[895, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[403, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[981, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[722, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[723, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[404, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[982, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[895, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[367, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[634, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[941, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1185, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[390, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[183, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[804, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[969, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[184, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[391, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[805, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[392, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[497, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[970, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1080, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[895, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[393, "polars.Expr.dot", false]], "dot() (polars.series method)": [[971, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[185, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[806, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[186, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[394, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[972, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[187, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[395, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[498, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[807, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[973, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1081, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[405, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[983, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1022, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[188, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[808, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[92, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[724, "polars.duration", false]], "duration() (in module polars.selectors)": [[895, "polars.selectors.duration", false]], "element() (in module polars)": [[725, "polars.element", false]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[368, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[635, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[942, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1186, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[895, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[369, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[636, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[943, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1187, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[440, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1023, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[406, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[984, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[441, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[540, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1024, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[442, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1025, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[189, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1026, "polars.Series.equals", false]], "estimated_size() (polars.dataframe method)": [[190, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1027, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[499, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1082, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[443, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1028, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[444, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1029, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[445, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1030, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[446, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1031, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[726, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[895, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[447, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1271, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1272, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[448, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1032, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[895, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[809, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[191, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[449, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[347, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[500, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[637, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[810, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1033, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[922, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1083, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1188, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[192, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1034, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[450, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1035, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[638, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1189, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[639, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1190, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[640, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1191, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[641, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1192, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[883, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[884, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[676, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1227, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1228, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[193, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[451, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[811, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1036, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[194, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[452, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[812, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1037, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[195, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[453, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[813, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1038, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[642, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1193, "polars.Series.str.find", false]], "first() (in module polars)": [[727, "polars.first", false]], "first() (in module polars.selectors)": [[895, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[454, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[348, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[501, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[814, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series.arr method)": [[923, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1084, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[196, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1039, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[455, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[895, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[456, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1040, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[457, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[728, "polars.fold", false]], "fold() (polars.dataframe method)": [[197, "polars.DataFrame.fold", false]], "format() (in module polars)": [[729, "polars.format", false]], "forward_fill() (polars.expr method)": [[458, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[116, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[118, "polars.from_dict", false]], "from_dicts() (in module polars)": [[119, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[730, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[459, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[120, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[121, "polars.from_pandas", false]], "from_records() (in module polars)": [[122, "polars.from_records", false]], "from_repr() (in module polars)": [[123, "polars.from_repr", false]], "gather() (polars.expr method)": [[460, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[502, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1041, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1085, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[198, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[461, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[503, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[815, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1042, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1086, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[462, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1043, "polars.Series.ge", false]], "get() (polars.expr method)": [[463, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[349, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[504, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[924, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1087, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[375, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[948, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1044, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[199, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[200, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[201, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[124, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[202, "polars.DataFrame.glimpse", false]], "group_by() (polars.dataframe method)": [[203, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[816, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[204, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[817, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[731, "polars.groups", false]], "gt() (polars.expr method)": [[464, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1045, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[541, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[465, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1046, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1047, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[466, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1048, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[205, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[732, "polars.head", false]], "head() (polars.dataframe method)": [[206, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[467, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[505, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[643, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[818, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1049, "polars.Series.head", false]], "head() (polars.series.list method)": [[1088, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1194, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[207, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[468, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1050, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[407, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[985, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[208, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[733, "polars.implode", false]], "implode() (polars.expr method)": [[469, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1051, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[209, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[470, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[819, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[734, "polars.int_range", false]], "int_ranges() (in module polars)": [[735, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[895, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[210, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[471, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[820, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1052, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[472, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1053, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[473, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1054, "polars.Series.is_between", false]], "is_column_selection() (polars.expr.meta method)": [[542, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[211, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[474, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1055, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[212, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1056, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[475, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1057, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[476, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1058, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[477, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1059, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[478, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1060, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[479, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1061, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[408, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[986, "polars.Series.dt.is_leap_year", false]], "is_local() (polars.series.cat method)": [[949, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[480, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1062, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[481, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1063, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[482, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1064, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[483, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1065, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[543, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[895, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1066, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[213, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[484, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1067, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[409, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[987, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[214, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1068, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[215, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[216, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[217, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[218, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[350, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[506, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[644, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[821, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[925, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1089, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1195, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[219, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[822, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[220, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[823, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[645, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1196, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[677, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1229, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[126, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[646, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1197, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[557, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[485, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1069, "polars.Series.kurtosis", false]], "last() (in module polars)": [[736, "polars.last", false]], "last() (in module polars.selectors)": [[895, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[486, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[351, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[507, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[824, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series.arr method)": [[926, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1090, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[221, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[825, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[487, "polars.Expr.le", false]], "le() (polars.series method)": [[1070, "polars.Series.le", false]], "len() (in module polars)": [[737, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[488, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[508, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1071, "polars.Series.len", false]], "len() (polars.series.list method)": [[1091, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[647, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1198, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[648, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1199, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[222, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[489, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[826, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1072, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[738, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[530, "polars.Expr.log", false]], "log() (polars.series method)": [[1113, "polars.Series.log", false]], "log10() (polars.expr method)": [[531, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1114, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[532, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1115, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[533, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1116, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[534, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1117, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[558, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[739, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[535, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[827, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[536, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1118, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[559, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[740, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[873, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[223, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[895, "polars.selectors.matches", false]], "max() (in module polars)": [[741, "polars.max", false]], "max() (polars.dataframe method)": [[224, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[537, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[352, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[509, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[828, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[874, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1119, "polars.Series.max", false]], "max() (polars.series.arr method)": [[927, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[988, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1092, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[742, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[225, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[743, "polars.mean", false]], "mean() (polars.dataframe method)": [[226, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[538, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[510, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[829, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1120, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[989, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1093, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[744, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[227, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[745, "polars.median", false]], "median() (polars.dataframe method)": [[228, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[539, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[353, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[511, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[830, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[876, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1121, "polars.Series.median", false]], "median() (polars.series.arr method)": [[928, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[990, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1094, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[229, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[831, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[230, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[832, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[410, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[991, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[411, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[992, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[412, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[993, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[746, "polars.min", false]], "min() (polars.dataframe method)": [[231, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[552, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[354, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[512, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[833, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[877, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1122, "polars.Series.min", false]], "min() (polars.series.arr method)": [[929, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[994, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1095, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[747, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[232, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[413, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[995, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[553, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[554, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1123, "polars.Series.mode", false]], "module": [[893, "module-polars.plugins", false], [895, "module-polars.selectors", false]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[414, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[996, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[415, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[997, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[416, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[998, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[555, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[233, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1124, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[748, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[234, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[556, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[355, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[513, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[878, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1125, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[930, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1096, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1126, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[566, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1127, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[567, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1128, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[417, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[999, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[568, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[544, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1129, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[569, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1130, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[570, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1131, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[96, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[571, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1132, "polars.Series.not_", false]], "nth() (in module polars)": [[749, "polars.nth", false]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[235, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[572, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[834, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1133, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[895, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[418, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1000, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[750, "polars.ones", false]], "or_() (polars.expr method)": [[573, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[419, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1001, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[545, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[574, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[649, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1200, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[650, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1201, "polars.Series.str.pad_start", false]], "panicexception": [[99, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[236, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[575, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1134, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[576, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1135, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[577, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1136, "polars.Series.peak_min", false]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[237, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[578, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[835, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[238, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[316, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1267, "polars.Series.plot", false]], "polars.plugins": [[893, "module-polars.plugins", false]], "polars.selectors": [[895, "module-polars.selectors", false]], "polarserror": [[102, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[104, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[546, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[579, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1137, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[560, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[561, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[239, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[580, "polars.Expr.product", false]], "product() (polars.series method)": [[1138, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[836, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[581, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1139, "polars.Series.qcut", false]], "quantile() (in module polars)": [[751, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[240, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[582, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[837, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[879, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1140, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[420, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1002, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[583, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[584, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1141, "polars.Series.rank", false]], "read_avro() (in module polars)": [[127, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[129, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[131, "polars.read_database", false]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[133, "polars.read_delta", false]], "read_excel() (in module polars)": [[134, "polars.read_excel", false]], "read_ipc() (in module polars)": [[135, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[138, "polars.read_json", false]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[140, "polars.read_ods", false]], "read_parquet() (in module polars)": [[141, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[241, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[585, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1142, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[752, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1273, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1274, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1275, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[893, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[586, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1143, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[242, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[838, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1144, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[678, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1230, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[753, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[587, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[588, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[651, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1145, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1202, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[652, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1203, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[243, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[653, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1204, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[589, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1146, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[421, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1003, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[590, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1147, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[244, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[591, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[356, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[514, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[654, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[839, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1148, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[931, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1097, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1205, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[592, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1149, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[593, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1150, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[245, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[594, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[840, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[754, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[755, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[595, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1151, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[596, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1152, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[597, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[598, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1153, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[599, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[600, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1154, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[601, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[602, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1155, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[603, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[604, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1156, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[605, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[606, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1157, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[607, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1158, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[608, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[609, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1159, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[610, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[611, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1160, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[612, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[547, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[613, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[422, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1161, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1004, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[614, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1162, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[246, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[247, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[248, "polars.DataFrame.rows_by_key", false]], "rowserror": [[105, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[249, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[615, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[515, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1163, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1098, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[143, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[144, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1164, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[250, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[841, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1231, "polars.Series.struct.schema", false]], "schemaerror": [[108, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[616, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1165, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[423, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1005, "polars.Series.dt.second", false]], "select() (in module polars)": [[756, "polars.select", false]], "select() (polars.dataframe method)": [[251, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[842, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[252, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[843, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[253, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[548, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[844, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1166, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[516, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1099, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[517, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1100, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[254, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[617, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[845, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1167, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[518, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1101, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[519, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1102, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[255, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1168, "polars.Series.shape", false]], "shapeerror": [[110, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[256, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[618, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[357, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[520, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[846, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1169, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[932, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1103, "polars.Series.list.shift", false]], "show_graph() (polars.lazyframe method)": [[847, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[151, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[619, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1170, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[257, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1171, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[620, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1172, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[621, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1173, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[895, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[622, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1174, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[623, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1175, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[370, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[944, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[624, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1176, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[258, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[625, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[521, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[655, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[848, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1177, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1104, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1206, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[259, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[626, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[358, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[522, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[849, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1178, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[933, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1105, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[627, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[656, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1207, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[657, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1208, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[658, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1209, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[757, "polars.sql", false]], "sql() (polars.dataframe method)": [[260, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[850, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[758, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1289, "polars.SQLContext", false]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[628, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1179, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[895, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[371, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[659, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[945, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1210, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[759, "polars.std", false]], "std() (polars.dataframe method)": [[261, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[629, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[359, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[523, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[851, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1180, "polars.Series.std", false]], "std() (polars.series.arr method)": [[934, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1106, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[424, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1006, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[895, "polars.selectors.string", false]], "stringcache (class in polars)": [[46, "polars.StringCache", false]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[660, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1211, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[661, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1212, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[662, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1213, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[663, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1214, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[664, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1215, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[665, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1216, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[760, "polars.struct", false]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[317, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[680, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[562, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[563, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[761, "polars.sum", false]], "sum() (polars.dataframe method)": [[262, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[681, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[360, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[524, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[852, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[880, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1233, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[935, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1107, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[762, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[263, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1276, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[763, "polars.tail", false]], "tail() (polars.dataframe method)": [[264, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[682, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[525, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[666, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[853, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[881, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1234, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1108, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1217, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[683, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1235, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[684, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1236, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[895, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time", false]], "time() (in module polars)": [[764, "polars.time", false]], "time() (in module polars.selectors)": [[895, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[425, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1007, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[765, "polars.time_range", false]], "time_ranges() (in module polars)": [[766, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[426, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1008, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[526, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1109, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[265, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1237, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[667, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1218, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[668, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1219, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[669, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1220, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[266, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[267, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[268, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1238, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1239, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[269, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1240, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[670, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1221, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[270, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1241, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[361, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1242, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[936, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[950, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[564, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[671, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1222, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[271, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1243, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[272, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1244, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[685, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1245, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[273, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[427, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1009, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[274, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[362, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[527, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[937, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1110, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[672, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1223, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[673, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1224, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[275, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1246, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[565, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[674, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1225, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[276, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[686, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[854, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1247, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[687, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[428, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1010, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[429, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1011, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[430, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1012, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[431, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1013, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[432, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1014, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[433, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1015, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[434, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1016, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[277, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[549, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[688, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[435, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1017, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[550, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[278, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[689, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[363, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[528, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[855, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1248, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[938, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1111, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[690, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1249, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[279, "polars.DataFrame.unnest", false]], "unnest() (polars.lazyframe method)": [[856, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1232, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[280, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[857, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1277, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[895, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[281, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[282, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[858, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[691, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1250, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[283, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[951, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[692, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1251, "polars.Series.value_counts", false]], "var() (in module polars)": [[767, "polars.var", false]], "var() (polars.dataframe method)": [[284, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[693, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[364, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[529, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[859, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1252, "polars.Series.var", false]], "var() (polars.series.arr method)": [[939, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1112, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[285, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[436, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1018, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[437, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1019, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[768, "polars.when", false]], "where() (polars.expr method)": [[694, "polars.Expr.where", false]], "width (polars.dataframe property)": [[286, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[860, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[287, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[861, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[288, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[862, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[863, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[679, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[289, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[864, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[290, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[865, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[438, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1020, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[551, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[695, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[439, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1021, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[769, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[675, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1226, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1253, "polars.Series.zip_with", false]]}, "objects": {"polars": [[1289, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [696, 4, 1, "", "all"], [697, 4, 1, "", "all_horizontal"], [698, 4, 1, "", "any"], [699, 4, 1, "", "any_horizontal"], [700, 4, 1, "", "approx_n_unique"], [701, 4, 1, "", "arange"], [702, 4, 1, "", "arctan2"], [703, 4, 1, "", "arctan2d"], [704, 4, 1, "", "arg_sort_by"], [705, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [706, 4, 1, "", "business_day_count"], [707, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [708, 4, 1, "", "concat_list"], [709, 4, 1, "", "concat_str"], [710, 4, 1, "", "corr"], [711, 4, 1, "", "count"], [712, 4, 1, "", "cov"], [713, 4, 1, "", "cum_count"], [714, 4, 1, "", "cum_fold"], [715, 4, 1, "", "cum_reduce"], [716, 4, 1, "", "cum_sum"], [717, 4, 1, "", "cum_sum_horizontal"], [718, 4, 1, "", "date"], [719, 4, 1, "", "date_range"], [720, 4, 1, "", "date_ranges"], [721, 4, 1, "", "datetime"], [722, 4, 1, "", "datetime_range"], [723, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [724, 4, 1, "", "duration"], [725, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [726, 4, 1, "", "exclude"], [727, 4, 1, "", "first"], [728, 4, 1, "", "fold"], [729, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [730, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [731, 4, 1, "", "groups"], [732, 4, 1, "", "head"], [733, 4, 1, "", "implode"], [734, 4, 1, "", "int_range"], [735, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [736, 4, 1, "", "last"], [737, 4, 1, "", "len"], [738, 4, 1, "", "lit"], [739, 4, 1, "", "map_batches"], [740, 4, 1, "", "map_groups"], [741, 4, 1, "", "max"], [742, 4, 1, "", "max_horizontal"], [743, 4, 1, "", "mean"], [744, 4, 1, "", "mean_horizontal"], [745, 4, 1, "", "median"], [746, 4, 1, "", "min"], [747, 4, 1, "", "min_horizontal"], [748, 4, 1, "", "n_unique"], [749, 4, 1, "", "nth"], [750, 4, 1, "", "ones"], [893, 6, 0, "-", "plugins"], [751, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [752, 4, 1, "", "reduce"], [753, 4, 1, "", "repeat"], [754, 4, 1, "", "rolling_corr"], [755, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [756, 4, 1, "", "select"], [895, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [757, 4, 1, "", "sql"], [758, 4, 1, "", "sql_expr"], [759, 4, 1, "", "std"], [760, 4, 1, "", "struct"], [761, 4, 1, "", "sum"], [762, 4, 1, "", "sum_horizontal"], [763, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [764, 4, 1, "", "time"], [765, 4, 1, "", "time_range"], [766, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [767, 4, 1, "", "var"], [768, 4, 1, "", "when"], [769, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__array__"], [171, 0, 1, "", "__arrow_c_stream__"], [172, 0, 1, "", "__dataframe__"], [173, 0, 1, "", "__getitem__"], [174, 0, 1, "", "approx_n_unique"], [175, 0, 1, "", "bottom_k"], [176, 0, 1, "", "cast"], [177, 0, 1, "", "clear"], [178, 0, 1, "", "clone"], [179, 0, 1, "", "collect_schema"], [180, 1, 1, "", "columns"], [181, 0, 1, "", "corr"], [182, 0, 1, "", "count"], [183, 0, 1, "", "describe"], [184, 0, 1, "", "deserialize"], [185, 0, 1, "", "drop"], [186, 0, 1, "", "drop_in_place"], [187, 0, 1, "", "drop_nulls"], [188, 1, 1, "", "dtypes"], [189, 0, 1, "", "equals"], [190, 0, 1, "", "estimated_size"], [191, 0, 1, "", "explode"], [192, 0, 1, "", "extend"], [193, 0, 1, "", "fill_nan"], [194, 0, 1, "", "fill_null"], [195, 0, 1, "", "filter"], [196, 1, 1, "", "flags"], [197, 0, 1, "", "fold"], [198, 0, 1, "", "gather_every"], [199, 0, 1, "", "get_column"], [200, 0, 1, "", "get_column_index"], [201, 0, 1, "", "get_columns"], [202, 0, 1, "", "glimpse"], [203, 0, 1, "", "group_by"], [204, 0, 1, "", "group_by_dynamic"], [205, 0, 1, "", "hash_rows"], [206, 0, 1, "", "head"], [207, 1, 1, "", "height"], [208, 0, 1, "", "hstack"], [209, 0, 1, "", "insert_column"], [210, 0, 1, "", "interpolate"], [211, 0, 1, "", "is_duplicated"], [212, 0, 1, "", "is_empty"], [213, 0, 1, "", "is_unique"], [214, 0, 1, "", "item"], [215, 0, 1, "", "iter_columns"], [216, 0, 1, "", "iter_rows"], [217, 0, 1, "", "iter_slices"], [218, 0, 1, "", "join"], [219, 0, 1, "", "join_asof"], [220, 0, 1, "", "join_where"], [221, 0, 1, "", "lazy"], [222, 0, 1, "", "limit"], [223, 0, 1, "", "map_rows"], [224, 0, 1, "", "max"], [225, 0, 1, "", "max_horizontal"], [226, 0, 1, "", "mean"], [227, 0, 1, "", "mean_horizontal"], [228, 0, 1, "", "median"], [229, 0, 1, "", "melt"], [230, 0, 1, "", "merge_sorted"], [231, 0, 1, "", "min"], [232, 0, 1, "", "min_horizontal"], [233, 0, 1, "", "n_chunks"], [234, 0, 1, "", "n_unique"], [235, 0, 1, "", "null_count"], [236, 0, 1, "", "partition_by"], [237, 0, 1, "", "pipe"], [238, 0, 1, "", "pivot"], [316, 1, 1, "", "plot"], [239, 0, 1, "", "product"], [240, 0, 1, "", "quantile"], [241, 0, 1, "", "rechunk"], [242, 0, 1, "", "rename"], [243, 0, 1, "", "replace_column"], [244, 0, 1, "", "reverse"], [245, 0, 1, "", "rolling"], [246, 0, 1, "", "row"], [247, 0, 1, "", "rows"], [248, 0, 1, "", "rows_by_key"], [249, 0, 1, "", "sample"], [250, 1, 1, "", "schema"], [251, 0, 1, "", "select"], [252, 0, 1, "", "select_seq"], [253, 0, 1, "", "serialize"], [254, 0, 1, "", "set_sorted"], [255, 1, 1, "", "shape"], [256, 0, 1, "", "shift"], [257, 0, 1, "", "shrink_to_fit"], [258, 0, 1, "", "slice"], [259, 0, 1, "", "sort"], [260, 0, 1, "", "sql"], [261, 0, 1, "", "std"], [317, 1, 1, "", "style"], [262, 0, 1, "", "sum"], [263, 0, 1, "", "sum_horizontal"], [264, 0, 1, "", "tail"], [265, 0, 1, "", "to_arrow"], [266, 0, 1, "", "to_dict"], [267, 0, 1, "", "to_dicts"], [268, 0, 1, "", "to_dummies"], [269, 0, 1, "", "to_init_repr"], [270, 0, 1, "", "to_jax"], [271, 0, 1, "", "to_numpy"], [272, 0, 1, "", "to_pandas"], [273, 0, 1, "", "to_series"], [274, 0, 1, "", "to_struct"], [275, 0, 1, "", "to_torch"], [276, 0, 1, "", "top_k"], [277, 0, 1, "", "transpose"], [278, 0, 1, "", "unique"], [279, 0, 1, "", "unnest"], [280, 0, 1, "", "unpivot"], [281, 0, 1, "", "unstack"], [282, 0, 1, "", "update"], [283, 0, 1, "", "upsample"], [284, 0, 1, "", "var"], [285, 0, 1, "", "vstack"], [286, 1, 1, "", "width"], [287, 0, 1, "", "with_columns"], [288, 0, 1, "", "with_columns_seq"], [289, 0, 1, "", "with_row_count"], [290, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[321, 0, 1, "", "abs"], [322, 0, 1, "", "add"], [323, 0, 1, "", "agg_groups"], [324, 0, 1, "", "alias"], [325, 0, 1, "", "all"], [326, 0, 1, "", "and_"], [327, 0, 1, "", "any"], [328, 0, 1, "", "append"], [329, 0, 1, "", "approx_n_unique"], [330, 0, 1, "", "arccos"], [331, 0, 1, "", "arccosh"], [332, 0, 1, "", "arcsin"], [333, 0, 1, "", "arcsinh"], [334, 0, 1, "", "arctan"], [335, 0, 1, "", "arctanh"], [336, 0, 1, "", "arg_max"], [337, 0, 1, "", "arg_min"], [338, 0, 1, "", "arg_sort"], [339, 0, 1, "", "arg_true"], [340, 0, 1, "", "arg_unique"], [365, 0, 1, "", "backward_fill"], [372, 0, 1, "", "bottom_k"], [373, 0, 1, "", "bottom_k_by"], [374, 0, 1, "", "cast"], [376, 0, 1, "", "cbrt"], [377, 0, 1, "", "ceil"], [378, 0, 1, "", "clip"], [379, 0, 1, "", "cos"], [380, 0, 1, "", "cosh"], [381, 0, 1, "", "cot"], [382, 0, 1, "", "count"], [383, 0, 1, "", "cum_count"], [384, 0, 1, "", "cum_max"], [385, 0, 1, "", "cum_min"], [386, 0, 1, "", "cum_prod"], [387, 0, 1, "", "cum_sum"], [388, 0, 1, "", "cumulative_eval"], [389, 0, 1, "", "cut"], [390, 0, 1, "", "degrees"], [391, 0, 1, "", "deserialize"], [392, 0, 1, "", "diff"], [393, 0, 1, "", "dot"], [394, 0, 1, "", "drop_nans"], [395, 0, 1, "", "drop_nulls"], [440, 0, 1, "", "entropy"], [441, 0, 1, "", "eq"], [442, 0, 1, "", "eq_missing"], [443, 0, 1, "", "ewm_mean"], [444, 0, 1, "", "ewm_mean_by"], [445, 0, 1, "", "ewm_std"], [446, 0, 1, "", "ewm_var"], [447, 0, 1, "", "exclude"], [448, 0, 1, "", "exp"], [449, 0, 1, "", "explode"], [450, 0, 1, "", "extend_constant"], [451, 0, 1, "", "fill_nan"], [452, 0, 1, "", "fill_null"], [453, 0, 1, "", "filter"], [454, 0, 1, "", "first"], [455, 0, 1, "", "flatten"], [456, 0, 1, "", "floor"], [457, 0, 1, "", "floordiv"], [458, 0, 1, "", "forward_fill"], [459, 0, 1, "", "from_json"], [460, 0, 1, "", "gather"], [461, 0, 1, "", "gather_every"], [462, 0, 1, "", "ge"], [463, 0, 1, "", "get"], [464, 0, 1, "", "gt"], [465, 0, 1, "", "has_nulls"], [466, 0, 1, "", "hash"], [467, 0, 1, "", "head"], [468, 0, 1, "", "hist"], [469, 0, 1, "", "implode"], [470, 0, 1, "", "inspect"], [471, 0, 1, "", "interpolate"], [472, 0, 1, "", "interpolate_by"], [473, 0, 1, "", "is_between"], [474, 0, 1, "", "is_duplicated"], [475, 0, 1, "", "is_finite"], [476, 0, 1, "", "is_first_distinct"], [477, 0, 1, "", "is_in"], [478, 0, 1, "", "is_infinite"], [479, 0, 1, "", "is_last_distinct"], [480, 0, 1, "", "is_nan"], [481, 0, 1, "", "is_not_nan"], [482, 0, 1, "", "is_not_null"], [483, 0, 1, "", "is_null"], [484, 0, 1, "", "is_unique"], [485, 0, 1, "", "kurtosis"], [486, 0, 1, "", "last"], [487, 0, 1, "", "le"], [488, 0, 1, "", "len"], [489, 0, 1, "", "limit"], [530, 0, 1, "", "log"], [531, 0, 1, "", "log10"], [532, 0, 1, "", "log1p"], [533, 0, 1, "", "lower_bound"], [534, 0, 1, "", "lt"], [535, 0, 1, "", "map_batches"], [536, 0, 1, "", "map_elements"], [537, 0, 1, "", "max"], [538, 0, 1, "", "mean"], [539, 0, 1, "", "median"], [552, 0, 1, "", "min"], [553, 0, 1, "", "mod"], [554, 0, 1, "", "mode"], [555, 0, 1, "", "mul"], [556, 0, 1, "", "n_unique"], [566, 0, 1, "", "nan_max"], [567, 0, 1, "", "nan_min"], [568, 0, 1, "", "ne"], [569, 0, 1, "", "ne_missing"], [570, 0, 1, "", "neg"], [571, 0, 1, "", "not_"], [572, 0, 1, "", "null_count"], [573, 0, 1, "", "or_"], [574, 0, 1, "", "over"], [575, 0, 1, "", "pct_change"], [576, 0, 1, "", "peak_max"], [577, 0, 1, "", "peak_min"], [578, 0, 1, "", "pipe"], [579, 0, 1, "", "pow"], [580, 0, 1, "", "product"], [581, 0, 1, "", "qcut"], [582, 0, 1, "", "quantile"], [583, 0, 1, "", "radians"], [584, 0, 1, "", "rank"], [585, 0, 1, "", "rechunk"], [586, 0, 1, "", "reinterpret"], [587, 0, 1, "", "repeat_by"], [588, 0, 1, "", "replace"], [589, 0, 1, "", "replace_strict"], [590, 0, 1, "", "reshape"], [591, 0, 1, "", "reverse"], [592, 0, 1, "", "rle"], [593, 0, 1, "", "rle_id"], [594, 0, 1, "", "rolling"], [595, 0, 1, "", "rolling_map"], [596, 0, 1, "", "rolling_max"], [597, 0, 1, "", "rolling_max_by"], [598, 0, 1, "", "rolling_mean"], [599, 0, 1, "", "rolling_mean_by"], [600, 0, 1, "", "rolling_median"], [601, 0, 1, "", "rolling_median_by"], [602, 0, 1, "", "rolling_min"], [603, 0, 1, "", "rolling_min_by"], [604, 0, 1, "", "rolling_quantile"], [605, 0, 1, "", "rolling_quantile_by"], [606, 0, 1, "", "rolling_skew"], [607, 0, 1, "", "rolling_std"], [608, 0, 1, "", "rolling_std_by"], [609, 0, 1, "", "rolling_sum"], [610, 0, 1, "", "rolling_sum_by"], [611, 0, 1, "", "rolling_var"], [612, 0, 1, "", "rolling_var_by"], [613, 0, 1, "", "round"], [614, 0, 1, "", "round_sig_figs"], [615, 0, 1, "", "sample"], [616, 0, 1, "", "search_sorted"], [617, 0, 1, "", "set_sorted"], [618, 0, 1, "", "shift"], [619, 0, 1, "", "shrink_dtype"], [620, 0, 1, "", "shuffle"], [621, 0, 1, "", "sign"], [622, 0, 1, "", "sin"], [623, 0, 1, "", "sinh"], [624, 0, 1, "", "skew"], [625, 0, 1, "", "slice"], [626, 0, 1, "", "sort"], [627, 0, 1, "", "sort_by"], [628, 0, 1, "", "sqrt"], [629, 0, 1, "", "std"], [680, 0, 1, "", "sub"], [681, 0, 1, "", "sum"], [682, 0, 1, "", "tail"], [683, 0, 1, "", "tan"], [684, 0, 1, "", "tanh"], [685, 0, 1, "", "to_physical"], [686, 0, 1, "", "top_k"], [687, 0, 1, "", "top_k_by"], [688, 0, 1, "", "truediv"], [689, 0, 1, "", "unique"], [690, 0, 1, "", "unique_counts"], [691, 0, 1, "", "upper_bound"], [692, 0, 1, "", "value_counts"], [693, 0, 1, "", "var"], [694, 0, 1, "", "where"], [695, 0, 1, "", "xor"]], "polars.Expr.arr": [[341, 0, 1, "", "all"], [342, 0, 1, "", "any"], [343, 0, 1, "", "arg_max"], [344, 0, 1, "", "arg_min"], [345, 0, 1, "", "contains"], [346, 0, 1, "", "count_matches"], [347, 0, 1, "", "explode"], [348, 0, 1, "", "first"], [349, 0, 1, "", "get"], [350, 0, 1, "", "join"], [351, 0, 1, "", "last"], [352, 0, 1, "", "max"], [353, 0, 1, "", "median"], [354, 0, 1, "", "min"], [355, 0, 1, "", "n_unique"], [356, 0, 1, "", "reverse"], [357, 0, 1, "", "shift"], [358, 0, 1, "", "sort"], [359, 0, 1, "", "std"], [360, 0, 1, "", "sum"], [361, 0, 1, "", "to_list"], [362, 0, 1, "", "to_struct"], [363, 0, 1, "", "unique"], [364, 0, 1, "", "var"]], "polars.Expr.bin": [[366, 0, 1, "", "contains"], [367, 0, 1, "", "decode"], [368, 0, 1, "", "encode"], [369, 0, 1, "", "ends_with"], [370, 0, 1, "", "size"], [371, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[375, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[396, 0, 1, "", "add_business_days"], [397, 0, 1, "", "base_utc_offset"], [398, 0, 1, "", "cast_time_unit"], [399, 0, 1, "", "century"], [400, 0, 1, "", "combine"], [401, 0, 1, "", "convert_time_zone"], [402, 0, 1, "", "date"], [403, 0, 1, "", "datetime"], [404, 0, 1, "", "day"], [405, 0, 1, "", "dst_offset"], [406, 0, 1, "", "epoch"], [407, 0, 1, "", "hour"], [408, 0, 1, "", "is_leap_year"], [409, 0, 1, "", "iso_year"], [410, 0, 1, "", "microsecond"], [411, 0, 1, "", "millennium"], [412, 0, 1, "", "millisecond"], [413, 0, 1, "", "minute"], [414, 0, 1, "", "month"], [415, 0, 1, "", "month_end"], [416, 0, 1, "", "month_start"], [417, 0, 1, "", "nanosecond"], [418, 0, 1, "", "offset_by"], [419, 0, 1, "", "ordinal_day"], [420, 0, 1, "", "quarter"], [421, 0, 1, "", "replace_time_zone"], [422, 0, 1, "", "round"], [423, 0, 1, "", "second"], [424, 0, 1, "", "strftime"], [425, 0, 1, "", "time"], [426, 0, 1, "", "timestamp"], [427, 0, 1, "", "to_string"], [428, 0, 1, "", "total_days"], [429, 0, 1, "", "total_hours"], [430, 0, 1, "", "total_microseconds"], [431, 0, 1, "", "total_milliseconds"], [432, 0, 1, "", "total_minutes"], [433, 0, 1, "", "total_nanoseconds"], [434, 0, 1, "", "total_seconds"], [435, 0, 1, "", "truncate"], [436, 0, 1, "", "week"], [437, 0, 1, "", "weekday"], [438, 0, 1, "", "with_time_unit"], [439, 0, 1, "", "year"]], "polars.Expr.list": [[490, 0, 1, "", "all"], [491, 0, 1, "", "any"], [492, 0, 1, "", "arg_max"], [493, 0, 1, "", "arg_min"], [494, 0, 1, "", "concat"], [495, 0, 1, "", "contains"], [496, 0, 1, "", "count_matches"], [497, 0, 1, "", "diff"], [498, 0, 1, "", "drop_nulls"], [499, 0, 1, "", "eval"], [500, 0, 1, "", "explode"], [501, 0, 1, "", "first"], [502, 0, 1, "", "gather"], [503, 0, 1, "", "gather_every"], [504, 0, 1, "", "get"], [505, 0, 1, "", "head"], [506, 0, 1, "", "join"], [507, 0, 1, "", "last"], [508, 0, 1, "", "len"], [509, 0, 1, "", "max"], [510, 0, 1, "", "mean"], [511, 0, 1, "", "median"], [512, 0, 1, "", "min"], [513, 0, 1, "", "n_unique"], [514, 0, 1, "", "reverse"], [515, 0, 1, "", "sample"], [516, 0, 1, "", "set_difference"], [517, 0, 1, "", "set_intersection"], [518, 0, 1, "", "set_symmetric_difference"], [519, 0, 1, "", "set_union"], [520, 0, 1, "", "shift"], [521, 0, 1, "", "slice"], [522, 0, 1, "", "sort"], [523, 0, 1, "", "std"], [524, 0, 1, "", "sum"], [525, 0, 1, "", "tail"], [526, 0, 1, "", "to_array"], [527, 0, 1, "", "to_struct"], [528, 0, 1, "", "unique"], [529, 0, 1, "", "var"]], "polars.Expr.meta": [[540, 0, 1, "", "eq"], [541, 0, 1, "", "has_multiple_outputs"], [542, 0, 1, "", "is_column_selection"], [543, 0, 1, "", "is_regex_projection"], [544, 0, 1, "", "ne"], [545, 0, 1, "", "output_name"], [546, 0, 1, "", "pop"], [547, 0, 1, "", "root_names"], [548, 0, 1, "", "serialize"], [549, 0, 1, "", "tree_format"], [550, 0, 1, "", "undo_aliases"], [551, 0, 1, "", "write_json"]], "polars.Expr.name": [[557, 0, 1, "", "keep"], [558, 0, 1, "", "map"], [559, 0, 1, "", "map_fields"], [560, 0, 1, "", "prefix"], [561, 0, 1, "", "prefix_fields"], [562, 0, 1, "", "suffix"], [563, 0, 1, "", "suffix_fields"], [564, 0, 1, "", "to_lowercase"], [565, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[630, 0, 1, "", "concat"], [631, 0, 1, "", "contains"], [632, 0, 1, "", "contains_any"], [633, 0, 1, "", "count_matches"], [634, 0, 1, "", "decode"], [635, 0, 1, "", "encode"], [636, 0, 1, "", "ends_with"], [637, 0, 1, "", "explode"], [638, 0, 1, "", "extract"], [639, 0, 1, "", "extract_all"], [640, 0, 1, "", "extract_groups"], [641, 0, 1, "", "extract_many"], [642, 0, 1, "", "find"], [643, 0, 1, "", "head"], [644, 0, 1, "", "join"], [645, 0, 1, "", "json_decode"], [646, 0, 1, "", "json_path_match"], [647, 0, 1, "", "len_bytes"], [648, 0, 1, "", "len_chars"], [649, 0, 1, "", "pad_end"], [650, 0, 1, "", "pad_start"], [651, 0, 1, "", "replace"], [652, 0, 1, "", "replace_all"], [653, 0, 1, "", "replace_many"], [654, 0, 1, "", "reverse"], [655, 0, 1, "", "slice"], [656, 0, 1, "", "split"], [657, 0, 1, "", "split_exact"], [658, 0, 1, "", "splitn"], [659, 0, 1, "", "starts_with"], [660, 0, 1, "", "strip_chars"], [661, 0, 1, "", "strip_chars_end"], [662, 0, 1, "", "strip_chars_start"], [663, 0, 1, "", "strip_prefix"], [664, 0, 1, "", "strip_suffix"], [665, 0, 1, "", "strptime"], [666, 0, 1, "", "tail"], [667, 0, 1, "", "to_date"], [668, 0, 1, "", "to_datetime"], [669, 0, 1, "", "to_decimal"], [670, 0, 1, "", "to_integer"], [671, 0, 1, "", "to_lowercase"], [672, 0, 1, "", "to_time"], [673, 0, 1, "", "to_titlecase"], [674, 0, 1, "", "to_uppercase"], [675, 0, 1, "", "zfill"]], "polars.Expr.struct": [[676, 0, 1, "", "field"], [677, 0, 1, "", "json_encode"], [678, 0, 1, "", "rename_fields"], [679, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[793, 0, 1, "", "approx_n_unique"], [794, 0, 1, "", "bottom_k"], [795, 0, 1, "", "cache"], [796, 0, 1, "", "cast"], [797, 0, 1, "", "clear"], [798, 0, 1, "", "clone"], [799, 0, 1, "", "collect"], [800, 0, 1, "", "collect_async"], [801, 0, 1, "", "collect_schema"], [802, 1, 1, "", "columns"], [803, 0, 1, "", "count"], [804, 0, 1, "", "describe"], [805, 0, 1, "", "deserialize"], [806, 0, 1, "", "drop"], [807, 0, 1, "", "drop_nulls"], [808, 1, 1, "", "dtypes"], [809, 0, 1, "", "explain"], [810, 0, 1, "", "explode"], [811, 0, 1, "", "fill_nan"], [812, 0, 1, "", "fill_null"], [813, 0, 1, "", "filter"], [814, 0, 1, "", "first"], [815, 0, 1, "", "gather_every"], [816, 0, 1, "", "group_by"], [817, 0, 1, "", "group_by_dynamic"], [818, 0, 1, "", "head"], [819, 0, 1, "", "inspect"], [820, 0, 1, "", "interpolate"], [821, 0, 1, "", "join"], [822, 0, 1, "", "join_asof"], [823, 0, 1, "", "join_where"], [824, 0, 1, "", "last"], [825, 0, 1, "", "lazy"], [826, 0, 1, "", "limit"], [827, 0, 1, "", "map_batches"], [828, 0, 1, "", "max"], [829, 0, 1, "", "mean"], [830, 0, 1, "", "median"], [831, 0, 1, "", "melt"], [832, 0, 1, "", "merge_sorted"], [833, 0, 1, "", "min"], [834, 0, 1, "", "null_count"], [835, 0, 1, "", "pipe"], [836, 0, 1, "", "profile"], [837, 0, 1, "", "quantile"], [838, 0, 1, "", "rename"], [839, 0, 1, "", "reverse"], [840, 0, 1, "", "rolling"], [841, 1, 1, "", "schema"], [842, 0, 1, "", "select"], [843, 0, 1, "", "select_seq"], [844, 0, 1, "", "serialize"], [845, 0, 1, "", "set_sorted"], [846, 0, 1, "", "shift"], [847, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [848, 0, 1, "", "slice"], [849, 0, 1, "", "sort"], [850, 0, 1, "", "sql"], [851, 0, 1, "", "std"], [852, 0, 1, "", "sum"], [853, 0, 1, "", "tail"], [854, 0, 1, "", "top_k"], [855, 0, 1, "", "unique"], [856, 0, 1, "", "unnest"], [857, 0, 1, "", "unpivot"], [858, 0, 1, "", "update"], [859, 0, 1, "", "var"], [860, 1, 1, "", "width"], [861, 0, 1, "", "with_columns"], [862, 0, 1, "", "with_columns_seq"], [863, 0, 1, "", "with_context"], [864, 0, 1, "", "with_row_count"], [865, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1289, 0, 1, "", "__enter__"], [1289, 0, 1, "", "__exit__"], [1289, 0, 1, "", "__init__"], [1271, 0, 1, "", "execute"], [1272, 0, 1, "", "execute_global"], [1273, 0, 1, "", "register"], [1274, 0, 1, "", "register_globals"], [1275, 0, 1, "", "register_many"], [1276, 0, 1, "", "tables"], [1277, 0, 1, "", "unregister"]], "polars.Series": [[897, 0, 1, "", "__array__"], [898, 0, 1, "", "__arrow_c_stream__"], [899, 0, 1, "", "__getitem__"], [900, 0, 1, "", "abs"], [901, 0, 1, "", "alias"], [902, 0, 1, "", "all"], [903, 0, 1, "", "any"], [904, 0, 1, "", "append"], [905, 0, 1, "", "arccos"], [906, 0, 1, "", "arccosh"], [907, 0, 1, "", "arcsin"], [908, 0, 1, "", "arcsinh"], [909, 0, 1, "", "arctan"], [910, 0, 1, "", "arctanh"], [911, 0, 1, "", "arg_max"], [912, 0, 1, "", "arg_min"], [913, 0, 1, "", "arg_sort"], [914, 0, 1, "", "arg_true"], [915, 0, 1, "", "arg_unique"], [946, 0, 1, "", "bottom_k"], [947, 0, 1, "", "cast"], [952, 0, 1, "", "cbrt"], [953, 0, 1, "", "ceil"], [954, 0, 1, "", "chunk_lengths"], [955, 0, 1, "", "clear"], [956, 0, 1, "", "clip"], [957, 0, 1, "", "clone"], [958, 0, 1, "", "cos"], [959, 0, 1, "", "cosh"], [960, 0, 1, "", "cot"], [961, 0, 1, "", "count"], [962, 0, 1, "", "cum_count"], [963, 0, 1, "", "cum_max"], [964, 0, 1, "", "cum_min"], [965, 0, 1, "", "cum_prod"], [966, 0, 1, "", "cum_sum"], [967, 0, 1, "", "cumulative_eval"], [968, 0, 1, "", "cut"], [969, 0, 1, "", "describe"], [970, 0, 1, "", "diff"], [971, 0, 1, "", "dot"], [972, 0, 1, "", "drop_nans"], [973, 0, 1, "", "drop_nulls"], [1022, 1, 1, "", "dtype"], [1023, 0, 1, "", "entropy"], [1024, 0, 1, "", "eq"], [1025, 0, 1, "", "eq_missing"], [1026, 0, 1, "", "equals"], [1027, 0, 1, "", "estimated_size"], [1028, 0, 1, "", "ewm_mean"], [1029, 0, 1, "", "ewm_mean_by"], [1030, 0, 1, "", "ewm_std"], [1031, 0, 1, "", "ewm_var"], [1032, 0, 1, "", "exp"], [1033, 0, 1, "", "explode"], [1034, 0, 1, "", "extend"], [1035, 0, 1, "", "extend_constant"], [1036, 0, 1, "", "fill_nan"], [1037, 0, 1, "", "fill_null"], [1038, 0, 1, "", "filter"], [1039, 1, 1, "", "flags"], [1040, 0, 1, "", "floor"], [1041, 0, 1, "", "gather"], [1042, 0, 1, "", "gather_every"], [1043, 0, 1, "", "ge"], [1044, 0, 1, "", "get_chunks"], [1045, 0, 1, "", "gt"], [1046, 0, 1, "", "has_nulls"], [1047, 0, 1, "", "has_validity"], [1048, 0, 1, "", "hash"], [1049, 0, 1, "", "head"], [1050, 0, 1, "", "hist"], [1051, 0, 1, "", "implode"], [1052, 0, 1, "", "interpolate"], [1053, 0, 1, "", "interpolate_by"], [1054, 0, 1, "", "is_between"], [1055, 0, 1, "", "is_duplicated"], [1056, 0, 1, "", "is_empty"], [1057, 0, 1, "", "is_finite"], [1058, 0, 1, "", "is_first_distinct"], [1059, 0, 1, "", "is_in"], [1060, 0, 1, "", "is_infinite"], [1061, 0, 1, "", "is_last_distinct"], [1062, 0, 1, "", "is_nan"], [1063, 0, 1, "", "is_not_nan"], [1064, 0, 1, "", "is_not_null"], [1065, 0, 1, "", "is_null"], [1066, 0, 1, "", "is_sorted"], [1067, 0, 1, "", "is_unique"], [1068, 0, 1, "", "item"], [1069, 0, 1, "", "kurtosis"], [1070, 0, 1, "", "le"], [1071, 0, 1, "", "len"], [1072, 0, 1, "", "limit"], [1113, 0, 1, "", "log"], [1114, 0, 1, "", "log10"], [1115, 0, 1, "", "log1p"], [1116, 0, 1, "", "lower_bound"], [1117, 0, 1, "", "lt"], [1118, 0, 1, "", "map_elements"], [1119, 0, 1, "", "max"], [1120, 0, 1, "", "mean"], [1121, 0, 1, "", "median"], [1122, 0, 1, "", "min"], [1123, 0, 1, "", "mode"], [1124, 0, 1, "", "n_chunks"], [1125, 0, 1, "", "n_unique"], [1126, 1, 1, "", "name"], [1127, 0, 1, "", "nan_max"], [1128, 0, 1, "", "nan_min"], [1129, 0, 1, "", "ne"], [1130, 0, 1, "", "ne_missing"], [1131, 0, 1, "", "new_from_index"], [1132, 0, 1, "", "not_"], [1133, 0, 1, "", "null_count"], [1134, 0, 1, "", "pct_change"], [1135, 0, 1, "", "peak_max"], [1136, 0, 1, "", "peak_min"], [1267, 1, 1, "", "plot"], [1137, 0, 1, "", "pow"], [1138, 0, 1, "", "product"], [1139, 0, 1, "", "qcut"], [1140, 0, 1, "", "quantile"], [1141, 0, 1, "", "rank"], [1142, 0, 1, "", "rechunk"], [1143, 0, 1, "", "reinterpret"], [1144, 0, 1, "", "rename"], [1145, 0, 1, "", "replace"], [1146, 0, 1, "", "replace_strict"], [1147, 0, 1, "", "reshape"], [1148, 0, 1, "", "reverse"], [1149, 0, 1, "", "rle"], [1150, 0, 1, "", "rle_id"], [1151, 0, 1, "", "rolling_map"], [1152, 0, 1, "", "rolling_max"], [1153, 0, 1, "", "rolling_mean"], [1154, 0, 1, "", "rolling_median"], [1155, 0, 1, "", "rolling_min"], [1156, 0, 1, "", "rolling_quantile"], [1157, 0, 1, "", "rolling_skew"], [1158, 0, 1, "", "rolling_std"], [1159, 0, 1, "", "rolling_sum"], [1160, 0, 1, "", "rolling_var"], [1161, 0, 1, "", "round"], [1162, 0, 1, "", "round_sig_figs"], [1163, 0, 1, "", "sample"], [1164, 0, 1, "", "scatter"], [1165, 0, 1, "", "search_sorted"], [1166, 0, 1, "", "set"], [1167, 0, 1, "", "set_sorted"], [1168, 1, 1, "", "shape"], [1169, 0, 1, "", "shift"], [1170, 0, 1, "", "shrink_dtype"], [1171, 0, 1, "", "shrink_to_fit"], [1172, 0, 1, "", "shuffle"], [1173, 0, 1, "", "sign"], [1174, 0, 1, "", "sin"], [1175, 0, 1, "", "sinh"], [1176, 0, 1, "", "skew"], [1177, 0, 1, "", "slice"], [1178, 0, 1, "", "sort"], [1179, 0, 1, "", "sqrt"], [1180, 0, 1, "", "std"], [1233, 0, 1, "", "sum"], [1234, 0, 1, "", "tail"], [1235, 0, 1, "", "tan"], [1236, 0, 1, "", "tanh"], [1237, 0, 1, "", "to_arrow"], [1238, 0, 1, "", "to_dummies"], [1239, 0, 1, "", "to_frame"], [1240, 0, 1, "", "to_init_repr"], [1241, 0, 1, "", "to_jax"], [1242, 0, 1, "", "to_list"], [1243, 0, 1, "", "to_numpy"], [1244, 0, 1, "", "to_pandas"], [1245, 0, 1, "", "to_physical"], [1246, 0, 1, "", "to_torch"], [1247, 0, 1, "", "top_k"], [1248, 0, 1, "", "unique"], [1249, 0, 1, "", "unique_counts"], [1250, 0, 1, "", "upper_bound"], [1251, 0, 1, "", "value_counts"], [1252, 0, 1, "", "var"], [1253, 0, 1, "", "zip_with"]], "polars.Series.arr": [[916, 0, 1, "", "all"], [917, 0, 1, "", "any"], [918, 0, 1, "", "arg_max"], [919, 0, 1, "", "arg_min"], [920, 0, 1, "", "contains"], [921, 0, 1, "", "count_matches"], [922, 0, 1, "", "explode"], [923, 0, 1, "", "first"], [924, 0, 1, "", "get"], [925, 0, 1, "", "join"], [926, 0, 1, "", "last"], [927, 0, 1, "", "max"], [928, 0, 1, "", "median"], [929, 0, 1, "", "min"], [930, 0, 1, "", "n_unique"], [931, 0, 1, "", "reverse"], [932, 0, 1, "", "shift"], [933, 0, 1, "", "sort"], [934, 0, 1, "", "std"], [935, 0, 1, "", "sum"], [936, 0, 1, "", "to_list"], [937, 0, 1, "", "to_struct"], [938, 0, 1, "", "unique"], [939, 0, 1, "", "var"]], "polars.Series.bin": [[940, 0, 1, "", "contains"], [941, 0, 1, "", "decode"], [942, 0, 1, "", "encode"], [943, 0, 1, "", "ends_with"], [944, 0, 1, "", "size"], [945, 0, 1, "", "starts_with"]], "polars.Series.cat": [[948, 0, 1, "", "get_categories"], [949, 0, 1, "", "is_local"], [950, 0, 1, "", "to_local"], [951, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[974, 0, 1, "", "add_business_days"], [975, 0, 1, "", "base_utc_offset"], [976, 0, 1, "", "cast_time_unit"], [977, 0, 1, "", "century"], [978, 0, 1, "", "combine"], [979, 0, 1, "", "convert_time_zone"], [980, 0, 1, "", "date"], [981, 0, 1, "", "datetime"], [982, 0, 1, "", "day"], [983, 0, 1, "", "dst_offset"], [984, 0, 1, "", "epoch"], [985, 0, 1, "", "hour"], [986, 0, 1, "", "is_leap_year"], [987, 0, 1, "", "iso_year"], [988, 0, 1, "", "max"], [989, 0, 1, "", "mean"], [990, 0, 1, "", "median"], [991, 0, 1, "", "microsecond"], [992, 0, 1, "", "millennium"], [993, 0, 1, "", "millisecond"], [994, 0, 1, "", "min"], [995, 0, 1, "", "minute"], [996, 0, 1, "", "month"], [997, 0, 1, "", "month_end"], [998, 0, 1, "", "month_start"], [999, 0, 1, "", "nanosecond"], [1000, 0, 1, "", "offset_by"], [1001, 0, 1, "", "ordinal_day"], [1002, 0, 1, "", "quarter"], [1003, 0, 1, "", "replace_time_zone"], [1004, 0, 1, "", "round"], [1005, 0, 1, "", "second"], [1006, 0, 1, "", "strftime"], [1007, 0, 1, "", "time"], [1008, 0, 1, "", "timestamp"], [1009, 0, 1, "", "to_string"], [1010, 0, 1, "", "total_days"], [1011, 0, 1, "", "total_hours"], [1012, 0, 1, "", "total_microseconds"], [1013, 0, 1, "", "total_milliseconds"], [1014, 0, 1, "", "total_minutes"], [1015, 0, 1, "", "total_nanoseconds"], [1016, 0, 1, "", "total_seconds"], [1017, 0, 1, "", "truncate"], [1018, 0, 1, "", "week"], [1019, 0, 1, "", "weekday"], [1020, 0, 1, "", "with_time_unit"], [1021, 0, 1, "", "year"]], "polars.Series.list": [[1073, 0, 1, "", "all"], [1074, 0, 1, "", "any"], [1075, 0, 1, "", "arg_max"], [1076, 0, 1, "", "arg_min"], [1077, 0, 1, "", "concat"], [1078, 0, 1, "", "contains"], [1079, 0, 1, "", "count_matches"], [1080, 0, 1, "", "diff"], [1081, 0, 1, "", "drop_nulls"], [1082, 0, 1, "", "eval"], [1083, 0, 1, "", "explode"], [1084, 0, 1, "", "first"], [1085, 0, 1, "", "gather"], [1086, 0, 1, "", "gather_every"], [1087, 0, 1, "", "get"], [1088, 0, 1, "", "head"], [1089, 0, 1, "", "join"], [1090, 0, 1, "", "last"], [1091, 0, 1, "", "len"], [1092, 0, 1, "", "max"], [1093, 0, 1, "", "mean"], [1094, 0, 1, "", "median"], [1095, 0, 1, "", "min"], [1096, 0, 1, "", "n_unique"], [1097, 0, 1, "", "reverse"], [1098, 0, 1, "", "sample"], [1099, 0, 1, "", "set_difference"], [1100, 0, 1, "", "set_intersection"], [1101, 0, 1, "", "set_symmetric_difference"], [1102, 0, 1, "", "set_union"], [1103, 0, 1, "", "shift"], [1104, 0, 1, "", "slice"], [1105, 0, 1, "", "sort"], [1106, 0, 1, "", "std"], [1107, 0, 1, "", "sum"], [1108, 0, 1, "", "tail"], [1109, 0, 1, "", "to_array"], [1110, 0, 1, "", "to_struct"], [1111, 0, 1, "", "unique"], [1112, 0, 1, "", "var"]], "polars.Series.str": [[1181, 0, 1, "", "concat"], [1182, 0, 1, "", "contains"], [1183, 0, 1, "", "contains_any"], [1184, 0, 1, "", "count_matches"], [1185, 0, 1, "", "decode"], [1186, 0, 1, "", "encode"], [1187, 0, 1, "", "ends_with"], [1188, 0, 1, "", "explode"], [1189, 0, 1, "", "extract"], [1190, 0, 1, "", "extract_all"], [1191, 0, 1, "", "extract_groups"], [1192, 0, 1, "", "extract_many"], [1193, 0, 1, "", "find"], [1194, 0, 1, "", "head"], [1195, 0, 1, "", "join"], [1196, 0, 1, "", "json_decode"], [1197, 0, 1, "", "json_path_match"], [1198, 0, 1, "", "len_bytes"], [1199, 0, 1, "", "len_chars"], [1200, 0, 1, "", "pad_end"], [1201, 0, 1, "", "pad_start"], [1202, 0, 1, "", "replace"], [1203, 0, 1, "", "replace_all"], [1204, 0, 1, "", "replace_many"], [1205, 0, 1, "", "reverse"], [1206, 0, 1, "", "slice"], [1207, 0, 1, "", "split"], [1208, 0, 1, "", "split_exact"], [1209, 0, 1, "", "splitn"], [1210, 0, 1, "", "starts_with"], [1211, 0, 1, "", "strip_chars"], [1212, 0, 1, "", "strip_chars_end"], [1213, 0, 1, "", "strip_chars_start"], [1214, 0, 1, "", "strip_prefix"], [1215, 0, 1, "", "strip_suffix"], [1216, 0, 1, "", "strptime"], [1217, 0, 1, "", "tail"], [1218, 0, 1, "", "to_date"], [1219, 0, 1, "", "to_datetime"], [1220, 0, 1, "", "to_decimal"], [1221, 0, 1, "", "to_integer"], [1222, 0, 1, "", "to_lowercase"], [1223, 0, 1, "", "to_time"], [1224, 0, 1, "", "to_titlecase"], [1225, 0, 1, "", "to_uppercase"], [1226, 0, 1, "", "zfill"]], "polars.Series.struct": [[1227, 0, 1, "", "field"], [1228, 3, 1, "", "fields"], [1229, 0, 1, "", "json_encode"], [1230, 0, 1, "", "rename_fields"], [1231, 3, 1, "", "schema"], [1232, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[291, 0, 1, "", "__iter__"], [292, 0, 1, "", "agg"], [293, 0, 1, "", "all"], [294, 0, 1, "", "count"], [295, 0, 1, "", "first"], [296, 0, 1, "", "head"], [297, 0, 1, "", "last"], [298, 0, 1, "", "len"], [299, 0, 1, "", "map_groups"], [300, 0, 1, "", "max"], [301, 0, 1, "", "mean"], [302, 0, 1, "", "median"], [303, 0, 1, "", "min"], [304, 0, 1, "", "n_unique"], [305, 0, 1, "", "quantile"], [306, 0, 1, "", "sum"], [307, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[866, 0, 1, "", "agg"], [867, 0, 1, "", "all"], [868, 0, 1, "", "count"], [869, 0, 1, "", "first"], [870, 0, 1, "", "head"], [871, 0, 1, "", "last"], [872, 0, 1, "", "len"], [873, 0, 1, "", "map_groups"], [874, 0, 1, "", "max"], [875, 0, 1, "", "mean"], [876, 0, 1, "", "median"], [877, 0, 1, "", "min"], [878, 0, 1, "", "n_unique"], [879, 0, 1, "", "quantile"], [880, 0, 1, "", "sum"], [881, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[882, 0, 1, "", "cancel"], [883, 0, 1, "", "fetch"], [884, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[893, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[895, 4, 1, "", "all"], [895, 4, 1, "", "alpha"], [895, 4, 1, "", "alphanumeric"], [895, 4, 1, "", "binary"], [895, 4, 1, "", "boolean"], [895, 4, 1, "", "by_dtype"], [895, 4, 1, "", "by_index"], [895, 4, 1, "", "by_name"], [895, 4, 1, "", "categorical"], [895, 4, 1, "", "contains"], [895, 4, 1, "", "date"], [895, 4, 1, "", "datetime"], [895, 4, 1, "", "decimal"], [895, 4, 1, "", "digit"], [895, 4, 1, "", "duration"], [895, 4, 1, "", "ends_with"], [895, 4, 1, "", "exclude"], [895, 4, 1, "", "expand_selector"], [895, 4, 1, "", "first"], [895, 4, 1, "", "float"], [895, 4, 1, "", "integer"], [895, 4, 1, "", "is_selector"], [895, 4, 1, "", "last"], [895, 4, 1, "", "matches"], [895, 4, 1, "", "numeric"], [895, 4, 1, "", "signed_integer"], [895, 4, 1, "", "starts_with"], [895, 4, 1, "", "string"], [895, 4, 1, "", "temporal"], [895, 4, 1, "", "time"], [895, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 163, 175, 176, 187, 190, 195, 198, 203, 204, 209, 215, 218, 219, 229, 236, 238, 243, 245, 248, 251, 252, 259, 268, 271, 276, 278, 279, 280, 281, 282, 287, 288, 313, 350, 373, 374, 401, 406, 424, 427, 447, 453, 457, 485, 506, 535, 536, 546, 554, 559, 566, 567, 574, 575, 586, 593, 627, 631, 638, 639, 640, 642, 643, 651, 652, 655, 656, 658, 665, 666, 667, 668, 672, 676, 678, 679, 687, 696, 697, 698, 699, 704, 710, 713, 716, 717, 726, 727, 729, 730, 736, 739, 740, 741, 742, 744, 746, 747, 749, 756, 758, 760, 761, 762, 768, 774, 778, 794, 796, 807, 816, 817, 822, 831, 842, 843, 849, 854, 855, 856, 857, 858, 861, 862, 873, 889, 894, 895, 899, 900, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 982, 983, 984, 986, 988, 989, 990, 992, 993, 994, 997, 998, 1001, 1004, 1005, 1006, 1009, 1017, 1019, 1020, 1021, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1262, 1267, 1271, 1275, 1278, 1284, 1285], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 193, 194, 195, 197, 198, 201, 202, 203, 204, 205, 209, 210, 214, 216, 217, 218, 221, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 238, 239, 240, 243, 245, 247, 248, 249, 250, 251, 258, 259, 260, 261, 263, 268, 269, 270, 271, 272, 273, 275, 277, 281, 283, 284, 287, 289, 290, 292, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 313, 316, 317, 321, 323, 324, 326, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 346, 349, 359, 362, 364, 370, 374, 376, 377, 379, 380, 381, 388, 389, 390, 394, 395, 396, 402, 403, 407, 410, 412, 413, 417, 423, 425, 430, 431, 433, 434, 438, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 456, 457, 459, 461, 462, 464, 466, 468, 471, 472, 475, 478, 480, 481, 482, 483, 485, 487, 492, 493, 496, 499, 502, 503, 504, 510, 511, 523, 527, 529, 530, 531, 532, 534, 535, 537, 538, 539, 542, 546, 551, 552, 553, 555, 557, 566, 567, 568, 569, 570, 572, 573, 575, 578, 579, 581, 582, 583, 584, 588, 589, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 621, 622, 623, 624, 628, 629, 630, 633, 637, 638, 639, 642, 679, 680, 681, 683, 684, 685, 688, 693, 694, 696, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 714, 721, 725, 728, 734, 735, 737, 740, 743, 744, 745, 749, 751, 752, 757, 764, 765, 766, 767, 768, 769, 774, 778, 793, 796, 797, 798, 801, 803, 804, 806, 808, 809, 811, 812, 813, 815, 816, 817, 820, 821, 825, 827, 830, 831, 834, 836, 837, 841, 842, 847, 849, 850, 851, 859, 861, 863, 864, 865, 866, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 889, 895, 899, 905, 906, 907, 908, 909, 910, 911, 913, 915, 918, 924, 934, 937, 939, 944, 947, 950, 952, 953, 955, 958, 959, 960, 967, 968, 969, 971, 972, 973, 974, 981, 985, 989, 990, 991, 993, 995, 999, 1005, 1012, 1013, 1015, 1016, 1020, 1023, 1028, 1029, 1030, 1031, 1036, 1040, 1042, 1047, 1048, 1050, 1052, 1053, 1057, 1060, 1062, 1063, 1064, 1065, 1068, 1069, 1075, 1076, 1079, 1082, 1085, 1086, 1087, 1093, 1094, 1106, 1110, 1112, 1113, 1114, 1115, 1116, 1120, 1121, 1127, 1128, 1134, 1137, 1139, 1140, 1141, 1145, 1146, 1150, 1151, 1153, 1154, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1165, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1188, 1189, 1190, 1193, 1197, 1235, 1236, 1238, 1241, 1243, 1244, 1245, 1246, 1250, 1252, 1262, 1267, 1271, 1277, 1279, 1280, 1283, 1284, 1286, 1287, 1289, 1291, 1292], "00": [27, 36, 62, 176, 183, 204, 283, 313, 397, 398, 401, 405, 415, 416, 418, 421, 422, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 597, 599, 601, 603, 605, 608, 610, 612, 665, 668, 672, 721, 722, 723, 724, 764, 765, 766, 778, 796, 804, 817, 889, 895, 975, 976, 979, 980, 981, 983, 984, 985, 990, 991, 995, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1216, 1219, 1223, 1284], "000": [9, 10, 27, 36, 313, 1292], "0000": [275, 313, 1246, 1262, 1292], "000000": [367, 368, 634, 941, 942, 1185], "00000001": [11, 695, 778], "00000010": [695, 778], "00000011": [695, 778], "00000100": [695, 778], "00001000": [695, 778], "00001010": [695, 778], "00001011": [695, 778], "0000e": 11, "0000ff": [367, 368, 634, 941, 942, 1185], "0005": 895, "00050": 895, "001": [49, 675, 724, 1012, 1013, 1015, 1226], "002": [724, 1012, 1013, 1015], "005": [1023, 1262], "00prefix": 895, "00z": [665, 668, 1216, 1219], "01": [28, 47, 61, 62, 159, 176, 183, 202, 204, 219, 245, 283, 313, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 665, 667, 668, 672, 706, 718, 719, 720, 721, 722, 723, 724, 778, 796, 804, 817, 822, 840, 889, 895, 974, 976, 978, 979, 980, 981, 984, 985, 990, 991, 995, 997, 998, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1216, 1218, 1219, 1223, 1284, 1287], "010": [9, 670, 1221], "01000": 28, "01000010": [695, 778], "01000110": [695, 778], "012": [614, 778, 1162, 1262], "0123": [675, 1226], "01234": [614, 778, 1162, 1262], "015625": [1137, 1262], "02": [47, 176, 183, 202, 204, 245, 283, 313, 396, 398, 400, 406, 415, 416, 418, 421, 426, 429, 432, 434, 438, 594, 597, 599, 601, 603, 605, 608, 610, 612, 613, 665, 667, 668, 672, 706, 718, 719, 720, 721, 722, 723, 724, 778, 796, 804, 817, 840, 889, 895, 937, 976, 978, 980, 981, 984, 985, 990, 991, 995, 997, 998, 999, 1003, 1004, 1007, 1008, 1011, 1014, 1016, 1017, 1110, 1216, 1218, 1219, 1223, 1284, 1285], "03": [47, 123, 129, 176, 204, 219, 245, 283, 313, 398, 400, 401, 406, 415, 416, 418, 421, 422, 424, 426, 427, 428, 429, 432, 434, 435, 438, 444, 457, 594, 597, 599, 601, 603, 605, 608, 610, 612, 667, 672, 718, 719, 720, 721, 722, 723, 724, 778, 796, 817, 822, 840, 889, 895, 976, 978, 979, 984, 985, 990, 991, 997, 998, 999, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1014, 1016, 1218, 1223], "037037": [1137, 1262], "04": [149, 176, 183, 204, 283, 313, 400, 401, 415, 416, 421, 422, 424, 427, 428, 429, 432, 434, 438, 597, 599, 601, 603, 605, 608, 610, 612, 665, 706, 718, 721, 722, 724, 778, 796, 804, 817, 889, 895, 979, 991, 995, 997, 998, 999, 1003, 1006, 1009, 1010, 1011, 1014, 1016, 1020, 1216, 1284], "047198": 1286, "05": [16, 149, 152, 153, 154, 155, 159, 176, 183, 283, 313, 396, 399, 400, 401, 402, 403, 407, 410, 411, 412, 413, 415, 416, 417, 421, 423, 424, 425, 427, 428, 706, 718, 719, 721, 722, 796, 804, 889, 895, 978, 979, 980, 981, 1003, 1004, 1006, 1007, 1009, 1010, 1017, 1284, 1285, 1287], "050545": 123, "0522623626787952": [1069, 1262], "0545": [980, 981, 1007], "06": [159, 176, 283, 313, 396, 400, 414, 420, 421, 422, 423, 435, 436, 718, 721, 796, 889, 895, 974, 1003, 1004, 1017], "060": [402, 403, 407, 410, 412, 413, 417, 423, 425], "0601749420166": [190, 313], "06293300616044681": [1023, 1262], "07": [16, 129, 159, 183, 313, 396, 399, 400, 411, 421, 422, 435, 665, 718, 719, 721, 722, 730, 804, 889, 895, 974, 978, 1003, 1216, 1284, 1287], "071068": [183, 313, 804, 889], "08": [129, 152, 153, 154, 155, 183, 219, 245, 260, 313, 396, 400, 415, 416, 422, 594, 665, 722, 724, 778, 804, 822, 840, 889, 895, 974, 1004, 1017, 1216, 1284, 1285], "085537": [1032, 1262], "09": [47, 129, 183, 245, 313, 396, 400, 415, 416, 594, 669, 718, 719, 721, 766, 778, 804, 840, 889, 895, 974, 1220], "090909": [575, 778], "094395": 1286, "098612": [532, 778, 1113, 1115, 1262, 1283], "0999": [399, 411], "0_": [36, 313], "0m": [405, 983], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 651, 652, 653, 657, 658, 659, 660, 661, 662, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 774, 778, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 895, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 944, 946, 947, 950, 952, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1202, 1203, 1204, 1208, 1209, 1226, 1227, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1267, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292], "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 132, 143, 151, 178, 183, 192, 201, 202, 204, 206, 208, 209, 210, 215, 219, 222, 233, 237, 239, 243, 245, 251, 260, 264, 287, 292, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 324, 328, 336, 337, 338, 340, 378, 384, 387, 392, 396, 397, 399, 400, 402, 403, 405, 407, 410, 411, 412, 413, 415, 416, 417, 421, 422, 423, 425, 435, 438, 444, 465, 466, 467, 471, 477, 489, 497, 503, 505, 511, 521, 523, 525, 529, 531, 545, 547, 557, 572, 575, 578, 588, 589, 594, 625, 670, 679, 682, 695, 706, 707, 714, 719, 721, 722, 725, 728, 730, 732, 738, 739, 763, 766, 778, 799, 800, 804, 817, 818, 820, 822, 826, 835, 836, 840, 842, 852, 853, 861, 866, 869, 871, 874, 875, 876, 877, 878, 879, 880, 889, 895, 956, 970, 974, 975, 977, 978, 983, 992, 1003, 1017, 1020, 1023, 1029, 1049, 1059, 1072, 1080, 1088, 1094, 1104, 1106, 1108, 1112, 1114, 1118, 1134, 1146, 1164, 1166, 1221, 1234, 1241, 1243, 1246, 1262, 1271, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1287, 1292], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 220, 238, 256, 313, 588, 589, 618, 632, 641, 645, 653, 669, 723, 778, 823, 846, 889, 895, 1025, 1114, 1130, 1145, 1146, 1152, 1153, 1155, 1169, 1183, 1196, 1204, 1220, 1262, 1281, 1292], "1000": [131, 190, 269, 290, 313, 329, 778, 865, 889, 1012, 1114, 1240, 1262, 1292], "10000": [129, 217, 313], "100000": [10, 27], "1000000": [11, 1015], "1001": [290, 313, 865, 889], "1002": [290, 313, 865, 889], "10047419486152048166": [205, 313], "1005": [329, 778], "100_000": [827, 889], "101": [9, 27, 220, 313, 400, 670, 823, 889, 895, 1221, 1292], "101000": 400, "10101": [27, 1287], "1010101": 9, "101514": [183, 313, 804, 889], "102": [220, 313, 823, 889], "1024": [33, 41, 42, 45, 129, 130, 131, 139, 147, 313, 370, 889, 944], "1040361802642726": [1069, 1262], "107149": 1286, "10734580197236529959": [1048, 1262], "1073741824": [619, 778], "10783150408545073287": [205, 313], "107_930_000": 1271, "10_000": [36, 313], "10i": [204, 313, 817, 889], "10m": [422, 435, 1004, 1017], "11": [10, 16, 41, 45, 151, 159, 174, 183, 219, 245, 313, 324, 415, 416, 418, 422, 435, 459, 471, 503, 551, 575, 584, 594, 595, 609, 625, 695, 761, 766, 774, 778, 793, 799, 800, 804, 818, 822, 826, 836, 840, 853, 889, 895, 1000, 1004, 1017, 1118, 1151, 1262, 1280], "110": [653, 670, 1221], "1101441246220388612": [466, 778], "111": [10, 1281], "11111": 1005, "111110": 1005, "11111001": [695, 778], "11111010": [695, 778], "11111111": 10, "112": [619, 778, 1292], "11330": 158, "1152921504606846976": [1143, 1262], "116": 158, "11638928888656214026": [466, 778], "118034": [851, 889], "11aa": 1284, "11aabb": 1284, "11h": [397, 975], "12": [26, 36, 47, 123, 129, 151, 159, 183, 204, 215, 219, 220, 245, 260, 283, 313, 324, 386, 397, 399, 400, 404, 411, 414, 415, 416, 418, 419, 420, 422, 435, 436, 437, 444, 471, 503, 535, 575, 583, 594, 609, 619, 633, 669, 715, 718, 721, 722, 723, 739, 764, 765, 766, 778, 804, 817, 818, 822, 823, 826, 840, 847, 853, 889, 895, 975, 977, 978, 989, 990, 992, 996, 1004, 1017, 1029, 1118, 1161, 1184, 1220, 1262, 1283, 1284, 1285, 1287, 1289, 1292], "120": [220, 313, 724, 823, 889, 1286], "1200": [614, 778, 1162, 1262], "120134": [669, 1220], "121": 1292, "123": [9, 633, 639, 652, 675, 768, 895, 1184, 1190, 1226, 1239, 1262], "123000": 895, "1232e": [958, 960, 1262], "1234": [27, 614, 778, 1162, 1262], "12345": [730, 953, 1040, 1161, 1262], "1234500": 895, "123456": [9, 895], "1234567": 27, "123456780": 123, "12346": 730, "123465": 895, "123a123": 652, "123abc": [651, 1202, 1203], "125": [1, 36, 51, 313, 322, 579, 757, 778, 850, 889, 1134, 1137, 1262], "127": [1250, 1262], "128": [49, 63, 1134, 1262], "129": [619, 778], "13": [177, 178, 183, 193, 194, 201, 209, 220, 221, 233, 245, 287, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 324, 396, 402, 403, 407, 410, 412, 413, 417, 423, 425, 545, 547, 594, 669, 708, 714, 717, 721, 728, 762, 764, 767, 778, 797, 798, 804, 811, 812, 823, 825, 840, 861, 869, 871, 874, 875, 876, 877, 878, 879, 880, 889, 974, 1004, 1017, 1018, 1118, 1220, 1262], "130": [126, 220, 313, 823, 889], "13382926553367784577": [466, 778], "134821952": 1271, "134_821_952": 1271, "135": [703, 1286], "13614470193936745724": [466, 778], "13756996518000038261": [1048, 1262], "13h": [397, 975], "14": [35, 151, 183, 220, 223, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 397, 402, 403, 407, 410, 412, 413, 417, 423, 425, 471, 584, 721, 764, 765, 778, 804, 823, 869, 871, 874, 875, 876, 877, 878, 879, 880, 889, 895, 975, 1004], "140": [220, 313, 823, 889], "141592653589793": 10, "141593": [583, 778, 905, 1262, 1283, 1286], "142857": [1134, 1262], "143": [669, 1220, 1292], "1433": [34, 313], "1436e16": 159, "1438741209321515184": [205, 313], "1440": [432, 1014], "1443e235": 1292, "149": 1292, "14d": 895, "15": [10, 36, 151, 183, 204, 209, 220, 223, 245, 313, 388, 392, 416, 422, 435, 444, 578, 594, 609, 715, 721, 764, 765, 778, 804, 817, 823, 840, 889, 895, 967, 970, 1004, 1017, 1029, 1262, 1284], "150": [220, 313, 823, 889, 1153, 1262], "1500": [151, 162], "15000": [217, 313], "153061": [485, 778], "15836": 159, "15_000": [217, 313], "16": [1, 36, 49, 68, 78, 151, 165, 183, 204, 220, 245, 287, 313, 384, 387, 471, 555, 579, 594, 670, 679, 714, 724, 725, 728, 778, 804, 817, 823, 840, 847, 861, 889, 895, 1004, 1017, 1134, 1174, 1221, 1235, 1262, 1283, 1284, 1289], "160": [220, 313, 823, 889], "165": [1004, 1017], "1656e15": [960, 1262], "166667": [1134, 1262], "1666683077": 730, "1666683099": 730, "167": 47, "16996": 1292, "16h": 895, "17": [151, 159, 190, 219, 292, 313, 444, 595, 613, 730, 765, 778, 822, 866, 889, 958, 960, 1004, 1029, 1151, 1262, 1292], "170": [220, 313, 823, 889], "17293822569102704640": [1143, 1262], "174": 1292, "175201": [623, 778, 1175, 1262], "1755e": [156, 159], "1764": 51, "17888890": [190, 313], "179": 1292, "17_500": [217, 313], "18": [34, 123, 183, 230, 245, 313, 387, 422, 435, 438, 471, 557, 594, 679, 778, 804, 832, 836, 840, 889, 895, 1020, 1279, 1286, 1289], "180": [390, 583, 778, 1286], "1844": 159, "18446744073709551614": [1143, 1262], "185_000_000": 1271, "186": 1292, "1875": [611, 778, 859, 889], "1897": [399, 411, 977, 992], "18d": 895, "19": [134, 159, 219, 245, 313, 399, 422, 594, 599, 601, 603, 605, 669, 778, 822, 840, 889, 977, 1004, 1017, 1220], "1920": 1284, "196": 1285, "1964": [836, 889], "1969": [1284, 1285], "1970": [61, 62, 149, 1271], "1972": 1271, "1976": [409, 439], "1977": [409, 439], "1978": [402, 403, 407, 409, 410, 412, 413, 417, 423, 425, 439, 1285], "1979": [409, 439], "1985": [719, 722], "1990": [129, 1271], "1993": 1271, "1994": 1271, "1995": 129, "1998": [418, 1000], "1999": [260, 313, 418, 895, 1000, 1287], "199992": [827, 889], "199994": [827, 889], "199996": [827, 889], "199998": [827, 889], "1_000_000": [190, 313, 1027, 1262], "1_234_500": 895, "1d": [204, 219, 245, 283, 313, 398, 418, 422, 429, 432, 435, 438, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 724, 738, 765, 766, 778, 817, 822, 840, 889, 895, 976, 984, 990, 1000, 1004, 1008, 1011, 1014, 1017, 1029, 1262], "1e": [11, 152, 153, 154, 155], "1e6": 11, "1h": [204, 219, 245, 283, 313, 405, 418, 422, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 722, 723, 765, 766, 778, 817, 822, 840, 889, 983, 985, 1000, 1004, 1017, 1029, 1262], "1i": [204, 245, 283, 313, 444, 594, 778, 817, 840, 889, 1029, 1262], "1m": [204, 219, 245, 283, 313, 418, 422, 434, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1012, 1013, 1015, 1016, 1017, 1029, 1262], "1mo": [204, 219, 245, 283, 313, 401, 415, 416, 418, 421, 422, 428, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 979, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1010, 1017, 1018, 1029, 1262], "1n": [204, 219, 245, 283, 313, 418, 422, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017, 1029, 1262], "1q": [204, 219, 245, 283, 313, 418, 422, 435, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017], "1st_col": 895, "1u": [204, 219, 245, 283, 313, 418, 422, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017, 1029, 1262], "1w": [204, 219, 245, 283, 313, 418, 422, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017, 1029, 1262], "1w2d": [719, 720], "1y": [204, 219, 245, 283, 313, 418, 422, 435, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017], "1y2mo": [418, 1000], "1zy3": [633, 1184], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 326, 328, 329, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 372, 373, 374, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 408, 411, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 752, 756, 757, 758, 759, 760, 761, 763, 766, 767, 768, 774, 778, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 894, 895, 899, 900, 901, 904, 906, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 944, 946, 950, 952, 953, 954, 955, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 978, 980, 981, 983, 985, 988, 989, 990, 992, 994, 995, 996, 997, 998, 1002, 1003, 1004, 1007, 1017, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1071, 1072, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1184, 1189, 1191, 1193, 1194, 1196, 1197, 1199, 1202, 1203, 1208, 1209, 1211, 1212, 1213, 1216, 1217, 1219, 1220, 1221, 1222, 1225, 1227, 1229, 1230, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1267, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 174, 183, 192, 208, 209, 230, 237, 239, 243, 260, 270, 271, 275, 289, 294, 313, 336, 337, 338, 392, 399, 402, 403, 407, 410, 411, 412, 413, 417, 422, 423, 425, 435, 438, 459, 466, 471, 535, 542, 551, 578, 597, 599, 601, 603, 605, 608, 610, 612, 637, 679, 694, 721, 730, 738, 757, 765, 778, 793, 804, 809, 832, 835, 850, 864, 868, 889, 895, 970, 977, 981, 992, 1004, 1017, 1020, 1032, 1047, 1145, 1188, 1241, 1243, 1246, 1262, 1278, 1279, 1281, 1287], "200": [430, 431, 433, 588, 589, 778, 895, 1025, 1130, 1145, 1146, 1152, 1153, 1155, 1262, 1281], "2000": [399, 408, 411, 415, 416, 418, 895, 977, 986, 992, 997, 998, 1000, 1005, 1271, 1284], "200000": [430, 827, 889], "200000000": 433, "2001": [16, 398, 399, 404, 406, 408, 411, 414, 418, 419, 420, 422, 426, 435, 436, 437, 438, 597, 599, 601, 603, 605, 608, 610, 612, 665, 778, 895, 976, 977, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1004, 1008, 1017, 1018, 1019, 1020, 1021, 1216], "2002": [129, 408, 418, 986, 1000, 1021], "2003": [418, 730, 1000], "2004": [418, 1000], "2005": [418, 1000], "2006": [418, 1000], "2008": 1271, "200m": [430, 431, 433], "2010": [260, 313, 895], "2011": [397, 975], "2012": [397, 975, 1287], "2016": [219, 313, 822, 889], "2017": [219, 313, 822, 889], "2018": [219, 313, 421, 822, 889, 1003], "2019": [219, 313, 822, 889], "202": 1285, "2020": [133, 144, 176, 183, 202, 219, 245, 313, 316, 396, 401, 405, 421, 424, 427, 428, 429, 430, 431, 432, 433, 434, 444, 594, 665, 667, 668, 706, 778, 796, 804, 822, 840, 889, 895, 974, 979, 983, 1003, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1029, 1216, 1218, 1219, 1262, 1285], "2021": [133, 144, 176, 183, 202, 204, 283, 313, 665, 738, 796, 804, 817, 889, 895, 980, 981, 987, 1007, 1216, 1284], "2022": [47, 176, 183, 202, 313, 400, 422, 435, 665, 719, 720, 722, 723, 724, 730, 796, 804, 889, 895, 978, 987, 1004, 1017, 1216], "2023": [16, 36, 123, 151, 217, 313, 400, 724, 738, 895, 978], "2024": [151, 396, 402, 403, 407, 410, 412, 413, 417, 423, 425, 706, 718, 719, 721, 722, 724, 895, 974, 1284, 1287], "2025": [396, 706, 895, 974], "2026": 1285, "2030": 1284, "2031": 895, "2047317070637311557": [205, 313], "2055938745": 123, "2065": [402, 403, 407, 410, 412, 413, 417, 423, 425], "2068": 159, "207": 1285, "2077": [260, 313, 895, 1284, 1285], "2095": 159, "20_000": [36, 313], "20word": 132, "21": [151, 183, 230, 262, 313, 399, 597, 599, 601, 603, 605, 608, 610, 612, 721, 730, 778, 804, 832, 889, 895, 977, 1279], "213": 1292, "2147483647": 1292, "2147483648": [1116, 1262], "21d": 895, "22": [41, 45, 151, 159, 313, 404, 419, 422, 435, 437, 438, 595, 597, 599, 601, 603, 605, 608, 610, 612, 665, 721, 774, 778, 889, 895, 1004, 1017, 1020, 1151, 1216, 1262, 1284, 1285, 1292], "221": 1292, "2246e": [1174, 1235, 1262], "225": [422, 435, 1286], "22_000_000": 1271, "23": [10, 159, 183, 204, 245, 275, 313, 400, 404, 407, 419, 422, 437, 594, 597, 599, 601, 603, 605, 608, 610, 612, 721, 724, 764, 765, 766, 778, 804, 817, 840, 850, 889, 895, 978, 985, 1246, 1262, 1291, 1292], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1271, "2337": [36, 313], "234": 27, "2345": 895, "23456789": 10, "235": 1292, "23h": 895, "24": [49, 151, 204, 219, 223, 245, 260, 283, 313, 386, 388, 404, 418, 419, 422, 429, 435, 437, 555, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 967, 1000, 1004, 1011, 1017, 1068, 1262, 1284, 1291], "24030": 158, "249": [695, 778], "25": [1, 27, 36, 51, 123, 183, 204, 219, 245, 270, 275, 283, 287, 313, 370, 392, 404, 405, 419, 422, 435, 437, 444, 579, 581, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 688, 721, 722, 723, 724, 730, 740, 765, 766, 778, 804, 817, 822, 829, 840, 859, 861, 889, 895, 944, 969, 970, 983, 1004, 1017, 1023, 1029, 1050, 1134, 1139, 1262, 1279, 1283, 1289, 1290], "250": [695, 778, 1153, 1262, 1281, 1292], "2500": [217, 275, 313], "254508": [444, 778, 1029, 1262], "255": 1292, "256": [223, 313, 370, 944, 1134, 1262, 1283], "2560": 944, "259921": [376, 778, 952, 1262, 1283], "25_000_000": 1271, "26": [34, 36, 151, 156, 157, 158, 159, 163, 183, 313, 405, 436, 804, 889, 983], "266667": [183, 313, 804, 889], "27": [1, 51, 270, 306, 313, 387, 414, 420, 436, 679, 778, 880, 895, 1137, 1241, 1262, 1291, 1292], "270": 1286, "28": [266, 271, 313, 322, 421, 438, 778, 1003, 1020, 1243, 1262, 1284, 1286, 1291, 1292], "283185": [583, 778], "2846": 313, "285714": [472, 778, 1053, 1262], "289962": 1286, "28_341_469": 1271, "29": [16, 151, 397, 415, 975, 997], "29096": 1292, "290994": [851, 889], "292432": [906, 1262], "292893": [444, 778, 1029, 1262], "2_color_scal": [36, 313], "2d": [245, 270, 271, 313, 418, 594, 738, 778, 840, 889, 975, 982], "2h": [597, 599, 601, 603, 605, 608, 610, 612, 778], "2i": [204, 313, 817, 889], "2m": [895, 995], "2x": 158, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 322, 323, 324, 325, 327, 338, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 553, 554, 555, 556, 557, 558, 560, 562, 564, 565, 568, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 626, 627, 628, 631, 632, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 666, 667, 672, 673, 676, 677, 678, 679, 680, 682, 686, 687, 690, 691, 692, 694, 695, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 778, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 895, 900, 901, 904, 905, 907, 908, 909, 911, 912, 913, 914, 915, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 950, 952, 953, 954, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 982, 984, 985, 986, 988, 989, 990, 992, 994, 995, 996, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1019, 1020, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1071, 1072, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1185, 1186, 1187, 1189, 1190, 1191, 1194, 1195, 1196, 1198, 1199, 1202, 1203, 1204, 1205, 1206, 1210, 1217, 1218, 1223, 1224, 1227, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1267, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292], "30": [36, 183, 192, 204, 208, 237, 243, 266, 287, 313, 336, 337, 338, 392, 400, 402, 403, 407, 410, 412, 413, 414, 415, 417, 420, 421, 422, 423, 425, 428, 435, 436, 466, 542, 619, 721, 738, 764, 765, 778, 804, 809, 817, 835, 861, 889, 895, 970, 978, 997, 1003, 1004, 1010, 1017, 1047, 1262, 1278, 1279, 1281, 1283, 1284, 1286, 1287, 1290, 1292], "300": [266, 313, 465, 572, 589, 778, 895, 1146, 1152, 1153, 1155, 1262, 1281], "3000": 895, "3002": [399, 411, 977, 992], "30103": [531, 778, 1283], "3022416320763508302": [1048, 1262], "30_000": [36, 313], "30m": [204, 313, 422, 435, 817, 889, 1004, 1017], "31": [51, 183, 260, 313, 399, 400, 404, 411, 415, 418, 428, 637, 665, 718, 721, 730, 738, 757, 804, 889, 895, 975, 977, 978, 982, 992, 997, 1010, 1145, 1188, 1216, 1262, 1285, 1287, 1292], "32": [49, 61, 66, 69, 79, 214, 219, 245, 313, 555, 594, 619, 778, 822, 840, 889, 971, 1001, 1134, 1156, 1262, 1279, 1284], "321": [27, 1292], "3212": [669, 1220], "321cba": 1284, "3265500": 895, "32971": [438, 1020], "32974": [438, 1020], "32976": [438, 1020], "32bit": [270, 313], "33": [183, 230, 313, 613, 778, 804, 832, 889, 1156, 1262, 1285], "333": [16, 614, 778, 1025, 1130, 1162, 1262], "33333": 1287, "333333": [210, 313, 557, 820, 889, 1134, 1160, 1262, 1279], "34": [183, 313, 665, 804, 889, 1216], "3420": [669, 1220], "343622": [624, 778], "345": [647, 648, 1198, 1199], "3456": 895, "34776706224699483": [1176, 1262], "35": [36, 313, 392, 721, 778, 970, 1262], "350": [465, 572, 778, 1153, 1262], "356": [404, 419, 437], "356194": [702, 703, 1286], "357": [404, 419, 437], "358": [404, 419, 437], "359": [404, 419, 437], "36": [183, 313, 804, 889, 1289], "360": [390, 583, 778, 1286], "361": 1292, "363961": [523, 1106], "366": [419, 1001], "37": [12, 895], "370h": [444, 778, 1029, 1262], "37338": 1292, "38": [36, 123, 156, 159, 313], "38180177416060584": [606, 778, 1157, 1262], "381802": [606, 778, 1157, 1262], "386294": [532, 778, 1115, 1262, 1283], "389056": [448, 778, 1032, 1262, 1283], "39": [610, 730, 778], "39m": 895, "3_color_scal": [36, 313], "3d12h4m25": [204, 219, 245, 283, 313, 422, 435, 444, 594, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1004, 1017, 1029, 1262], "3f": [132, 665, 668, 1216, 1219], "3i": [204, 245, 313, 817, 889], "3rd": [1194, 1217], "3xy": [633, 1184], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 172, 173, 174, 175, 176, 177, 178, 182, 184, 187, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 232, 233, 234, 236, 237, 238, 239, 245, 247, 248, 255, 256, 259, 263, 264, 265, 266, 267, 268, 271, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 326, 328, 340, 347, 348, 349, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 370, 372, 373, 374, 376, 377, 378, 382, 383, 386, 387, 388, 390, 393, 400, 403, 404, 411, 419, 420, 421, 422, 423, 424, 427, 429, 432, 434, 435, 437, 441, 442, 444, 448, 449, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 482, 483, 487, 488, 489, 496, 497, 498, 499, 500, 502, 503, 505, 513, 515, 516, 517, 518, 519, 520, 521, 525, 526, 531, 534, 535, 536, 553, 555, 557, 558, 560, 562, 564, 565, 568, 569, 570, 573, 574, 576, 577, 578, 579, 582, 584, 588, 589, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 621, 625, 626, 627, 628, 631, 633, 639, 642, 643, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 663, 664, 665, 666, 670, 675, 676, 678, 679, 680, 682, 685, 686, 687, 688, 694, 695, 697, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 721, 722, 723, 725, 727, 728, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 774, 778, 793, 794, 796, 797, 798, 799, 800, 803, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 840, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 895, 899, 904, 906, 913, 920, 922, 923, 924, 926, 927, 928, 929, 930, 932, 934, 935, 936, 937, 938, 939, 944, 946, 953, 954, 956, 962, 967, 969, 971, 981, 985, 991, 992, 993, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1006, 1009, 1011, 1014, 1016, 1017, 1018, 1019, 1026, 1029, 1033, 1034, 1036, 1037, 1041, 1042, 1044, 1049, 1050, 1052, 1053, 1054, 1055, 1059, 1062, 1063, 1064, 1065, 1067, 1072, 1079, 1080, 1081, 1082, 1083, 1088, 1092, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1108, 1109, 1124, 1127, 1128, 1131, 1134, 1135, 1136, 1137, 1141, 1142, 1145, 1146, 1147, 1150, 1154, 1156, 1157, 1158, 1159, 1160, 1163, 1165, 1169, 1170, 1173, 1176, 1177, 1178, 1182, 1184, 1190, 1193, 1194, 1198, 1199, 1200, 1201, 1206, 1208, 1209, 1214, 1215, 1216, 1217, 1221, 1226, 1227, 1230, 1232, 1234, 1240, 1243, 1245, 1247, 1253, 1262, 1267, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1289, 1290, 1291, 1292], "40": [36, 183, 192, 219, 237, 313, 422, 435, 466, 529, 669, 679, 778, 804, 822, 835, 889, 895, 987, 1017, 1112, 1220, 1278, 1279, 1281, 1284], "400": [282, 313, 430, 431, 433, 858, 889, 1152, 1153, 1155, 1262, 1281], "4000000": [1027, 1262], "404": [220, 313, 638, 640, 823, 889, 1189, 1191], "4096": 1283, "41": [183, 313, 610, 778, 804, 889, 1279, 1292], "412277": 159, "414214": [628, 778, 1179, 1262, 1283], "4160": 51, "416147": 1286, "4164": [219, 313, 822, 889], "42": [51, 183, 205, 230, 245, 313, 594, 778, 804, 832, 840, 889, 1048, 1262, 1278, 1291], "424778": [583, 778], "428571": [443, 778, 1028, 1262], "429101": 1279, "4294967296": [41, 313], "43": [183, 245, 313, 387, 594, 610, 778, 804, 840, 889], "4321": 895, "433013": [607, 778, 851, 889], "434949": 1286, "44": [10, 230, 313, 393, 778, 832, 889], "4411": [219, 313, 822, 889], "44225": [952, 1262], "444": 10, "44444444444": 10, "45": [36, 183, 245, 313, 400, 422, 435, 594, 610, 633, 639, 677, 703, 721, 738, 764, 765, 778, 804, 840, 889, 895, 978, 1004, 1017, 1184, 1190, 1229, 1283, 1284, 1286, 1290, 1292], "450": [1153, 1262], "4500000": 895, "456": [9, 10, 400, 895, 978, 1239, 1262], "456000": [400, 978], "456001\u00b5": 895, "4566": [219, 313, 822, 889], "456789": [895, 1005], "456789\u00b5": 895, "456m": 895, "457658": 1286, "459148": [440, 778], "46": 895, "4696": [219, 313, 822, 889], "47": [47, 183, 313, 610, 778, 804, 889, 895], "470": [836, 889], "47033": [606, 778, 1157, 1262], "47033046033698594": [606, 778, 1157, 1262], "475": [836, 889], "48": [12, 159, 245, 313, 594, 679, 778, 840, 889, 895], "4827": [219, 313, 822, 889], "485": 1292, "49": [183, 313, 804, 889, 895], "492474": [444, 778, 1029, 1262], "498": [220, 313, 823, 889], "4_500_000": 895, "4ab4a": 1284, "4d": [444, 778, 1029, 1262], "4f6228": [36, 313], "4f71": [36, 313], "4x": [216, 313], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 173, 176, 177, 178, 183, 184, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 207, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 232, 233, 234, 236, 238, 239, 240, 245, 248, 255, 256, 259, 260, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275, 277, 280, 281, 282, 283, 286, 287, 289, 290, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 322, 323, 326, 341, 342, 347, 348, 349, 351, 353, 357, 362, 364, 370, 372, 373, 374, 377, 378, 388, 389, 390, 392, 393, 396, 399, 400, 401, 402, 403, 407, 410, 411, 412, 413, 417, 421, 423, 424, 425, 427, 428, 434, 438, 442, 444, 446, 447, 450, 452, 456, 457, 461, 462, 464, 467, 469, 471, 473, 476, 479, 480, 481, 482, 483, 487, 489, 496, 499, 500, 502, 503, 505, 508, 510, 511, 515, 516, 517, 518, 519, 520, 524, 525, 529, 535, 553, 555, 557, 569, 573, 574, 575, 576, 577, 578, 579, 581, 582, 584, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 607, 609, 610, 611, 612, 613, 616, 627, 633, 642, 643, 646, 647, 648, 666, 670, 680, 682, 686, 687, 688, 700, 702, 703, 705, 706, 707, 708, 710, 712, 714, 715, 716, 717, 718, 719, 721, 724, 725, 726, 727, 728, 732, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 757, 759, 761, 762, 763, 767, 774, 778, 796, 797, 798, 799, 800, 804, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 829, 830, 836, 840, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 860, 861, 864, 865, 866, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 889, 895, 904, 906, 910, 913, 916, 917, 920, 922, 923, 924, 926, 928, 932, 937, 938, 939, 944, 946, 954, 956, 963, 967, 968, 969, 970, 971, 974, 977, 978, 979, 980, 981, 982, 992, 1003, 1005, 1006, 1007, 1009, 1010, 1016, 1018, 1019, 1020, 1026, 1029, 1031, 1033, 1034, 1035, 1044, 1049, 1050, 1052, 1054, 1058, 1061, 1072, 1079, 1082, 1083, 1088, 1091, 1094, 1098, 1099, 1100, 1101, 1102, 1103, 1107, 1108, 1112, 1116, 1124, 1131, 1134, 1135, 1136, 1139, 1140, 1141, 1142, 1146, 1147, 1150, 1151, 1152, 1153, 1155, 1156, 1159, 1163, 1165, 1170, 1176, 1179, 1184, 1193, 1194, 1197, 1198, 1217, 1221, 1234, 1241, 1243, 1246, 1247, 1250, 1253, 1262, 1267, 1272, 1275, 1277, 1279, 1280, 1283, 1284, 1285, 1286, 1289, 1291, 1292], "50": [12, 27, 36, 183, 192, 202, 313, 378, 422, 435, 719, 720, 778, 804, 889, 895, 956, 969, 1017, 1262, 1278], "500": [36, 282, 313, 402, 403, 407, 410, 412, 413, 417, 423, 425, 858, 889, 991, 993, 999, 1152, 1153, 1155, 1262], "5000": [275, 313, 1246, 1262], "50000": 130, "500000": [410, 991], "500000000": [417, 999], "5000555": 895, "500_000": [402, 403, 407, 410, 412, 413, 417, 423, 425], "500m": [991, 993, 999], "51": 895, "512": [41, 131, 216, 313, 370, 579, 778, 944, 1134, 1262], "51966": [670, 1221], "52": [287, 313, 436, 613, 778, 861, 889], "523599": 1286, "527525": [1158, 1262], "53": [436, 1018, 1289], "533316061": 1271, "533_316_061": 1271, "54": [448, 778, 1069, 1262, 1283, 1292], "540": [390, 583, 778], "540302": 1286, "543": 9, "543081": [380, 778, 959, 1262], "5432": 131, "54321": 9, "544": 1292, "544705": 710, "549306": [910, 1262], "55": [36, 49, 313, 1284, 1285], "5555": 895, "55550": 895, "56": [123, 683, 778], "566371": [583, 778], "567": 27, "56789": [953, 1040, 1161, 1262], "57": [610, 778, 1161, 1262, 1286, 1292], "570796": [330, 332, 778, 905, 907, 1262, 1286], "575050513": [156, 159], "58": [238, 313], "581139": [969, 1262], "584963": [530, 778], "587401": [376, 778, 1283], "59": [123, 183, 313, 400, 413, 423, 457, 721, 764, 765, 766, 778, 804, 889, 895, 978, 995, 1005], "59815": [448, 778, 1283], "5_000_555": 895, "5th": [36, 313], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 173, 176, 179, 180, 184, 185, 186, 187, 188, 189, 191, 192, 195, 198, 199, 200, 201, 202, 204, 206, 208, 209, 210, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 277, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 296, 306, 307, 313, 316, 317, 322, 326, 347, 348, 349, 351, 357, 365, 373, 374, 386, 387, 393, 396, 400, 404, 414, 418, 419, 420, 430, 431, 433, 436, 437, 440, 442, 451, 452, 457, 458, 461, 467, 469, 471, 489, 490, 491, 500, 503, 516, 517, 518, 519, 523, 535, 536, 569, 573, 580, 583, 584, 585, 590, 592, 594, 596, 598, 600, 602, 604, 607, 609, 610, 611, 616, 621, 627, 633, 637, 647, 648, 670, 680, 682, 687, 695, 697, 699, 706, 714, 715, 716, 718, 721, 725, 728, 734, 739, 740, 744, 757, 761, 774, 778, 796, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 820, 821, 822, 824, 826, 827, 834, 836, 838, 840, 841, 842, 844, 846, 847, 848, 849, 850, 853, 856, 857, 860, 861, 864, 865, 870, 880, 881, 889, 895, 920, 922, 923, 924, 926, 932, 954, 958, 960, 965, 966, 971, 974, 1000, 1019, 1026, 1033, 1044, 1050, 1073, 1074, 1083, 1086, 1099, 1100, 1101, 1102, 1106, 1124, 1138, 1141, 1142, 1147, 1149, 1154, 1156, 1158, 1160, 1165, 1170, 1173, 1184, 1188, 1198, 1221, 1233, 1243, 1262, 1267, 1272, 1275, 1277, 1279, 1280, 1283, 1289, 1290, 1292], "60": [36, 126, 192, 238, 313, 407, 412, 413, 423, 434, 457, 610, 665, 778, 1001, 1005, 1016, 1143, 1216, 1262, 1286], "600": [282, 313, 430, 431, 433, 858, 889, 895], "60000": 410, "600000": 895, "60000000": 417, "60206": [531, 778, 1283], "605551": 759, "605551275463989": 759, "609438": 1283, "60_000": [402, 403, 407, 410, 412, 413, 417, 423, 425], "61": [238, 313], "625": [604, 778], "626172": [635, 1186], "63": [610, 778], "63204": 1292, "6331e16": [1235, 1262, 1286], "636253": 1286, "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 172, 275, 313, 381, 555, 579, 778, 1134, 1137, 1262, 1283], "64030": [670, 1221], "642093": 1286, "647961": 159, "64bit": [151, 586, 778, 1143, 1262], "65": [1023, 1262], "650": [465, 572, 778], "65280": [670, 1221], "654": [27, 757, 850, 889], "65432": 1287, "65536": 1283, "66": [219, 282, 313, 610, 695, 778, 822, 858, 889, 1069, 1156, 1262], "663053": 123, "666": 895, "666000": 895, "666667": [183, 210, 284, 301, 313, 443, 743, 778, 804, 820, 859, 875, 889, 1028, 1262], "666f6f": [635, 1186], "676": [220, 313, 823, 889], "678": [633, 639, 1184, 1190], "6789": [28, 895], "67890": 28, "686241": 1279, "69": [610, 778, 1069, 1262], "693147": [532, 778, 1113, 1115, 1262, 1283], "6_000_000": 1271, "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 173, 176, 179, 180, 181, 183, 185, 186, 188, 189, 191, 195, 198, 200, 204, 206, 208, 210, 218, 222, 224, 226, 228, 230, 231, 235, 238, 240, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 258, 261, 262, 263, 264, 269, 271, 272, 273, 281, 283, 284, 285, 313, 316, 317, 322, 326, 348, 349, 351, 360, 387, 399, 400, 404, 411, 419, 421, 422, 435, 437, 448, 461, 467, 471, 472, 489, 503, 516, 517, 518, 519, 573, 584, 590, 594, 609, 610, 627, 642, 669, 682, 706, 714, 715, 718, 721, 722, 728, 733, 739, 740, 757, 761, 778, 796, 801, 802, 804, 806, 808, 810, 813, 815, 817, 818, 820, 821, 826, 832, 834, 837, 838, 840, 841, 842, 846, 850, 853, 889, 895, 910, 923, 924, 926, 935, 977, 978, 982, 987, 992, 1003, 1004, 1017, 1019, 1032, 1053, 1068, 1086, 1099, 1100, 1101, 1102, 1146, 1147, 1159, 1165, 1193, 1220, 1262, 1267, 1272, 1277, 1279, 1280, 1283, 1285, 1289, 1292], "70": [183, 313, 695, 722, 778, 804, 889, 1069, 1262], "700": [282, 313, 858, 889], "702963": [36, 313], "707107": [359, 445, 607, 608, 702, 778, 934, 1030, 1262, 1286], "712389": 1286, "714": 1292, "714286": [472, 778, 1053, 1262], "718281828459045": [10, 440, 530, 778, 1023, 1113, 1262], "718282": [448, 778, 1032, 1262, 1283], "720": [390, 583, 778], "7264": 1292, "732051": [1179, 1262], "7415e16": 159, "742": [220, 313, 823, 889], "75": [36, 183, 313, 326, 573, 581, 596, 598, 600, 602, 607, 609, 611, 740, 778, 804, 889, 895, 969, 1050, 1069, 1139, 1262, 1286, 1292], "7500": [217, 313], "7508": 1292, "754": [688, 778], "754888": [440, 778], "761594": [684, 778, 1236, 1262], "7654": 895, "765431": 1005, "7654321": 27, "76933c": [36, 313], "78": 9, "780": 9, "784": [219, 313, 822, 889], "785398": [334, 702, 703, 778, 909, 1262, 1286], "789": [10, 895], "79": [1069, 1262], "7d": 895, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 173, 176, 179, 180, 181, 183, 185, 186, 187, 188, 189, 191, 195, 198, 200, 202, 206, 208, 215, 218, 219, 220, 222, 223, 224, 226, 228, 231, 240, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 258, 260, 261, 262, 264, 269, 271, 272, 273, 281, 284, 285, 287, 313, 326, 328, 340, 348, 349, 351, 384, 387, 388, 400, 461, 468, 471, 472, 497, 499, 503, 516, 517, 518, 519, 555, 573, 579, 590, 591, 595, 619, 625, 627, 649, 650, 665, 695, 700, 706, 710, 712, 715, 717, 725, 727, 732, 733, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 757, 759, 762, 763, 767, 778, 796, 801, 802, 804, 806, 807, 808, 810, 813, 815, 818, 821, 822, 823, 826, 827, 836, 838, 841, 842, 846, 850, 853, 861, 889, 895, 923, 924, 926, 960, 967, 987, 1050, 1053, 1068, 1080, 1082, 1086, 1099, 1100, 1101, 1102, 1134, 1137, 1147, 1150, 1151, 1154, 1156, 1158, 1160, 1200, 1201, 1216, 1262, 1271, 1272, 1277, 1279, 1280, 1283, 1284, 1285, 1289, 1292], "80": [36, 313], "800": [430, 431, 433], "8000": 131, "803065983": 123, "81": 1283, "814697265625": [1027, 1262], "816497": [261, 313], "8192": 129, "82": [219, 313, 822, 889], "8257e14": 1292, "83": [219, 313, 822, 889], "833": [219, 313, 822, 889], "833333": [301, 875], "848062": 1286, "848808": 159, "85": [36, 313, 1069, 1262, 1292], "850": [465, 572, 778], "8568409950394724": [1023, 1262], "8589934592": [619, 778], "86": 1292, "8601": 1284, "87": 1292, "876": 9, "88": [183, 313, 804, 889], "881374": [333, 778, 908, 1262], "888": [757, 850, 889], "8_000_000": 1271, "8a": [941, 942], "8nin": 1292, "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 173, 181, 183, 195, 197, 206, 210, 220, 222, 223, 238, 245, 247, 248, 251, 263, 264, 281, 285, 287, 306, 313, 322, 326, 328, 340, 348, 349, 351, 356, 358, 384, 387, 390, 400, 453, 461, 471, 477, 497, 503, 514, 522, 557, 573, 583, 590, 594, 595, 606, 609, 610, 621, 625, 639, 669, 677, 679, 708, 714, 715, 718, 721, 733, 766, 778, 804, 813, 818, 820, 823, 826, 840, 842, 853, 861, 880, 889, 895, 918, 919, 923, 924, 926, 931, 933, 969, 982, 991, 993, 999, 1004, 1017, 1018, 1059, 1068, 1080, 1086, 1097, 1105, 1147, 1151, 1157, 1159, 1161, 1173, 1190, 1220, 1229, 1262, 1271, 1272, 1277, 1280, 1289], "90": [183, 220, 313, 669, 804, 823, 889, 1220, 1286], "901234": [953, 1040, 1161, 1262], "909": [219, 313, 822, 889], "910": [219, 313, 639, 822, 889, 1190], "910t": [633, 639, 1184, 1190], "914": [219, 313, 822, 889], "9223372036854775807": [691, 778], "9223372036854775808": [533, 778], "927295": 1286, "928571": [446, 778, 1031, 1262], "93": [1069, 1262], "94": [323, 778], "9477376373212048": [1069, 1262], "95": [17, 323, 778, 895], "95b3d7": [36, 313], "96": [17, 183, 313, 323, 778, 804, 889, 1069, 1262], "961": 51, "963624": [445, 778, 1030, 1262], "963757": 1286, "964028": [238, 313], "96_067_179": 1271, "97": [17, 209, 313, 323, 778, 1069, 1262], "9774092659964970114": [466, 778], "978307200": [406, 984], "978307200000": 426, "978307200000000": [406, 426, 984, 1008], "978307200000000000": 1008, "978393600": [406, 984], "978393600000": 426, "978393600000000": [406, 426, 984, 1008], "978393600000000000": 1008, "978480000": [406, 984], "978480000000": 426, "978480000000000": [406, 426, 984, 1008], "978480000000000000": 1008, "98": [17, 209, 238, 313, 372, 460, 463, 626, 669, 686, 778, 1220], "987": 27, "987000": 895, "9876": 9, "987654": [27, 895], "987654321": 10, "9876543210": 123, "987m": 895, "988": 10, "99": [17, 36, 193, 194, 209, 212, 238, 282, 313, 323, 372, 450, 452, 460, 463, 626, 686, 768, 778, 811, 812, 858, 889, 1023, 1035, 1262, 1283], "9914e218": 159, "993": [1050, 1262], "998347": [238, 313], "999": [399, 411, 895, 977, 992, 1281, 1292], "999000": 895, "999954": [238, 313], "999999": [675, 721, 764, 765, 766, 895, 1226], "999999\u00b5": 895, "9bbb59": [36, 313], "A": [13, 33, 36, 41, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 180, 188, 197, 204, 218, 219, 220, 225, 227, 232, 238, 263, 266, 281, 282, 283, 287, 288, 313, 321, 394, 395, 400, 424, 427, 441, 442, 450, 462, 464, 475, 478, 480, 481, 487, 527, 534, 535, 546, 559, 568, 569, 591, 596, 598, 600, 602, 604, 607, 609, 611, 631, 632, 633, 638, 639, 640, 641, 642, 643, 646, 648, 651, 652, 653, 655, 666, 675, 708, 724, 725, 729, 778, 802, 808, 817, 821, 822, 823, 838, 858, 861, 862, 889, 895, 972, 973, 978, 1006, 1009, 1025, 1035, 1130, 1152, 1153, 1155, 1158, 1159, 1160, 1182, 1183, 1184, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1202, 1203, 1204, 1206, 1217, 1226, 1262, 1271, 1272, 1275, 1287, 1289], "AND": [696, 697, 757, 895], "AS": [260, 313, 757, 758, 850, 889, 1271, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1291], "And": [673, 1224], "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 195, 270, 275, 313, 527, 768, 813, 889], "At": [41, 238, 313], "BY": [757, 850, 889, 1271, 1274, 1280, 1288, 1289], "Be": 889, "By": [5, 12, 14, 30, 47, 129, 130, 143, 204, 218, 219, 245, 247, 256, 261, 283, 284, 313, 357, 418, 422, 435, 520, 523, 529, 589, 594, 597, 599, 601, 603, 605, 608, 610, 612, 618, 629, 693, 710, 712, 719, 720, 722, 723, 724, 738, 759, 765, 766, 767, 778, 799, 817, 821, 822, 840, 846, 851, 859, 889, 932, 1000, 1004, 1017, 1103, 1146, 1169, 1180, 1252, 1262], "For": [14, 35, 36, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 187, 192, 218, 219, 238, 245, 270, 299, 313, 415, 416, 443, 445, 446, 457, 527, 536, 546, 586, 624, 631, 638, 639, 640, 642, 643, 666, 714, 724, 728, 729, 774, 778, 807, 822, 840, 873, 889, 893, 1028, 1030, 1031, 1034, 1118, 1143, 1176, 1182, 1189, 1190, 1191, 1193, 1194, 1217, 1241, 1262], "IF": 1282, "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 172, 187, 192, 195, 202, 204, 206, 214, 215, 216, 219, 222, 223, 227, 234, 238, 245, 247, 248, 249, 253, 256, 258, 260, 263, 264, 267, 268, 270, 271, 277, 278, 280, 281, 282, 313, 316, 325, 327, 350, 357, 362, 374, 396, 400, 401, 415, 416, 424, 427, 453, 468, 473, 485, 506, 515, 520, 521, 527, 535, 536, 542, 548, 549, 574, 579, 581, 584, 586, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 620, 624, 625, 630, 639, 640, 642, 643, 644, 645, 655, 656, 657, 658, 660, 661, 662, 665, 666, 667, 668, 672, 675, 692, 696, 698, 701, 705, 706, 709, 710, 714, 719, 720, 722, 723, 724, 727, 728, 734, 735, 736, 738, 740, 750, 753, 754, 755, 760, 765, 766, 768, 769, 778, 799, 800, 807, 809, 813, 817, 821, 822, 827, 831, 838, 840, 844, 846, 848, 850, 855, 857, 858, 873, 883, 889, 893, 895, 902, 903, 925, 932, 937, 947, 956, 974, 978, 979, 997, 998, 1006, 1009, 1034, 1049, 1050, 1054, 1068, 1069, 1072, 1089, 1098, 1103, 1104, 1110, 1118, 1137, 1139, 1141, 1143, 1145, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1165, 1167, 1169, 1172, 1176, 1177, 1181, 1190, 1191, 1193, 1194, 1195, 1196, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1216, 1217, 1218, 1219, 1223, 1226, 1234, 1237, 1241, 1243, 1251, 1262, 1267, 1271, 1272, 1274, 1281, 1289], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 173, 190, 192, 195, 204, 219, 220, 223, 234, 238, 245, 271, 280, 313, 316, 535, 536, 594, 778, 800, 813, 817, 822, 823, 840, 857, 889, 1027, 1034, 1137, 1142, 1262, 1267], "It": [42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 170, 183, 220, 230, 237, 260, 270, 275, 281, 282, 290, 299, 313, 316, 317, 388, 389, 422, 468, 536, 545, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 754, 755, 774, 778, 795, 799, 800, 804, 809, 823, 827, 832, 850, 858, 865, 873, 889, 897, 951, 967, 968, 1004, 1050, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1164, 1166, 1241, 1246, 1262, 1267], "Its": [205, 313, 466, 778, 1048, 1262], "NO": 895, "NOT": [119, 215, 254, 313, 527, 544, 617, 778, 845, 889, 1289], "No": 20, "Not": [193, 313, 451, 480, 481, 778, 799, 811, 889, 1036, 1262], "ON": 1289, "OR": [698, 699, 813, 889, 895], "On": [688, 778, 825, 889], "One": [47, 183, 234, 270, 275, 313, 326, 573, 700, 711, 727, 733, 736, 743, 745, 748, 749, 758, 778, 804, 889, 895, 969, 1262], "Or": [203, 204, 219, 245, 259, 283, 292, 313, 444, 574, 594, 627, 719, 720, 722, 723, 765, 766, 768, 774, 778, 816, 817, 822, 840, 849, 866, 889, 1029, 1262], "That": [135, 827, 889], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 175, 183, 184, 186, 187, 188, 191, 192, 195, 202, 203, 204, 205, 210, 216, 219, 223, 230, 236, 238, 245, 246, 247, 248, 251, 252, 253, 260, 270, 271, 276, 279, 283, 287, 288, 290, 291, 292, 299, 313, 324, 365, 366, 367, 368, 372, 373, 389, 391, 394, 395, 396, 404, 414, 418, 419, 422, 424, 435, 436, 447, 450, 453, 457, 458, 466, 498, 502, 535, 536, 548, 574, 581, 584, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 621, 624, 630, 634, 635, 638, 643, 644, 645, 649, 650, 651, 652, 660, 661, 662, 663, 664, 665, 666, 676, 679, 686, 687, 706, 708, 726, 730, 738, 740, 754, 755, 756, 757, 760, 768, 770, 771, 773, 774, 778, 779, 780, 783, 785, 786, 787, 794, 799, 804, 805, 807, 809, 810, 813, 816, 817, 818, 820, 822, 826, 827, 832, 836, 840, 842, 843, 844, 850, 854, 856, 861, 862, 865, 866, 873, 889, 893, 894, 895, 901, 904, 940, 941, 942, 946, 955, 968, 969, 972, 973, 974, 982, 996, 1000, 1001, 1004, 1006, 1017, 1018, 1034, 1035, 1038, 1048, 1081, 1085, 1118, 1137, 1139, 1141, 1145, 1146, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1173, 1176, 1181, 1185, 1186, 1194, 1195, 1196, 1200, 1201, 1202, 1203, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1243, 1247, 1254, 1256, 1258, 1262, 1263, 1268, 1269, 1270, 1271, 1276, 1289, 1290, 1292], "Then": 148, "There": 1289, "These": [1, 36, 125, 131, 132, 168, 277, 313, 435, 777, 778, 893, 1004, 1017], "To": [35, 54, 193, 313, 378, 394, 395, 451, 452, 631, 637, 638, 639, 642, 651, 652, 661, 662, 663, 664, 673, 778, 811, 889, 956, 972, 973, 1036, 1182, 1188, 1189, 1190, 1193, 1202, 1203, 1224, 1243, 1262, 1289], "Will": [53, 54, 799, 800, 809, 836, 847, 889, 1262], "With": [138, 214, 256, 313, 357, 520, 618, 778, 799, 846, 889, 932, 1068, 1103, 1169, 1262], "_": [1, 47, 51, 238, 268, 272, 313, 350, 506, 632, 639, 641, 647, 648, 653, 656, 657, 847, 889, 950, 1183, 1190, 1198, 1199, 1204, 1208, 1238, 1262], "__array_ufunc__": 897, "__call__": 774, "__dataframe__": 117, "__enter__": 1289, "__exit__": 1289, "__getattr__": 774, "__getitem__": 676, "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 1289], "__name__": [217, 313], "_bar_": 729, "_btm_by_a": [373, 778], "_btm_by_b": [373, 778], "_by_ca": [373, 687, 778], "_by_cb": [373, 687, 778], "_df": [1, 48], "_diff": [287, 313, 861, 889], "_eager": [799, 889], "_expr": [1, 49], "_foo": 541, "_geventdataframeresult": [54, 800, 889], "_is_not_nan": [481, 778], "_is_odd": [251, 313, 842, 889], "_isnan": [480, 778], "_isnul": [483, 778], "_kwarg": [799, 889], "_ldf": 1, "_lf": 50, "_lower_boundari": [204, 313, 817, 889], "_max": [574, 778], "_mean_squar": [292, 866], "_min": [574, 778], "_not_nul": [482, 778], "_o": [647, 648, 1198, 1199], "_revers": [558, 562, 591, 778], "_right": [218, 219, 220, 313, 821, 822, 823, 889], "_suffix": 563, "_sum": [292, 866], "_top_by_a": [687, 778], "_top_by_b": [687, 778], "_train": [863, 889], "_upper_boundari": [204, 313, 817, 889], "_world": 729, "a1": [36, 48, 50, 313], "a101": 1292, "a123": [36, 313], "a2": [36, 48, 50, 313], "a_1": [657, 1208, 1238, 1262], "a_2": [1238, 1262], "a_3": [1238, 1262], "a_a": 758, "a_agg_list": [204, 313, 817, 889], "a_b_doubl": 725, "a_btm_by_a": [373, 778], "a_btm_by_b": [373, 778], "a_by_ca": [373, 687, 778], "a_by_cb": [373, 687, 778], "a_div_2": 1283, "a_div_5": 1283, "a_interpol": [472, 778], "a_is_even": [260, 313, 757, 850, 889], "a_isnul": [483, 778], "a_lag_": 708, "a_log2": 1283, "a_mod_2": 1283, "a_not_nul": [482, 778], "a_revers": [558, 562, 591, 778], "a_rol": 708, "a_suffix": 563, "a_times_2": [536, 778], "a_times_b": [535, 778], "a_top_by_a": [687, 778], "a_top_by_b": [687, 778], "a_txt": 758, "aa": [447, 631, 642, 726, 778, 895, 969, 1182, 1193, 1262, 1284], "aaa": [1, 36, 313, 631, 642, 676, 678, 895, 1182, 1193], "aaaa": [941, 942], "aabcdef": 662, "aad": [941, 942], "aag": 26, "aazz": 1284, "ab": [206, 222, 264, 287, 313, 676, 678, 778, 861, 889, 895, 1049, 1072, 1234, 1262, 1282, 1284], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 322, 639, 651, 661, 778, 895, 1190, 1202, 1203], "abc123": 1284, "abc456": [651, 1202, 1203, 1284], "abcabc": 652, "abcd": 1284, "abcdeff": 661, "abf": [133, 144, 145], "abl": [91, 131], "about": [91, 131, 624, 631, 638, 639, 642, 651, 652, 778, 893, 1176, 1182, 1189, 1190, 1193, 1202, 1203, 1262, 1292], "abov": [36, 219, 238, 313, 768, 822, 889], "abs_a": 1283, "absolut": [133, 144, 145, 152, 153, 154, 155, 321, 443, 445, 446, 778, 900, 1028, 1030, 1031, 1262, 1283], "acc": [714, 715, 728, 752], "accent": 895, "accept": [127, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 159, 175, 185, 203, 251, 252, 256, 259, 276, 287, 288, 292, 313, 322, 373, 378, 447, 473, 574, 588, 589, 627, 653, 679, 687, 695, 697, 699, 704, 707, 708, 709, 717, 726, 742, 744, 747, 756, 760, 762, 768, 774, 778, 794, 806, 816, 842, 843, 846, 849, 854, 861, 862, 866, 889, 893, 894, 956, 1054, 1137, 1145, 1146, 1169, 1204, 1262], "access": [37, 48, 49, 50, 51, 135, 139, 141, 143, 145, 146, 147, 148, 172, 179, 216, 246, 247, 260, 313, 640, 676, 801, 850, 863, 889, 894, 1191, 1292], "accord": [246, 313, 581, 719, 720, 722, 723, 765, 766, 778, 987, 1139, 1262], "accordingli": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142], "account": [36, 123, 132, 145, 313, 418, 443, 445, 446, 778, 1000, 1028, 1030, 1031, 1262], "accumul": [714, 715, 728, 752], "acg": 26, "achiev": [223, 238, 299, 313, 536, 648, 778, 1118, 1199, 1262], "aco": 1282, "acosd": 1282, "across": [36, 47, 132, 184, 205, 225, 227, 232, 253, 263, 313, 391, 466, 548, 697, 699, 714, 715, 717, 742, 744, 747, 762, 778, 805, 844, 889, 1048, 1262], "action": [35, 313], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 499, 639, 1082, 1190], "actual": [36, 119, 159, 163, 248, 313, 1171, 1262, 1284, 1291], "ad": [34, 36, 119, 134, 204, 260, 270, 275, 277, 282, 287, 288, 313, 328, 450, 542, 679, 714, 715, 757, 778, 817, 850, 858, 861, 862, 889, 895, 1035, 1241, 1246, 1262], "adbc": [34, 131, 132, 313], "adbc_driver_manag": 151, "adbc_ingest": [34, 313], "add": [35, 36, 130, 192, 204, 223, 287, 288, 289, 290, 313, 316, 389, 560, 561, 562, 563, 581, 679, 724, 728, 768, 778, 817, 821, 861, 862, 863, 864, 865, 889, 1034, 1262, 1267], "add_calendar_dai": 724, "add_calendar_month": 724, "add_calendar_year": 724, "add_chart": [36, 313], "add_dai": 724, "add_format": [36, 313], "add_hour": 724, "add_milli": 724, "add_second": 724, "add_seri": [36, 313], "add_week": 724, "add_worksheet": [36, 313], "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 187, 191, 203, 221, 236, 251, 252, 259, 272, 279, 287, 288, 292, 313, 322, 405, 447, 450, 574, 627, 631, 638, 639, 642, 651, 652, 676, 679, 704, 707, 708, 709, 726, 756, 757, 760, 774, 778, 810, 816, 842, 843, 849, 856, 861, 862, 866, 889, 895, 975, 983, 1035, 1182, 1189, 1190, 1193, 1202, 1203, 1244, 1262, 1272, 1289], "addition": [55, 246, 313, 895], "address": 639, "adjac": [36, 313], "adjust": [443, 445, 446, 624, 778, 1028, 1030, 1031, 1176, 1262], "adl": [133, 144, 145], "adlf": 145, "advanc": [36, 238, 313, 362, 527, 557, 560, 562, 564, 565, 937, 1110, 1292], "advantag": [36, 168, 237, 313], "advis": [36, 46, 85, 313], "aedt": 721, "aeiuo": [642, 1193], "af1": 47, "af2": 47, "af3": 47, "affect": [34, 152, 153, 154, 155, 313], "afm": 145, "afoo": [863, 889], "after": [36, 55, 119, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 175, 192, 276, 279, 313, 372, 373, 447, 574, 584, 675, 686, 687, 778, 794, 854, 856, 889, 946, 1034, 1141, 1226, 1247, 1262, 1277], "afterward": [46, 768], "ag": [230, 313, 832, 889, 1290], "again": [536, 778], "against": [34, 93, 129, 131, 195, 260, 313, 499, 642, 757, 813, 850, 889, 1082, 1193, 1271, 1289, 1291, 1292], "agg": [203, 204, 238, 245, 313, 323, 373, 453, 455, 460, 463, 535, 536, 574, 626, 627, 687, 694, 719, 722, 740, 778, 799, 800, 809, 816, 817, 836, 840, 847, 889, 895], "agg_group": [731, 778], "agg_list": [535, 778], "aggreg": [129, 130, 133, 141, 197, 203, 204, 224, 226, 228, 231, 234, 238, 239, 240, 245, 261, 262, 281, 284, 292, 293, 295, 297, 313, 323, 453, 469, 535, 536, 574, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 696, 697, 698, 699, 714, 715, 716, 717, 728, 733, 741, 742, 744, 746, 747, 752, 761, 762, 778, 817, 827, 828, 829, 830, 833, 834, 837, 840, 851, 852, 859, 866, 867, 869, 871, 889, 893, 1051, 1151, 1152, 1153, 1155, 1158, 1159, 1160, 1262, 1278, 1280, 1282, 1288], "aggregate_funct": [238, 313, 895], "aho": [632, 641, 653, 1183, 1192, 1204], "aiosqlit": 131, "alchemy_conn": 131, "algorithm": [174, 313, 329, 632, 641, 653, 700, 778, 793, 889, 1183, 1192, 1204], "alia": [1, 12, 47, 49, 51, 83, 179, 204, 222, 238, 245, 279, 287, 290, 313, 316, 322, 326, 366, 367, 368, 369, 371, 372, 383, 384, 385, 386, 387, 389, 392, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 434, 435, 436, 437, 438, 441, 442, 455, 457, 462, 464, 470, 473, 476, 479, 487, 489, 511, 523, 529, 534, 536, 540, 542, 544, 546, 550, 553, 555, 557, 568, 569, 573, 575, 579, 581, 584, 586, 614, 616, 631, 632, 633, 634, 636, 638, 639, 641, 642, 643, 647, 648, 653, 654, 655, 656, 657, 658, 659, 663, 664, 666, 676, 677, 678, 680, 685, 686, 688, 694, 695, 701, 702, 703, 707, 708, 709, 719, 722, 724, 725, 728, 729, 734, 737, 739, 740, 752, 760, 765, 768, 778, 817, 819, 826, 840, 856, 861, 865, 889, 968, 975, 976, 979, 982, 983, 984, 985, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1072, 1139, 1144, 1189, 1190, 1208, 1209, 1262], "alias": [260, 313, 542, 850, 889], "alic": [129, 1290], "align": [10, 15, 16, 36, 47, 55, 313, 1290], "align_fram": 55, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 173, 174, 176, 183, 185, 187, 194, 206, 211, 213, 215, 216, 217, 218, 221, 222, 227, 229, 233, 234, 238, 241, 246, 247, 248, 252, 258, 259, 263, 264, 268, 270, 271, 275, 278, 280, 281, 282, 283, 288, 290, 313, 316, 326, 328, 350, 365, 373, 382, 388, 394, 395, 396, 397, 447, 452, 458, 465, 466, 469, 471, 475, 478, 482, 483, 488, 498, 499, 506, 524, 527, 535, 554, 557, 558, 560, 561, 562, 563, 564, 565, 572, 584, 589, 591, 595, 619, 625, 627, 633, 639, 640, 643, 646, 652, 660, 661, 662, 666, 687, 697, 706, 714, 715, 716, 717, 726, 728, 733, 734, 737, 744, 752, 760, 761, 762, 768, 774, 778, 784, 790, 793, 796, 799, 800, 804, 806, 807, 809, 812, 821, 827, 831, 836, 843, 847, 848, 849, 855, 857, 858, 862, 863, 865, 889, 895, 925, 967, 969, 972, 973, 974, 975, 1049, 1055, 1067, 1072, 1081, 1082, 1089, 1107, 1110, 1141, 1146, 1151, 1177, 1184, 1190, 1191, 1194, 1197, 1203, 1211, 1212, 1213, 1217, 1234, 1243, 1262, 1266, 1267, 1272, 1274, 1279, 1280, 1284, 1288, 1289, 1291, 1292], "all_compat": 1274, "all_data": 1289, "all_horizont": [187, 313, 696, 807, 889], "all_stat": 30, "alloc": [129, 130, 190, 241, 313, 778, 893, 1027, 1262], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 172, 216, 219, 221, 246, 247, 249, 271, 272, 275, 278, 291, 313, 418, 424, 427, 515, 535, 536, 542, 586, 615, 665, 667, 668, 778, 821, 822, 827, 831, 855, 863, 889, 893, 895, 1000, 1006, 1009, 1098, 1118, 1143, 1163, 1216, 1218, 1219, 1243, 1244, 1262, 1284, 1292], "allow_alias": 542, "allow_chunk": [159, 163], "allow_copi": [117, 172, 271, 313, 1243, 1262], "allow_dupl": [581, 778, 1139, 1262], "allow_infin": [159, 163], "allow_nul": [156, 159, 163, 1292], "allow_object": 738, "allow_parallel": [219, 313, 821, 822, 889], "allow_pyarrow_filt": 149, "allow_time_zon": [159, 160, 163], "allowed_dtyp": [159, 160, 163, 1292], "almost": [54, 223, 299, 313, 665, 667, 668, 800, 889, 1118, 1216, 1218, 1219, 1262], "alpha": [443, 445, 446, 778, 809, 836, 847, 889, 895, 1028, 1030, 1031, 1262], "alpha_i": [444, 778, 1029, 1262], "alphabet": [895, 1292], "alphanumer": [673, 895, 1224], "alreadi": [34, 35, 92, 270, 313, 388, 499, 692, 778, 847, 889, 967, 1082, 1251, 1262], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 143, 158, 159, 162, 163, 168, 188, 203, 204, 230, 234, 238, 245, 247, 251, 259, 270, 282, 287, 290, 313, 384, 387, 396, 418, 421, 453, 473, 536, 542, 584, 588, 589, 627, 651, 652, 653, 660, 661, 676, 706, 714, 715, 718, 721, 728, 730, 752, 768, 777, 778, 784, 816, 817, 832, 840, 842, 849, 858, 861, 863, 865, 889, 895, 974, 1003, 1054, 1141, 1145, 1146, 1184, 1202, 1203, 1204, 1211, 1262, 1266, 1272, 1274, 1277, 1284, 1287, 1289, 1290], "alt": [313, 316, 1262, 1267], "altair": [151, 313, 316, 1262, 1267], "altern": [36, 313, 774, 1281], "although": [260, 313, 850, 889], "alwai": [13, 33, 35, 42, 63, 65, 129, 175, 195, 203, 218, 219, 223, 276, 299, 313, 372, 373, 535, 545, 665, 686, 687, 768, 778, 794, 813, 821, 822, 827, 854, 889, 895, 946, 1118, 1216, 1247, 1262, 1271, 1272, 1289, 1292], "am": [654, 1205], "amarillo": 1284, "ambigu": [421, 422, 435, 665, 668, 721, 1003, 1004, 1017, 1216, 1219], "america": 722, "amount": [46, 64, 85, 139, 143, 146, 147, 536, 724, 778, 1279], "amsterdam": [421, 1003], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 145, 146, 147, 148, 157, 159, 163, 176, 177, 178, 179, 185, 190, 193, 197, 199, 204, 215, 216, 217, 219, 223, 234, 238, 243, 245, 246, 250, 260, 265, 271, 275, 277, 281, 282, 287, 290, 299, 313, 316, 324, 346, 349, 361, 367, 384, 385, 386, 387, 388, 389, 396, 400, 401, 418, 421, 424, 438, 444, 452, 453, 459, 460, 463, 496, 499, 502, 504, 526, 527, 535, 536, 546, 548, 557, 558, 579, 580, 581, 589, 590, 594, 595, 596, 598, 600, 602, 604, 607, 609, 611, 630, 631, 634, 639, 642, 645, 665, 667, 668, 670, 672, 688, 696, 701, 705, 719, 720, 722, 723, 725, 727, 730, 734, 735, 736, 737, 738, 750, 752, 753, 756, 760, 765, 766, 768, 769, 774, 778, 796, 797, 798, 800, 804, 806, 809, 813, 817, 822, 827, 836, 840, 841, 847, 850, 858, 861, 863, 865, 873, 889, 893, 894, 895, 921, 924, 936, 941, 955, 957, 963, 964, 965, 966, 967, 974, 978, 1006, 1020, 1027, 1029, 1068, 1079, 1082, 1085, 1087, 1109, 1118, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1164, 1166, 1181, 1182, 1185, 1190, 1193, 1196, 1216, 1218, 1219, 1221, 1223, 1243, 1262, 1280, 1281, 1284, 1288, 1289, 1291], "ana": [654, 1205], "anan": [654, 1205], "ananab": 1284, "and_": 778, "ang": 1284, "angl": [702, 703], "ani": [4, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 173, 175, 181, 187, 192, 194, 195, 197, 199, 214, 216, 217, 218, 219, 220, 223, 227, 237, 246, 247, 248, 260, 263, 266, 267, 270, 271, 272, 275, 276, 278, 281, 282, 290, 313, 316, 317, 322, 325, 326, 350, 372, 373, 374, 388, 389, 422, 423, 441, 442, 452, 453, 457, 460, 462, 464, 468, 477, 487, 494, 499, 506, 534, 535, 536, 542, 550, 553, 555, 557, 558, 560, 562, 564, 565, 568, 569, 573, 578, 581, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 620, 630, 632, 644, 661, 662, 663, 664, 665, 667, 668, 670, 672, 680, 686, 687, 688, 695, 696, 697, 699, 709, 710, 711, 738, 740, 754, 755, 768, 778, 794, 799, 800, 807, 809, 812, 813, 821, 822, 823, 835, 850, 854, 855, 858, 865, 889, 893, 895, 897, 899, 902, 925, 946, 951, 967, 968, 1004, 1005, 1024, 1025, 1034, 1037, 1041, 1043, 1045, 1050, 1059, 1068, 1070, 1077, 1082, 1089, 1117, 1118, 1129, 1130, 1139, 1145, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1164, 1165, 1181, 1183, 1195, 1216, 1218, 1219, 1221, 1223, 1241, 1242, 1243, 1244, 1246, 1247, 1262, 1267, 1289, 1292], "anna": [230, 313, 832, 889], "anoth": [86, 158, 176, 184, 189, 203, 219, 253, 313, 388, 391, 398, 472, 502, 540, 544, 548, 588, 597, 599, 601, 603, 605, 608, 610, 612, 642, 778, 796, 805, 816, 822, 844, 863, 889, 967, 976, 1026, 1034, 1053, 1085, 1145, 1146, 1193, 1262, 1283, 1284], "anti": [218, 313, 821, 873, 889, 1164, 1166, 1262, 1278], "any_horizont": 698, "anyth": [35, 246, 313], "anywher": [369, 371, 665, 667, 668, 1216, 1218, 1219], "ap": 1284, "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 171, 313, 898], "apaya": [666, 1217], "api": [0, 117, 139, 141, 143, 146, 147, 148, 149, 172, 223, 299, 313, 536, 740, 778, 873, 1118, 1262, 1288], "apia": [397, 975], "app": [659, 1210], "appear": [36, 59, 119, 154, 155, 313, 690, 778, 895, 1249, 1262, 1290], "append": [34, 35, 159, 192, 218, 219, 220, 313, 585, 768, 778, 821, 822, 823, 889, 1034, 1262], "appl": [180, 208, 218, 242, 243, 266, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 313, 373, 591, 636, 659, 687, 778, 821, 838, 868, 869, 871, 872, 874, 875, 876, 877, 878, 879, 880, 889, 1187, 1210, 1278, 1284], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 183, 197, 220, 223, 237, 259, 260, 270, 299, 313, 338, 399, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 420, 423, 425, 436, 437, 439, 445, 446, 535, 536, 578, 596, 597, 598, 599, 602, 603, 609, 610, 627, 651, 652, 665, 667, 668, 672, 704, 714, 715, 728, 739, 740, 752, 757, 768, 778, 804, 818, 823, 826, 827, 835, 849, 850, 873, 889, 956, 977, 980, 981, 982, 985, 986, 987, 991, 992, 993, 995, 996, 999, 1001, 1002, 1005, 1007, 1018, 1019, 1021, 1030, 1031, 1118, 1152, 1153, 1155, 1159, 1202, 1203, 1216, 1218, 1219, 1223, 1262, 1271], "applic": [271, 313, 536, 778], "appropri": [36, 149, 195, 271, 313, 584, 778, 813, 889, 1141, 1262], "approx": [329, 778], "approx_n_uniqu": [313, 778, 889], "approxim": [41, 174, 313, 329, 444, 700, 778, 793, 889, 1029, 1262, 1283, 1292], "april": [424, 427, 1006, 1009, 1284, 1285], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 172, 175, 181, 183, 187, 190, 193, 195, 196, 197, 202, 203, 204, 216, 218, 219, 221, 223, 229, 230, 236, 238, 245, 246, 247, 248, 251, 252, 254, 256, 259, 266, 270, 271, 272, 275, 276, 280, 282, 283, 287, 288, 291, 292, 313, 325, 327, 341, 357, 362, 372, 373, 378, 384, 386, 387, 396, 422, 435, 440, 442, 443, 444, 445, 446, 451, 453, 473, 475, 477, 478, 480, 481, 482, 483, 485, 490, 520, 527, 535, 569, 574, 581, 584, 587, 588, 589, 590, 594, 597, 599, 601, 603, 605, 606, 608, 610, 612, 618, 621, 624, 626, 627, 632, 640, 643, 645, 646, 649, 650, 651, 652, 653, 655, 666, 668, 670, 675, 679, 681, 686, 687, 696, 697, 699, 704, 707, 708, 709, 710, 717, 719, 720, 722, 723, 742, 744, 747, 756, 760, 762, 765, 766, 768, 770, 771, 773, 777, 778, 779, 780, 783, 784, 785, 786, 787, 790, 794, 799, 800, 804, 807, 811, 813, 816, 817, 818, 821, 822, 826, 827, 831, 832, 836, 838, 840, 842, 843, 845, 846, 849, 854, 857, 858, 861, 862, 863, 866, 889, 893, 895, 902, 903, 916, 932, 937, 946, 949, 956, 965, 966, 974, 1004, 1017, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1036, 1038, 1039, 1054, 1057, 1059, 1060, 1062, 1063, 1064, 1065, 1069, 1073, 1103, 1110, 1130, 1139, 1141, 1145, 1146, 1147, 1157, 1169, 1173, 1176, 1183, 1191, 1194, 1196, 1200, 1201, 1202, 1203, 1206, 1217, 1219, 1221, 1226, 1233, 1241, 1243, 1244, 1247, 1254, 1256, 1258, 1262, 1263, 1266, 1268, 1269, 1270, 1272, 1274, 1277, 1281, 1289, 1292], "arbitrari": [74, 199, 313, 391, 778, 805, 889, 895], "arbitrarili": [223, 313], "arcco": [778, 1262], "arccosh": [778, 1262], "arcsin": [778, 1262], "arcsinh": [778, 1262], "arctan": [702, 703, 778, 1262], "arctan2": 703, "arctanh": [778, 1262], "aren": [33, 42, 313, 889], "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 195, 237, 313, 338, 578, 704, 729, 778, 813, 835, 889, 893, 1118, 1262, 1275], "arg_max": [778, 1262], "arg_min": [778, 1262], "arg_sort": [778, 1262], "arg_tru": [705, 778, 1262], "arg_uniqu": [778, 1262], "arg_wher": [339, 778], "argmax": [535, 778], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 181, 185, 191, 203, 204, 219, 236, 237, 245, 251, 252, 259, 272, 279, 283, 287, 288, 292, 313, 422, 435, 447, 453, 473, 535, 574, 578, 594, 627, 660, 661, 662, 679, 696, 702, 703, 704, 707, 708, 709, 711, 726, 756, 760, 768, 774, 778, 806, 810, 816, 817, 822, 835, 840, 842, 843, 849, 856, 861, 862, 866, 889, 893, 895, 1004, 1017, 1054, 1211, 1212, 1213, 1244, 1262, 1283, 1284], "aris": 131, "arithmet": [197, 313], "arm": 151, "arm64": 151, "around": [33, 42, 313, 889], "arr": [271, 313, 770, 1243, 1254, 1262], "arr_bar": 1280, "arr_foo": 1280, "arrai": [116, 120, 129, 130, 133, 141, 170, 190, 191, 265, 270, 271, 272, 313, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 384, 385, 386, 387, 494, 509, 510, 511, 512, 514, 523, 524, 526, 529, 531, 535, 590, 596, 598, 600, 602, 604, 607, 609, 611, 617, 725, 757, 778, 810, 889, 897, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 963, 964, 965, 966, 971, 1027, 1077, 1092, 1093, 1094, 1095, 1097, 1105, 1106, 1107, 1109, 1112, 1114, 1115, 1147, 1152, 1153, 1155, 1158, 1159, 1160, 1167, 1171, 1237, 1241, 1243, 1244, 1262, 1282, 1288, 1291], "array_agg": 1282, "array_contain": 1282, "array_get": 1282, "array_length": 1282, "array_low": 1282, "array_mean": 1282, "array_revers": 1282, "array_sum": 1282, "array_to_str": 1282, "array_uniqu": 1282, "array_upp": 1282, "arraylik": [971, 1262], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 171, 216, 247, 248, 265, 267, 271, 313, 889, 898, 1237, 1243, 1262], "arrowinvaliderror": [35, 313], "as_": [1262, 1267], "as_dict": [130, 236, 313], "as_expr": 895, "as_seri": [176, 266, 313, 796, 889, 895], "asarrai": [170, 897], "ascend": [204, 245, 313, 594, 778, 817, 840, 889], "ascii": [7, 20, 632, 641, 643, 647, 648, 653, 655, 666, 675, 895, 1183, 1192, 1194, 1198, 1199, 1204, 1206, 1217, 1226], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [632, 641, 653, 1183, 1192, 1204], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1292, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 895, "ascii_uppercas": [281, 313], "asd": [633, 639, 1184, 1190], "asia": [123, 895, 980, 981, 1007], "asin": 1282, "asind": 1282, "asof": [219, 313, 822, 889], "asof_join": [219, 313], "asofjoinstrategi": [219, 313, 822, 889], "assert": [152, 153, 154, 155, 159, 163, 245, 313, 790, 895], "assert_frame_equ": [153, 154, 189, 313, 1292], "assert_frame_not_equ": [152, 155], "assert_series_equ": [152, 155, 1026, 1262, 1292], "assert_series_not_equ": [153, 154], "assert_someth": 157, "assertionerror": [152, 153, 154, 155], "assign": [157, 204, 298, 313, 362, 527, 574, 584, 657, 658, 778, 817, 872, 889, 937, 1110, 1141, 1208, 1209, 1262], "associ": [34, 36, 47, 132, 134, 158, 161, 248, 313, 894, 1273, 1275], "assum": [248, 313, 827, 873, 889, 1284], "assumpt": [535, 778], "async": [131, 800, 889], "async_engin": 131, "asynchron": [54, 131, 800, 889], "asyncio": [54, 131, 800, 889], "asyncresult": [54, 800, 889], "ata": 26, "atan": 1282, "atan2": [702, 703, 1282], "atan2_ab": 1286, "atan2d": [703, 1282], "atan2d_ab": 1286, "atand": 1282, "atg": 26, "atgataaaggag": 26, "atol": [152, 153, 154, 155], "attain": [627, 778], "attempt": [1, 391, 778, 805, 889], "attr": [313, 316, 1262, 1267], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 313, 316, 770, 771, 773, 774, 779, 780, 783, 785, 786, 787, 889, 1254, 1256, 1258, 1262, 1263, 1267, 1268, 1269, 1270], "attributeerror": 1, "audi": [266, 313, 591, 778], "australia": 721, "authent": [35, 133, 141, 143, 144, 145, 146, 148, 313], "author": 1, "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 277, 313, 889, 1292], "auto_structifi": [251, 287, 313, 842, 861, 889], "autofilt": [36, 313], "autofit": [36, 313], "autogener": [129, 130, 134, 140, 143], "automat": [8, 33, 42, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 141, 143, 146, 147, 159, 163, 165, 251, 260, 287, 313, 535, 589, 660, 661, 662, 757, 778, 842, 850, 861, 889, 893, 1145, 1146, 1211, 1212, 1213, 1246, 1262, 1272, 1274, 1277, 1289], "autumn": [651, 652], "avail": [36, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 238, 260, 312, 313, 584, 757, 770, 771, 773, 777, 778, 779, 780, 783, 784, 785, 786, 787, 790, 850, 887, 888, 889, 893, 895, 969, 1141, 1254, 1256, 1258, 1262, 1263, 1266, 1268, 1269, 1270], "available_timezon": [62, 895], "averag": [36, 313, 443, 444, 445, 446, 584, 778, 1028, 1029, 1030, 1031, 1141, 1262, 1279], "avg": 1282, "avocado": 1284, "avoid": [133, 159, 163, 195, 247, 313, 324, 778, 813, 889], "avro": [31, 127, 313, 790], "avrocompress": [31, 313], "aw": [133, 139, 141, 143, 144, 146, 147, 148], "awai": 1283, "await": [54, 131, 800, 884, 889], "awar": [10, 131, 216, 247, 248, 267, 313, 444, 632, 641, 653, 668, 778, 889, 1029, 1183, 1192, 1204, 1219, 1262], "aws_access_key_id": [35, 133, 144, 148, 313], "aws_region": [35, 144, 148, 313], "aws_secret_access_kei": [35, 133, 144, 148, 313], "axi": [229, 280, 313, 702, 703, 831, 857, 889], "aya": [655, 1206, 1217], "az": [133, 144, 145], "azur": [35, 133, 139, 141, 143, 144, 145, 146, 147, 148, 313], "azure_storage_account_kei": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 172, 173, 174, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 213, 214, 215, 216, 217, 218, 221, 222, 224, 226, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 256, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 322, 324, 325, 327, 328, 338, 340, 345, 350, 365, 366, 367, 368, 369, 370, 371, 373, 374, 382, 389, 393, 424, 427, 447, 449, 451, 452, 453, 455, 458, 465, 466, 469, 471, 472, 473, 475, 478, 480, 481, 482, 483, 488, 494, 499, 506, 516, 517, 518, 519, 535, 536, 541, 548, 554, 557, 558, 559, 560, 561, 562, 563, 571, 572, 574, 578, 581, 584, 588, 589, 591, 593, 619, 625, 627, 634, 637, 642, 645, 651, 652, 676, 677, 687, 690, 694, 696, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 725, 726, 727, 728, 729, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 754, 755, 757, 759, 760, 761, 762, 763, 767, 774, 778, 793, 794, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 889, 895, 901, 904, 925, 940, 941, 942, 943, 944, 945, 949, 950, 951, 968, 971, 1006, 1009, 1023, 1026, 1027, 1034, 1037, 1054, 1059, 1077, 1099, 1100, 1101, 1102, 1139, 1144, 1185, 1188, 1193, 1196, 1202, 1203, 1227, 1229, 1230, 1232, 1244, 1249, 1262, 1272, 1274, 1275, 1277, 1278, 1279, 1280, 1284, 1285, 1286, 1289], "b1": [48, 50], "b2": [48, 50], "b345": [36, 313], "b4": [36, 313], "b_b": [260, 313], "b_btm_by_a": [373, 778], "b_btm_by_b": [373, 778], "b_by_ca": [373, 687, 778], "b_by_cb": [373, 687, 778], "b_is_not_nan": [481, 778], "b_isnan": [480, 778], "b_isnul": [483, 778], "b_not_nul": [482, 778], "b_revers": [558, 562, 591, 778], "b_suffix": 563, "b_sum": [292, 866], "b_top_by_a": [687, 778], "b_top_by_b": [687, 778], "ba": [391, 447, 548, 659, 726, 778, 895], "back": [4, 47, 148, 192, 204, 253, 271, 272, 313, 548, 574, 778, 799, 817, 844, 889, 1034, 1244, 1262], "backend": [35, 131, 132, 133, 144, 145, 313, 316, 1262, 1267], "background": [313, 317, 799, 888, 889], "backward": [41, 45, 194, 219, 313, 365, 396, 416, 452, 778, 812, 822, 889, 974, 998, 1037, 1262], "backward_fil": [458, 618, 778], "bad": [651, 652, 1202, 1203], "balanc": [162, 164, 1292], "ballon_dor": [638, 640, 1189, 1191], "banana": [180, 266, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 373, 591, 636, 659, 687, 778, 869, 871, 874, 875, 876, 877, 878, 879, 880, 1284], "banded_column": [36, 313], "banded_row": [36, 313], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 206, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 240, 242, 243, 246, 249, 250, 251, 253, 258, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 278, 279, 284, 285, 286, 291, 313, 316, 375, 391, 470, 540, 542, 544, 545, 546, 547, 548, 549, 550, 624, 633, 635, 637, 639, 640, 654, 656, 658, 663, 664, 700, 710, 711, 712, 727, 732, 733, 736, 737, 741, 743, 745, 746, 748, 749, 756, 759, 763, 767, 768, 774, 778, 796, 801, 802, 806, 807, 808, 813, 819, 820, 821, 834, 838, 841, 842, 855, 856, 860, 889, 894, 895, 948, 1089, 1176, 1184, 1186, 1188, 1190, 1191, 1205, 1209, 1214, 1215, 1262, 1276, 1278, 1279, 1280, 1281, 1284, 1287], "bar2": 1284, "bar22": [197, 313], "bar_": 656, "bar_3": [268, 313], "bar_4": [268, 313], "bar_a": [238, 313], "bar_at_2": 1280, "bar_avg": 1279, "bar_b": [238, 313], "bar_color": [36, 313], "bar_max": 1279, "bar_median": 1279, "bar_min": 1279, "bar_negative_border_color_sam": [36, 313], "bar_negative_color_sam": [36, 313], "bar_std": 1279, "bar_sum": 1279, "bar_var": 1279, "bare": [542, 895], "base": [36, 60, 102, 104, 161, 187, 195, 204, 220, 245, 313, 397, 405, 440, 443, 444, 445, 446, 453, 468, 472, 530, 531, 535, 536, 579, 581, 589, 594, 597, 599, 601, 603, 605, 608, 610, 612, 670, 778, 807, 813, 817, 823, 840, 889, 895, 975, 983, 1023, 1028, 1029, 1030, 1031, 1050, 1053, 1113, 1114, 1118, 1137, 1139, 1145, 1146, 1221, 1253, 1262, 1278, 1283, 1292], "base64": [367, 368, 634, 635, 941, 942, 1185, 1186], "base_nam": [277, 313], "base_utc_offset": [405, 983], "baseexcept": 1289, "basi": [36, 134, 159, 313], "basic": [36, 170, 313, 897, 1292], "basic_chart": [36, 313], "batch": [38, 53, 54, 125, 130, 131, 137, 139, 147, 149, 247, 275, 313, 799, 800, 827, 889], "batch_siz": [33, 42, 129, 130, 131, 139, 147, 149, 275, 313, 889], "batchedcsvread": 130, "baz": [199, 209, 210, 279, 313, 640, 656, 658, 727, 736, 749, 774, 820, 856, 889, 895, 1191, 1209, 1276, 1281, 1284], "bb": [895, 969, 1262, 1284, 1289], "bbb": [1, 36, 313, 676, 678, 895], "bc": [642, 652, 761, 1193], "bcbc45": 1284, "bea": 12, "bear": 895, "beauti": 12, "becaus": [139, 147, 190, 204, 221, 223, 281, 299, 313, 457, 499, 778, 817, 873, 889, 1027, 1082, 1118, 1262], "becom": [161, 312, 887, 888], "bed3": [36, 313], "been": [5, 30, 36, 166, 172, 294, 313, 459, 536, 551, 584, 778, 868, 1141, 1262], "beetl": [266, 313, 591, 778], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 192, 204, 219, 260, 270, 275, 279, 313, 386, 387, 388, 535, 574, 575, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 637, 675, 681, 708, 754, 755, 778, 817, 819, 822, 856, 889, 893, 965, 966, 967, 1034, 1134, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1188, 1226, 1233, 1262, 1278], "beforehand": [665, 667, 668, 1216, 1218, 1219], "begin": [12, 36, 313, 443, 445, 446, 638, 666, 778, 1028, 1030, 1031, 1189, 1217, 1262], "behav": [195, 313, 453, 536, 661, 662, 778, 813, 889], "behavior": [41, 45, 187, 195, 218, 219, 313, 349, 459, 502, 504, 637, 727, 736, 778, 807, 813, 821, 822, 889, 924, 1085, 1087, 1188], "behaviour": [10, 47, 55, 187, 260, 313, 631, 638, 639, 642, 651, 652, 688, 757, 778, 807, 850, 889, 1182, 1189, 1190, 1193, 1202, 1203], "behind": 165, "being": [13, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 134, 140, 141, 143, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 176, 191, 220, 260, 268, 270, 275, 281, 282, 313, 316, 317, 388, 389, 422, 468, 536, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 637, 706, 725, 754, 755, 778, 796, 799, 800, 809, 810, 823, 850, 858, 889, 951, 967, 968, 1004, 1050, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1188, 1238, 1241, 1246, 1262, 1267, 1292], "belong": [1, 204, 313, 817, 889], "below": [19, 35, 133, 134, 144, 145, 187, 195, 238, 313, 452, 643, 666, 719, 720, 722, 723, 765, 766, 768, 774, 778, 807, 813, 889, 1194, 1217], "benchmark": 129, "best": [223, 299, 313, 536, 778, 1118, 1262], "better": [223, 270, 271, 299, 313, 536, 648, 778, 795, 873, 889, 1164, 1166, 1199, 1262], "between": [24, 55, 87, 156, 157, 159, 163, 173, 181, 220, 240, 247, 305, 313, 350, 374, 392, 393, 473, 497, 506, 516, 517, 518, 519, 575, 581, 582, 604, 605, 630, 644, 702, 703, 706, 710, 712, 751, 754, 755, 778, 823, 837, 879, 889, 925, 947, 950, 970, 971, 1054, 1080, 1089, 1099, 1100, 1101, 1102, 1134, 1139, 1140, 1156, 1181, 1195, 1262, 1286], "between_ab": [473, 778], "beyond": [673, 1224], "bia": [445, 446, 485, 606, 624, 778, 1030, 1031, 1069, 1157, 1176, 1262], "bias": [485, 624, 778, 1069, 1176, 1262], "big": 130, "big_fil": 130, "bigidx": 124, "bigqueri": 132, "bin": [389, 468, 581, 670, 695, 771, 778, 968, 1050, 1139, 1221, 1256, 1262, 1267], "bin_count": [468, 778, 1050, 1262], "bin_i": [695, 778], "bin_x": [695, 778], "bin_xor_xi": [695, 778], "binari": [37, 131, 184, 253, 313, 366, 367, 368, 369, 370, 371, 391, 548, 634, 778, 805, 844, 889, 895, 940, 941, 943, 944, 945, 1185], "binary_str": [695, 778], "bind": 134, "birthdai": 129, "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 586, 631, 778, 1143, 1182, 1262, 1284], "bit_length": 1282, "bitmap": [190, 313, 1027, 1262], "bitwis": [326, 573, 695, 696, 697, 698, 699, 778], "bla": [633, 639, 1184, 1190], "black": [223, 313, 366, 367, 368, 369, 371], "blindli": [499, 1082], "block": [20, 54, 203, 278, 313, 768, 800, 816, 838, 855, 864, 865, 873, 889, 1164, 1166, 1262], "blue": [46, 84, 85, 366, 367, 368, 369, 371, 692, 778, 1251, 1262], "bob": [129, 230, 313, 832, 889, 1290], "bodi": [36, 313, 317], "bold": [36, 313], "bom": [33, 42, 313, 889], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 175, 176, 177, 178, 183, 185, 189, 194, 195, 196, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 227, 236, 238, 246, 247, 248, 249, 254, 257, 259, 260, 263, 266, 268, 271, 272, 276, 277, 278, 279, 282, 283, 285, 287, 295, 297, 300, 303, 313, 324, 325, 326, 327, 328, 338, 341, 342, 345, 349, 350, 358, 363, 366, 367, 369, 371, 373, 374, 383, 384, 385, 386, 387, 388, 389, 396, 408, 423, 440, 441, 442, 443, 445, 446, 462, 464, 465, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 490, 491, 495, 499, 502, 504, 506, 515, 522, 528, 534, 535, 536, 540, 541, 542, 543, 544, 545, 549, 568, 569, 571, 573, 576, 577, 581, 584, 586, 595, 596, 598, 600, 602, 604, 606, 607, 609, 611, 615, 617, 619, 624, 626, 627, 630, 631, 632, 633, 634, 636, 641, 642, 644, 651, 652, 653, 656, 657, 659, 665, 667, 668, 670, 672, 676, 678, 687, 689, 692, 695, 696, 697, 698, 699, 701, 704, 705, 706, 709, 710, 713, 714, 719, 720, 722, 723, 734, 735, 738, 740, 750, 753, 757, 760, 765, 766, 768, 769, 778, 794, 796, 797, 799, 800, 804, 806, 809, 812, 813, 816, 817, 821, 822, 827, 831, 836, 845, 847, 849, 850, 854, 855, 856, 857, 858, 861, 869, 871, 874, 877, 889, 893, 895, 897, 902, 903, 913, 916, 917, 920, 924, 925, 933, 938, 940, 941, 943, 945, 947, 949, 951, 955, 962, 963, 964, 965, 966, 967, 968, 974, 986, 1005, 1023, 1025, 1026, 1028, 1030, 1031, 1038, 1039, 1046, 1047, 1050, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1073, 1074, 1078, 1082, 1085, 1087, 1089, 1098, 1105, 1111, 1118, 1130, 1132, 1135, 1136, 1139, 1141, 1142, 1143, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1171, 1176, 1178, 1181, 1182, 1183, 1184, 1185, 1187, 1192, 1193, 1195, 1202, 1203, 1204, 1207, 1208, 1210, 1216, 1218, 1219, 1221, 1223, 1238, 1243, 1244, 1248, 1251, 1262, 1271, 1272, 1274, 1280, 1284, 1289], "boolean": [47, 159, 175, 195, 197, 259, 276, 313, 325, 326, 327, 341, 342, 345, 366, 369, 371, 373, 408, 453, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 495, 571, 573, 576, 577, 627, 645, 687, 694, 695, 704, 705, 760, 768, 778, 794, 813, 849, 854, 889, 895, 902, 903, 914, 916, 917, 920, 940, 986, 1038, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1073, 1074, 1078, 1132, 1135, 1136, 1166, 1182, 1253, 1262, 1281], "border": 20, "both": [10, 25, 33, 42, 46, 84, 85, 131, 148, 179, 204, 218, 219, 220, 230, 245, 246, 272, 282, 313, 328, 378, 389, 447, 473, 581, 594, 597, 599, 601, 603, 605, 608, 610, 612, 655, 719, 720, 722, 723, 765, 766, 774, 778, 789, 817, 821, 822, 823, 832, 840, 858, 889, 895, 956, 1054, 1206, 1244, 1262, 1289, 1290], "bottom": [175, 313, 373, 778, 794, 889], "bottom_k": [276, 313, 373, 686, 687, 778, 854, 889, 1247, 1262], "bottom_k_bi": [372, 686, 687, 778], "bound": [98, 129, 130, 190, 204, 313, 349, 378, 473, 502, 504, 527, 533, 691, 701, 719, 720, 722, 723, 765, 766, 778, 817, 889, 924, 956, 1027, 1054, 1085, 1087, 1116, 1250, 1262, 1280], "boundari": [204, 313, 378, 468, 673, 778, 817, 889, 956, 1050, 1224, 1262], "box": [20, 223, 313], "box_draw": 20, "branch": [53, 54, 799, 800, 809, 836, 847, 889], "break": [42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 275, 281, 282, 313, 316, 317, 388, 389, 422, 468, 536, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 754, 755, 778, 799, 800, 809, 823, 850, 858, 889, 951, 967, 968, 1004, 1050, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1241, 1246, 1262, 1267], "breakpoint": [389, 468, 581, 778, 968, 1050, 1139, 1262], "breezah": 143, "breviti": 168, "broadcast": [653, 895, 1204], "broader": 895, "brotli": [41, 45, 313, 889], "brussel": [421, 1003], "bst": [401, 405, 421, 979, 983, 1003], "bucket": [35, 133, 144, 145, 148, 313, 422, 435, 468, 778, 1004, 1017, 1050, 1262], "bud": [651, 652, 1202, 1203], "budget": 1271, "buffer": [129, 130, 131, 190, 216, 313, 1027, 1262], "buffer_s": [216, 313], "bug": [535, 536, 778, 827, 873, 889, 1118, 1262], "build": [52, 117, 895, 1292], "built": 87, "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 391, 778, 805, 889], "busi": [396, 706, 974], "business_day_count": [396, 974], "by_alternate_row": 1, "by_dtyp": 895, "by_first_letter_of_column_nam": 48, "by_first_letter_of_column_valu": 48, "by_index": 895, "by_left": [219, 313, 822, 889], "by_nam": 895, "by_pred": [246, 313], "by_right": [219, 313, 822, 889], "bye": 1, "byi": 1284, "bys": [204, 313, 817, 889], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 184, 190, 253, 313, 391, 548, 643, 647, 648, 655, 666, 778, 805, 844, 889, 1027, 1194, 1198, 1199, 1206, 1217, 1262, 1284], "bytesio": [36, 37, 38, 41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 253, 313, 391, 548, 778, 805, 844, 889], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 172, 173, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 195, 197, 200, 201, 202, 203, 204, 206, 208, 209, 217, 218, 221, 222, 224, 226, 228, 231, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 246, 249, 250, 251, 258, 259, 260, 261, 262, 264, 265, 268, 269, 270, 271, 272, 273, 276, 280, 281, 282, 284, 285, 287, 292, 295, 296, 297, 300, 301, 303, 306, 307, 313, 317, 322, 324, 325, 327, 345, 365, 373, 389, 453, 465, 473, 494, 506, 536, 542, 557, 558, 572, 574, 578, 581, 619, 657, 665, 687, 690, 697, 699, 700, 702, 703, 704, 707, 709, 710, 711, 712, 714, 715, 717, 727, 728, 729, 732, 733, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 757, 759, 761, 762, 763, 767, 774, 778, 794, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 813, 816, 817, 821, 825, 834, 836, 838, 839, 841, 842, 847, 848, 849, 850, 854, 857, 858, 861, 863, 866, 869, 870, 871, 874, 875, 877, 880, 881, 889, 893, 895, 950, 968, 1054, 1077, 1139, 1208, 1216, 1230, 1249, 1262, 1272, 1274, 1275, 1277, 1278, 1279, 1280, 1284, 1289], "c00": 895, "c01": 895, "c02": 895, "c03": 895, "c05": 895, "c1": 362, "c123": 1284, "c2": 362, "c20": 895, "c25": 895, "c3": 362, "c40": 895, "c45": 1284, "c4d79b": [36, 313], "c50": 895, "c567": [36, 313], "c60": 895, "c75": 895, "c80": 895, "c8ae6d2b276": [36, 313], "c93": 895, "c95": 895, "c96": 895, "c97": 895, "c98": 895, "c99": 895, "c_btm_by_a": [373, 778], "c_btm_by_b": [373, 778], "c_by_ca": [373, 687, 778], "c_by_cb": [373, 687, 778], "c_c_c": [757, 850, 889], "c_contigu": [271, 313], "c_max": [574, 778], "c_mean_squar": [292, 866], "c_min": [574, 778], "c_top_by_a": [687, 778], "c_top_by_b": [687, 778], "c_total": 1289, "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 665, 667, 668, 672, 778, 789, 799, 800, 809, 836, 847, 889, 949, 1145, 1146, 1216, 1218, 1219, 1223, 1262], "cadi": [238, 313], "cafe": [670, 1221], "caf\u00e9": [647, 648, 895, 1198, 1199], "calamin": 134, "calcul": [36, 41, 45, 47, 183, 204, 261, 284, 313, 392, 443, 444, 445, 446, 485, 497, 516, 523, 529, 533, 606, 624, 629, 691, 693, 710, 712, 754, 755, 759, 767, 778, 804, 817, 851, 859, 889, 969, 970, 1028, 1029, 1030, 1031, 1069, 1080, 1099, 1157, 1176, 1180, 1252, 1262], "calendar": [61, 62, 204, 219, 245, 283, 313, 399, 409, 411, 418, 422, 435, 439, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 977, 987, 992, 1000, 1004, 1017, 1021, 1029, 1262], "calendar_year": [409, 439], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 175, 203, 204, 221, 223, 245, 260, 271, 276, 312, 313, 372, 373, 384, 387, 396, 535, 536, 557, 558, 560, 562, 564, 565, 588, 589, 620, 686, 687, 706, 711, 774, 778, 794, 799, 800, 809, 816, 817, 836, 840, 847, 850, 854, 887, 888, 889, 893, 895, 946, 974, 1118, 1146, 1172, 1243, 1247, 1262, 1272, 1276, 1289], "callabl": [48, 49, 50, 51, 143, 197, 223, 237, 242, 299, 313, 362, 527, 535, 536, 558, 559, 578, 595, 714, 715, 728, 739, 740, 752, 778, 827, 835, 838, 873, 889, 937, 1110, 1118, 1151, 1262], "caller": [132, 230, 313, 527, 827, 832, 873, 889], "cam": [242, 313, 838, 889], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 170, 175, 177, 187, 188, 197, 199, 203, 204, 211, 213, 215, 219, 223, 234, 238, 245, 247, 248, 251, 253, 254, 259, 270, 271, 275, 276, 277, 281, 287, 290, 299, 313, 325, 362, 373, 384, 387, 388, 391, 396, 415, 416, 418, 421, 424, 427, 435, 444, 450, 453, 473, 499, 527, 535, 536, 542, 545, 548, 554, 557, 558, 560, 562, 564, 565, 574, 579, 581, 586, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 617, 619, 624, 627, 632, 640, 646, 651, 652, 653, 660, 661, 662, 665, 676, 687, 704, 706, 718, 721, 728, 730, 734, 735, 740, 757, 768, 774, 777, 778, 789, 794, 795, 799, 800, 805, 807, 809, 817, 822, 840, 842, 844, 845, 847, 849, 850, 854, 861, 864, 865, 889, 895, 897, 937, 967, 974, 997, 998, 1000, 1003, 1004, 1006, 1009, 1017, 1029, 1035, 1054, 1082, 1110, 1118, 1123, 1137, 1139, 1143, 1146, 1164, 1166, 1167, 1170, 1176, 1183, 1184, 1191, 1197, 1202, 1203, 1204, 1211, 1212, 1213, 1216, 1241, 1243, 1262, 1277, 1289], "cancel": [799, 889], "candid": [638, 640, 1189, 1191], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 165, 223, 248, 249, 271, 290, 299, 313, 367, 447, 515, 536, 615, 634, 657, 678, 740, 778, 847, 865, 873, 889, 895, 941, 1098, 1118, 1163, 1185, 1208, 1243, 1262], "capabl": [1, 36, 313], "capac": [190, 257, 313, 1027, 1171, 1262], "capit": [673, 1224, 1284], "captur": [638, 640, 651, 652, 1189, 1191, 1202, 1203], "car": [242, 266, 313, 591, 778, 838, 889], "cardin": [174, 313, 329, 700, 778, 793, 889], "care": [36, 254, 313, 536, 617, 778, 845, 889, 1167, 1262], "cars_revers": [591, 778], "cartesian": [218, 313, 821, 889], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 192, 204, 216, 223, 238, 245, 247, 248, 267, 270, 271, 313, 397, 444, 535, 545, 546, 558, 594, 631, 632, 639, 641, 642, 651, 652, 653, 673, 778, 800, 817, 840, 889, 893, 895, 975, 1029, 1034, 1182, 1183, 1190, 1192, 1193, 1202, 1203, 1204, 1224, 1241, 1262], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 197, 204, 237, 245, 270, 271, 275, 287, 313, 328, 386, 387, 398, 424, 427, 438, 573, 578, 579, 586, 588, 594, 645, 646, 675, 681, 685, 708, 709, 758, 778, 817, 835, 840, 861, 889, 893, 895, 951, 965, 966, 976, 1006, 1009, 1020, 1137, 1143, 1196, 1197, 1226, 1233, 1239, 1243, 1245, 1246, 1262, 1282], "cast_str_to_int": [237, 313, 835, 889], "cast_to_supertyp": [778, 893], "cat": [26, 46, 84, 85, 389, 581, 631, 633, 671, 674, 685, 709, 773, 778, 895, 968, 1050, 1139, 1182, 1184, 1222, 1225, 1258, 1262], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 218, 268, 313, 375, 389, 581, 588, 589, 685, 778, 895, 948, 949, 950, 951, 968, 1139, 1145, 1146, 1245, 1262], "categori": [36, 46, 65, 85, 268, 313, 375, 389, 468, 581, 778, 948, 968, 1050, 1139, 1238, 1262], "categorical_as_str": [152, 153, 154, 155], "categoricalord": 59, "categoricaltyp": [265, 313], "caus": [99, 108, 117, 129, 130, 131, 143, 172, 192, 271, 313, 535, 778, 1034, 1243, 1262], "cba": 662, "cbrt": [778, 1262, 1282], "cbrt_a": 1283, "cc": [447, 726, 778, 895, 969, 1262, 1284], "ccc": [1, 36, 313, 676, 678, 895, 1284], "ccy": 1292, "cd": [676, 678, 895], "cdatainterfac": [171, 898], "cde": [895, 1284], "cdt": [422, 435, 1004, 1017], "ceil": [49, 778, 1262, 1282], "ceil_a": 1283, "cell": [15, 16, 36, 238, 313], "cent": 399, "center": [15, 16, 36, 313, 443, 445, 446, 595, 596, 598, 600, 602, 604, 607, 609, 611, 778, 1028, 1030, 1031, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1262], "central": [144, 145, 485, 624, 778, 1069, 1176, 1262], "centuri": 1285, "certain": [42, 43, 44, 45, 54, 133, 144, 209, 283, 313, 661, 662, 774, 799, 800, 836, 889, 1262], "certainli": [665, 667, 668, 1216, 1218, 1219], "cest": [421, 1003], "cet": [421, 1003], "cfg": [2, 4, 17, 168], "cfoo": [863, 889], "chain": [557, 558, 560, 562, 564, 565, 768], "chanc": [156, 159, 163, 1292], "chang": [30, 41, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 134, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 275, 281, 282, 289, 313, 316, 317, 388, 389, 392, 422, 468, 536, 574, 575, 581, 588, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 754, 755, 778, 799, 800, 809, 823, 850, 858, 864, 889, 893, 895, 950, 951, 967, 968, 1004, 1050, 1134, 1139, 1145, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1171, 1241, 1246, 1262, 1267], "changes_length": [778, 893], "char": [27, 639, 1190], "char_length": 1284, "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 313, 418, 637, 639, 643, 647, 648, 649, 650, 651, 652, 655, 656, 657, 660, 661, 662, 663, 664, 666, 673, 675, 836, 889, 895, 1000, 1188, 1190, 1194, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1207, 1208, 1211, 1212, 1213, 1217, 1224, 1226, 1284], "character_length": 1284, "characterist": [159, 163], "charli": [129, 1290], "chart": [36, 313, 316, 836, 889, 1262, 1267], "cheap": [177, 178, 252, 288, 313, 797, 798, 843, 862, 889, 955, 957, 1262], "cheaper": [502, 1085], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 189, 214, 218, 313, 345, 366, 369, 371, 465, 473, 477, 495, 631, 636, 642, 659, 778, 821, 827, 889, 920, 940, 943, 945, 1026, 1046, 1047, 1056, 1059, 1066, 1068, 1078, 1182, 1187, 1193, 1210, 1262], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1026, 1262], "check_exact": [152, 153, 154, 155], "check_nam": [154, 155, 1026, 1262], "check_ord": [154, 155], "check_row_ord": [152, 153], "choos": [41, 43, 45, 204, 238, 313, 817, 889], "chrono": [33, 42, 87, 313, 424, 427, 665, 667, 668, 672, 889, 1006, 1009, 1216, 1218, 1219, 1223, 1284, 1285], "chunk": [14, 45, 125, 129, 130, 133, 139, 141, 143, 146, 147, 148, 159, 163, 192, 217, 233, 271, 313, 328, 585, 778, 889, 904, 954, 1034, 1044, 1124, 1142, 1237, 1243, 1262], "chunk_length": 1262, "chunkedarrai": [116, 233, 313], "citi": [651, 652], "clang": 151, "clariti": [246, 313], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 248, 313, 765, 774, 778, 784, 790, 802, 808, 841, 860, 889, 894, 1242, 1262, 1266, 1274, 1289], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 184, 313, 391, 459, 778, 805, 889, 1272, 1289], "claus": [790, 1280, 1288], "clean": [665, 667, 668, 1216, 1218, 1219], "cleaner": 168, "cleanli": [10, 202, 313, 1289], "clear": [46, 84, 178, 313, 798, 889, 957, 1262], "clearer": 119, "clickhous": 132, "client": 131, "clip": [778, 1262], "clipboard": [32, 128, 313, 790], "clone": [118, 119, 120, 121, 122, 177, 271, 313, 797, 889, 955, 1262], "close": [36, 131, 204, 245, 260, 313, 389, 473, 532, 581, 594, 597, 599, 601, 603, 605, 608, 610, 612, 624, 719, 720, 722, 723, 765, 766, 778, 817, 840, 850, 889, 968, 1054, 1139, 1176, 1262], "closedinterv": [204, 245, 313, 473, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 840, 889, 1054, 1262], "closest": [116, 219, 313, 822, 889, 1283], "closur": [597, 599, 608, 610, 612, 778], "cloud": [35, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 313], "cloudi": [651, 652], "cloudpickl": 151, "cluster": 148, "cluster_with_column": [53, 54, 799, 800, 809, 836, 847, 889], "co": [639, 778, 1190, 1262, 1282], "coalesc": [218, 219, 282, 313, 471, 641, 665, 778, 821, 822, 858, 889, 1216, 1278, 1282], "code": [179, 313, 366, 367, 368, 369, 371, 391, 536, 617, 778, 805, 825, 889, 1167, 1262, 1272], "coeffici": [181, 313, 624, 778, 1176, 1262], "coerc": [55, 587, 778], "coercion": [42, 43, 44, 45, 53, 54, 587, 778, 799, 800, 809, 836, 847, 889], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 195, 203, 204, 212, 214, 218, 219, 220, 223, 234, 237, 238, 245, 246, 251, 259, 270, 275, 279, 281, 287, 292, 313, 317, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 467, 468, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 559, 561, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 704, 705, 707, 708, 709, 711, 713, 716, 718, 719, 721, 722, 724, 728, 729, 730, 731, 732, 733, 741, 743, 745, 746, 748, 751, 752, 757, 759, 761, 763, 764, 767, 768, 778, 813, 816, 817, 819, 821, 822, 823, 835, 840, 842, 849, 850, 856, 861, 863, 866, 889, 895, 1000, 1003, 1082, 1164, 1166, 1197, 1216, 1262, 1292], "col0": [159, 1292], "col1": [159, 238, 313, 889, 1292], "col2": [159, 238, 313, 889, 1292], "col3": [238, 313, 1292], "col4": 1292, "col_nam": [237, 313, 536, 768, 778, 835, 889], "cole": 126, "coli": [36, 313, 564, 565, 895, 1292], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 187, 221, 238, 260, 265, 278, 279, 313, 447, 477, 536, 708, 726, 730, 757, 760, 778, 793, 794, 796, 797, 800, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 842, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 889, 895, 1059, 1262, 1272, 1273, 1274, 1277, 1278, 1289, 1290, 1292], "collect_al": [50, 54, 799, 800, 889], "collect_all_async": [800, 889], "collect_async": [54, 889], "collect_schema": [50, 221, 313, 802, 808, 835, 841, 860, 889], "collis": 55, "colnam": [36, 143, 313], "color": [46, 84, 85, 299, 313, 316, 366, 367, 368, 369, 371, 634, 692, 778, 873, 940, 941, 942, 943, 945, 1185, 1251, 1262, 1284], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 173, 175, 176, 179, 181, 182, 185, 186, 187, 188, 191, 195, 196, 199, 200, 202, 203, 204, 208, 209, 214, 215, 216, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 254, 259, 261, 262, 263, 266, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 298, 313, 316, 317, 324, 325, 327, 338, 347, 356, 358, 361, 373, 378, 382, 383, 389, 399, 400, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 420, 423, 424, 425, 427, 436, 437, 439, 447, 449, 453, 455, 468, 472, 473, 488, 494, 500, 502, 522, 526, 527, 536, 542, 543, 545, 547, 557, 559, 560, 561, 562, 563, 564, 565, 574, 581, 585, 587, 588, 589, 590, 592, 593, 594, 597, 599, 601, 603, 605, 608, 610, 612, 619, 620, 626, 627, 630, 637, 642, 643, 644, 653, 657, 658, 665, 666, 667, 668, 669, 670, 672, 677, 679, 687, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 778, 794, 796, 803, 806, 807, 808, 810, 813, 816, 817, 821, 822, 823, 827, 828, 829, 830, 831, 833, 834, 837, 838, 840, 841, 842, 843, 845, 849, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 872, 873, 889, 894, 895, 902, 903, 922, 931, 933, 936, 949, 950, 956, 961, 962, 968, 977, 980, 981, 982, 985, 986, 987, 991, 992, 993, 995, 996, 999, 1001, 1002, 1005, 1006, 1007, 1009, 1018, 1019, 1021, 1033, 1050, 1053, 1077, 1083, 1085, 1105, 1109, 1139, 1146, 1147, 1150, 1170, 1181, 1188, 1193, 1195, 1208, 1209, 1216, 1218, 1219, 1220, 1221, 1223, 1229, 1232, 1238, 1239, 1251, 1262, 1278, 1280, 1281, 1283, 1284, 1286, 1287, 1290, 1291, 1292], "column_0": [1, 223, 277, 313], "column_1": [223, 277, 313, 1286], "column_2": [277, 313, 1286], "column_abc": 15, "column_format": [36, 313], "column_nam": [242, 277, 313, 838, 889], "column_tot": [36, 313], "column_width": [36, 313], "column_x": [129, 130, 134, 140, 143], "column_xyz": 15, "columnar": [120, 122, 216, 247, 313], "columnformatdict": [36, 313], "columnnameorselector": [176, 185, 187, 229, 236, 238, 248, 268, 278, 279, 280, 281, 313, 796, 806, 807, 831, 855, 856, 857, 889], "columnnotfounderror": [199, 200, 313], "columntotalsdefinit": [36, 313], "columnwidthsdefinit": [36, 313], "colx": [36, 313, 564, 565, 895, 1277, 1292], "colz": [895, 1292], "com": [36, 132, 313, 443, 445, 446, 638, 639, 640, 778, 1028, 1030, 1031, 1189, 1190, 1191, 1262], "combin": [41, 45, 53, 54, 55, 195, 204, 205, 219, 238, 245, 283, 313, 326, 339, 435, 444, 457, 573, 589, 594, 660, 661, 662, 719, 720, 722, 723, 765, 766, 768, 778, 799, 800, 809, 817, 822, 836, 840, 847, 889, 1004, 1017, 1029, 1146, 1211, 1212, 1213, 1262, 1278, 1290], "come": [111, 132, 204, 278, 280, 313, 396, 415, 416, 485, 527, 706, 778, 817, 855, 857, 889, 974, 997, 998, 1069, 1262], "comm_subexpr_elim": [53, 54, 799, 800, 809, 836, 847, 889], "comm_subplan_elim": [53, 54, 799, 800, 809, 836, 847, 889], "comma": [32, 33, 129, 130, 143, 313], "comment": [129, 130, 143], "comment_prefix": [129, 130, 143], "common": [47, 53, 54, 55, 91, 129, 130, 143, 282, 313, 558, 784, 799, 800, 809, 836, 847, 858, 889, 1266], "compact": 1287, "compani": 132, "compar": [148, 152, 153, 154, 155, 189, 195, 313, 441, 442, 462, 464, 473, 487, 534, 568, 569, 778, 813, 889, 950, 1025, 1026, 1130, 1262], "comparison": [149, 195, 313, 813, 889], "compat": [20, 36, 37, 38, 41, 45, 86, 265, 313, 631, 633, 638, 639, 640, 642, 651, 652, 889, 895, 1182, 1184, 1189, 1190, 1191, 1193, 1202, 1203, 1237, 1262, 1272, 1284, 1285, 1289], "compat_level": [37, 38, 265, 313, 1237, 1262], "compatibleframetyp": [1273, 1275, 1289], "compatlevel": [37, 38, 265, 313, 1237, 1262], "competit": [584, 778, 1141, 1262], "compil": [52, 343, 344, 492, 493, 918, 919, 1075, 1076], "complement": 895, "complet": [129, 131, 143, 1290], "complex": [160, 372, 373, 388, 686, 687, 778, 946, 967, 1247, 1262], "compliant": [36, 313], "compon": [400, 423, 665, 668, 724, 978, 1005, 1216, 1219], "compos": 1290, "composit": [76, 1292], "compound": [123, 248, 313, 895], "comprehens": 157, "compress": [31, 37, 38, 41, 43, 45, 313, 592, 778, 889, 1149, 1262], "compression_level": [41, 45, 313, 889], "comput": [53, 55, 89, 190, 203, 219, 238, 272, 278, 292, 305, 313, 321, 330, 331, 332, 333, 334, 335, 352, 353, 354, 359, 360, 364, 376, 379, 380, 381, 384, 385, 386, 387, 393, 440, 443, 444, 445, 446, 448, 485, 509, 510, 511, 512, 516, 517, 518, 519, 523, 529, 530, 531, 532, 554, 574, 575, 580, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 621, 622, 623, 624, 628, 683, 684, 692, 697, 699, 702, 703, 704, 710, 712, 725, 744, 754, 755, 768, 778, 799, 816, 819, 821, 822, 855, 863, 866, 879, 889, 900, 905, 906, 907, 908, 909, 910, 927, 928, 929, 934, 935, 939, 952, 958, 959, 960, 963, 964, 965, 966, 971, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1069, 1092, 1093, 1094, 1095, 1099, 1100, 1101, 1102, 1106, 1112, 1113, 1114, 1115, 1123, 1134, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1173, 1174, 1175, 1176, 1179, 1235, 1236, 1244, 1251, 1262, 1283, 1286], "computeerror": [545, 670, 1221], "concat": [46, 84, 85, 92, 130, 219, 313, 822, 863, 889, 954, 1044, 1124, 1142, 1262, 1282], "concat_list": [499, 725], "concat_w": [260, 313, 757, 850, 889, 1282, 1289], "concaten": [46, 55, 84, 85, 197, 237, 313, 578, 630, 644, 708, 709, 778, 835, 889, 954, 1124, 1181, 1195, 1262, 1284], "concatmethod": 55, "conclus": [120, 122, 313, 889], "concret": [159, 163], "condit": [36, 187, 195, 220, 246, 313, 453, 473, 636, 659, 705, 728, 768, 778, 807, 813, 823, 889, 1054, 1262, 1278, 1282, 1288], "conditional_format": [36, 313], "conditionalformatdict": [36, 313], "config": [0, 47, 183, 251, 270, 287, 313, 632, 641, 653, 719, 720, 722, 723, 724, 790, 799, 804, 842, 861, 889, 1183, 1204], "configur": [5, 35, 133, 144, 145, 168, 313, 799, 889], "conflat": [473, 778], "conform": 1292, "confus": [91, 325, 480, 481, 653, 778], "conjunct": [36, 84, 131, 134, 140, 157, 313, 734, 737, 889], "conn": 131, "connect": [34, 129, 131, 132, 135, 137, 139, 141, 143, 146, 147, 148, 149, 313, 791], "connectionorcursor": [34, 131, 313], "connector": 132, "connectorx": [131, 132, 151], "consecut": [194, 313, 365, 452, 458, 630, 644, 778, 812, 889, 1037, 1181, 1195, 1262], "consid": [41, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 175, 187, 189, 215, 220, 223, 229, 247, 260, 270, 275, 276, 278, 280, 281, 282, 313, 316, 317, 373, 378, 388, 389, 422, 457, 468, 535, 536, 542, 556, 557, 560, 562, 564, 565, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 687, 714, 728, 754, 755, 774, 778, 794, 799, 800, 807, 809, 818, 823, 826, 831, 850, 854, 855, 857, 858, 873, 889, 895, 949, 951, 956, 967, 968, 1004, 1026, 1050, 1118, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1164, 1166, 1241, 1246, 1262, 1267, 1272], "consider": 126, "consist": [203, 236, 271, 313, 665, 719, 720, 816, 889, 895, 904, 1034, 1216, 1243, 1262], "consola": [36, 313], "const": 10, "constant": [190, 245, 313, 397, 444, 450, 778, 840, 889, 975, 1027, 1029, 1035, 1262], "constrain": [47, 143, 187, 313, 807, 889, 895], "constraint": [195, 313, 453, 557, 558, 560, 562, 564, 565, 768, 778, 813, 889, 895], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 313, 459, 750, 753, 769, 774, 778, 805, 889, 949, 1262, 1277], "construct_categor": 46, "constructor": [126, 134, 163], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 144, 145, 158, 159, 161, 163, 175, 180, 187, 188, 204, 212, 217, 234, 270, 271, 275, 276, 282, 294, 313, 325, 327, 350, 369, 371, 391, 465, 477, 506, 536, 630, 632, 636, 638, 640, 642, 644, 646, 658, 659, 675, 696, 697, 698, 699, 709, 740, 778, 794, 802, 805, 807, 808, 817, 836, 854, 858, 868, 889, 893, 895, 902, 903, 925, 1046, 1047, 1089, 1124, 1181, 1183, 1187, 1189, 1191, 1193, 1195, 1197, 1209, 1210, 1226, 1237, 1243, 1262, 1280], "contains_with_expr": 366, "contains_with_lit": 366, "content": [13, 620, 778, 1172, 1262], "context": [46, 84, 85, 165, 234, 260, 313, 323, 453, 499, 535, 536, 545, 626, 627, 692, 711, 727, 730, 736, 737, 740, 749, 753, 756, 777, 778, 789, 790, 850, 863, 889, 1082, 1251, 1262, 1277, 1289, 1291], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 241, 271, 313], "continu": [129, 389, 581, 624, 778, 968, 1139, 1176, 1262], "contrast": 724, "control": [10, 11, 36, 54, 55, 134, 157, 159, 259, 260, 270, 313, 589, 627, 757, 778, 799, 800, 809, 849, 850, 889, 1146, 1241, 1262, 1274, 1277, 1289], "conveni": [192, 275, 313, 882, 904, 1034, 1262, 1272], "convers": [117, 134, 172, 216, 217, 247, 248, 267, 271, 272, 313, 401, 665, 667, 668, 672, 790, 979, 1216, 1218, 1219, 1223, 1243, 1244, 1262, 1287, 1289], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 172, 266, 267, 268, 269, 270, 271, 272, 274, 275, 313, 361, 362, 390, 401, 424, 427, 526, 527, 535, 558, 583, 640, 665, 667, 668, 669, 670, 672, 677, 778, 889, 893, 936, 937, 950, 979, 1006, 1009, 1109, 1110, 1191, 1216, 1218, 1219, 1220, 1221, 1223, 1229, 1232, 1240, 1241, 1242, 1243, 1244, 1246, 1262, 1284, 1286, 1287, 1289], "convert_time_zon": [421, 1003], "coo": [242, 313, 838, 889], "coord": 679, "coordin": [36, 313], "copi": [32, 116, 117, 128, 170, 172, 177, 178, 217, 265, 271, 272, 287, 313, 450, 778, 797, 798, 861, 889, 897, 955, 957, 1035, 1237, 1242, 1243, 1244, 1262, 1289], "corasick": [632, 641, 653, 1183, 1192, 1204], "core": [1, 220, 313, 823, 889, 1289, 1292], "cores_right": [220, 313, 823, 889], "corner": [20, 36, 123, 313], "corr": 313, "corrcoef": [181, 313], "correct": [134, 140, 445, 446, 485, 606, 624, 778, 827, 889, 893, 1030, 1031, 1069, 1157, 1176, 1262], "correctli": [36, 313, 535, 778], "correl": [181, 313, 710, 754], "correlationmethod": 710, "correspond": [204, 219, 245, 271, 283, 313, 373, 409, 418, 422, 435, 536, 584, 594, 597, 599, 601, 603, 605, 608, 610, 612, 687, 719, 720, 722, 723, 765, 766, 778, 799, 817, 822, 840, 889, 987, 1000, 1004, 1017, 1141, 1262], "cosd": 1282, "cosh": [778, 1262], "cosin": [330, 331, 379, 380, 535, 778, 905, 906, 958, 959, 1262, 1286], "cost": [220, 248, 313, 823, 889], "cot": [778, 1262, 1282], "cotang": [381, 778, 960, 1262, 1286], "cotd": 1282, "could": [35, 82, 89, 176, 313, 621, 714, 724, 728, 778, 796, 804, 807, 889, 1173, 1262], "count": [36, 149, 174, 183, 204, 234, 235, 245, 277, 283, 289, 304, 313, 329, 346, 355, 383, 396, 444, 468, 488, 496, 508, 513, 536, 556, 572, 594, 633, 690, 692, 700, 706, 713, 737, 748, 778, 793, 804, 817, 834, 840, 864, 878, 889, 895, 921, 930, 962, 969, 974, 1029, 1050, 1071, 1079, 1091, 1096, 1125, 1133, 1184, 1249, 1251, 1262, 1267, 1271, 1282], "count_digit": 633, "count_num": [36, 313], "counterpart": 126, "countri": [219, 313, 397, 822, 889, 975], "country_holidai": [396, 706, 974], "covari": [712, 755, 778, 893], "cover": 10, "cow": [649, 650, 1200, 1201], "cpu": [129, 130, 270, 313, 799, 889, 1241, 1262], "crab": [631, 642, 1182, 1193], "crate": [33, 42, 87, 313, 631, 633, 638, 639, 640, 642, 651, 652, 665, 667, 668, 672, 889, 895, 1182, 1184, 1189, 1190, 1191, 1193, 1202, 1203, 1216, 1218, 1219, 1223], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 177, 178, 204, 235, 238, 245, 270, 271, 283, 287, 290, 313, 316, 317, 400, 422, 435, 444, 527, 535, 585, 594, 597, 599, 601, 603, 605, 608, 610, 612, 708, 718, 719, 720, 721, 722, 723, 724, 764, 765, 766, 774, 778, 797, 798, 804, 809, 817, 840, 861, 865, 889, 955, 957, 968, 978, 1004, 1017, 1029, 1131, 1139, 1142, 1241, 1243, 1262, 1267, 1288, 1289, 1292], "create_async_engin": 131, "create_engin": [34, 313], "creation": 130, "cross": [218, 313, 821, 889, 1278], "crustacean": [642, 1193], "cst": [422, 435, 1004, 1017], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 313, 790, 889], "csvencod": [129, 130, 143], "csvquotestyl": [33, 42, 313, 889], "ctx": [1271, 1273, 1274, 1275, 1276, 1277, 1289], "cube": [1, 51, 376, 579, 778, 952, 1262, 1283], "cum_count": [778, 1262], "cum_count_revers": [383, 778], "cum_max": [778, 1262], "cum_max_all_fil": [384, 778], "cum_max_revers": [384, 778], "cum_min": [778, 1262], "cum_min_revers": [385, 778], "cum_prod": [322, 778, 1262], "cum_prod_revers": [386, 778], "cum_reduc": 714, "cum_sum": [470, 680, 717, 778, 819, 889, 1068, 1262], "cum_sum_revers": [387, 778], "cumsum_horizont": 716, "cumul": [383, 384, 385, 386, 387, 713, 714, 715, 716, 717, 778, 962, 963, 964, 965, 966, 1262], "cumulative_ev": [778, 1262], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 139, 141, 143, 146, 147, 148, 156, 157, 159, 160, 161, 162, 163, 164, 177, 178, 218, 219, 260, 270, 275, 313, 316, 317, 405, 527, 575, 778, 797, 798, 821, 822, 850, 889, 895, 955, 957, 975, 983, 1134, 1241, 1246, 1262, 1267, 1274, 1289], "cursor": [34, 131, 313], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 183, 223, 238, 299, 313, 362, 396, 424, 427, 527, 535, 536, 595, 692, 706, 739, 740, 778, 804, 827, 873, 889, 937, 974, 1006, 1009, 1110, 1118, 1151, 1251, 1262, 1292], "customis": [36, 313], "cut": [581, 778, 1139, 1262], "cxx": 1284, "cypher": 131, "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 173, 195, 202, 204, 205, 206, 209, 218, 222, 264, 265, 275, 281, 285, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 322, 324, 383, 406, 424, 427, 473, 578, 619, 633, 639, 651, 652, 657, 665, 667, 668, 707, 724, 730, 757, 778, 813, 817, 821, 850, 869, 871, 874, 875, 876, 877, 878, 879, 880, 889, 895, 950, 962, 984, 1006, 1009, 1054, 1077, 1184, 1190, 1202, 1203, 1208, 1216, 1218, 1219, 1230, 1262, 1278, 1280, 1281, 1284, 1285], "d1": [36, 313, 400], "d2": 400, "d3": 400, "d789": [36, 313], "d_4": [657, 1208], "dai": [61, 62, 77, 204, 217, 219, 245, 283, 313, 316, 396, 415, 416, 418, 419, 422, 424, 427, 428, 435, 437, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 706, 718, 719, 720, 721, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 895, 974, 997, 998, 1000, 1001, 1004, 1006, 1009, 1010, 1017, 1019, 1029, 1262, 1285], "dark": 1271, "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 170, 172, 178, 179, 188, 191, 192, 202, 203, 204, 216, 217, 218, 221, 223, 236, 237, 241, 246, 247, 248, 250, 254, 257, 265, 270, 271, 272, 275, 277, 287, 291, 311, 313, 317, 325, 326, 327, 330, 331, 332, 333, 334, 335, 338, 341, 342, 343, 344, 345, 347, 350, 352, 353, 354, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 374, 375, 378, 379, 380, 381, 382, 389, 390, 391, 396, 397, 398, 399, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 449, 460, 462, 463, 464, 468, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 492, 493, 495, 500, 506, 508, 515, 526, 528, 534, 536, 568, 569, 573, 574, 581, 583, 584, 587, 588, 589, 590, 592, 593, 613, 615, 617, 622, 623, 624, 630, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 655, 656, 657, 658, 665, 666, 667, 668, 670, 672, 675, 683, 684, 685, 688, 689, 692, 695, 701, 708, 711, 718, 719, 720, 721, 722, 723, 724, 734, 735, 737, 738, 739, 740, 750, 753, 764, 765, 766, 769, 774, 778, 790, 797, 798, 799, 800, 805, 808, 810, 816, 817, 841, 845, 861, 889, 894, 897, 902, 903, 914, 916, 917, 918, 919, 920, 922, 924, 925, 936, 938, 940, 941, 942, 944, 947, 948, 955, 956, 957, 968, 969, 974, 975, 976, 977, 980, 981, 982, 983, 985, 986, 987, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1029, 1033, 1034, 1050, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1073, 1074, 1075, 1076, 1078, 1083, 1089, 1091, 1098, 1109, 1111, 1118, 1132, 1139, 1141, 1145, 1146, 1147, 1149, 1150, 1161, 1163, 1171, 1176, 1181, 1182, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1206, 1207, 1208, 1209, 1216, 1217, 1218, 1219, 1221, 1223, 1226, 1237, 1242, 1243, 1244, 1245, 1248, 1261, 1262, 1271, 1278, 1284, 1289, 1291], "data_bar": [36, 313], "data_bar_2010": [36, 313], "data_label": [36, 313], "data_page_s": [41, 45, 313, 889], "databas": [34, 115, 131, 132, 313, 790], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 311, 312, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 774, 778, 790, 799, 800, 802, 804, 806, 808, 810, 814, 817, 821, 822, 823, 824, 825, 827, 831, 832, 836, 839, 841, 848, 850, 855, 856, 857, 858, 860, 863, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 889, 895, 968, 969, 1003, 1029, 1050, 1118, 1139, 1197, 1208, 1209, 1232, 1238, 1239, 1251, 1262, 1271, 1272, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1292], "dataframeplot": [313, 316], "dataload": [275, 313], "datapoint": [204, 313, 817, 889], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 218, 275, 313, 485, 778, 790, 821, 827, 889, 1069, 1262, 1290], "datat": [36, 313], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 136, 138, 139, 142, 147, 160, 161, 163, 188, 197, 313, 374, 447, 619, 685, 726, 738, 774, 778, 790, 808, 889, 894, 895, 947, 969, 1022, 1118, 1170, 1245, 1262, 1287], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 141, 143, 146, 148, 149, 176, 183, 202, 204, 217, 219, 245, 260, 313, 316, 345, 396, 398, 399, 400, 401, 404, 406, 408, 409, 411, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 495, 594, 597, 599, 601, 603, 605, 608, 610, 612, 665, 667, 685, 706, 719, 720, 722, 723, 730, 738, 764, 778, 796, 804, 817, 822, 840, 889, 895, 920, 974, 976, 977, 978, 979, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1029, 1078, 1127, 1128, 1216, 1218, 1245, 1262, 1282, 1285, 1287], "date32": [217, 313], "date_format": [33, 42, 313, 889], "date_min": 418, "date_minus_1y_2mon": 1000, "date_part": 1282, "date_plus_1i": [418, 1000], "date_rang": [219, 283, 313, 404, 406, 419, 426, 437, 722, 723, 822, 889, 982, 996, 1001, 1002, 1018, 1019], "date_right": [219, 313, 822, 889], "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 141, 144, 146, 148, 159, 160, 161, 163, 176, 183, 202, 204, 217, 219, 245, 260, 283, 313, 316, 345, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 495, 594, 597, 599, 601, 603, 605, 608, 610, 612, 665, 668, 685, 706, 718, 719, 720, 722, 723, 724, 730, 738, 765, 766, 778, 796, 804, 817, 822, 840, 889, 894, 895, 920, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1029, 1078, 1127, 1128, 1216, 1219, 1243, 1245, 1262, 1284, 1285], "datetime_format": [33, 42, 313, 889], "datetime_rang": [204, 313, 398, 401, 415, 416, 418, 421, 422, 428, 429, 430, 431, 432, 433, 434, 435, 438, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 778, 817, 889, 975, 976, 979, 983, 984, 985, 990, 991, 993, 995, 997, 998, 999, 1000, 1003, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "datetime_str": [424, 427], "datetimeindex": 121, "david": 1290, "day_nam": [424, 427], "day_of_month": [404, 419, 437], "day_of_year": [404, 419, 437], "daylight": [204, 219, 245, 283, 313, 397, 405, 418, 422, 435, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 983, 1000, 1004, 1017], "dayofweek": 1285, "dayofyear": 1285, "days_diff": 428, "db": [34, 131, 132, 313], "dbapi2": 131, "dbc": [633, 1184], "dbreadengin": 132, "dbwriteengin": [34, 313], "dbwritemod": [34, 313], "dd": [36, 313, 1284], "ddd": [1, 36, 313, 676, 678], "dddd": 1284, "ddof": [261, 284, 313, 359, 364, 523, 529, 607, 608, 611, 612, 629, 693, 710, 712, 754, 755, 759, 767, 778, 851, 859, 889, 934, 939, 1106, 1112, 1158, 1160, 1180, 1252, 1262], "ddww": 1284, "de": 1284, "deal": [41, 45, 216, 313, 325, 327, 421, 584, 665, 668, 696, 697, 698, 699, 721, 778, 889, 902, 903, 1003, 1141, 1216, 1219, 1262], "debug": [29, 799, 827, 889, 1292], "decad": [1271, 1285], "decai": [443, 444, 445, 446, 778, 1028, 1029, 1030, 1031, 1262], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 313, 317, 613, 669, 778, 889, 895, 1161, 1220, 1262, 1283], "decimal_comma": [129, 130, 143], "decimal_separ": [9, 27], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 270, 275, 313, 889, 895, 1271], "decod": [129, 130, 645], "decompos": [279, 313, 856, 889], "decompress": [41, 43, 45, 313, 889], "decor": [46, 48, 49, 50, 51, 159, 163, 223, 313, 536, 778, 789, 790, 1118, 1262], "dedic": [1, 117, 216, 247, 313, 895, 1289], "deem": [183, 313, 804, 889], "deepcopi": [177, 313, 797, 889, 955, 1262], "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 237, 277, 313, 322, 578, 639, 662, 695, 739, 778, 800, 835, 889, 895, 1190, 1292], "default": [4, 5, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 183, 184, 187, 190, 199, 203, 204, 205, 216, 218, 219, 227, 229, 236, 238, 245, 246, 247, 248, 249, 253, 256, 260, 261, 263, 268, 270, 271, 275, 278, 280, 281, 282, 284, 289, 298, 313, 324, 325, 327, 350, 357, 362, 389, 391, 396, 421, 440, 442, 443, 445, 446, 466, 502, 506, 515, 520, 521, 523, 527, 529, 530, 535, 542, 545, 548, 566, 567, 569, 575, 581, 584, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 618, 620, 629, 630, 638, 644, 655, 660, 661, 662, 665, 667, 668, 670, 672, 692, 693, 696, 698, 701, 705, 706, 709, 710, 712, 719, 720, 721, 722, 723, 724, 727, 730, 734, 735, 736, 738, 750, 753, 759, 760, 765, 766, 767, 769, 778, 799, 800, 804, 805, 807, 809, 816, 817, 821, 822, 831, 840, 844, 846, 850, 851, 855, 857, 858, 859, 864, 872, 889, 895, 902, 903, 925, 932, 937, 956, 968, 969, 974, 1003, 1023, 1027, 1028, 1030, 1031, 1048, 1085, 1089, 1098, 1103, 1104, 1110, 1127, 1128, 1134, 1139, 1141, 1145, 1146, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1163, 1169, 1172, 1180, 1181, 1182, 1189, 1193, 1195, 1206, 1211, 1212, 1213, 1216, 1218, 1219, 1221, 1223, 1241, 1243, 1251, 1252, 1262, 1283, 1292], "default_match": [631, 642], "defaultdict": [248, 313], "defer": [313, 316, 317, 1262, 1267], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 176, 187, 191, 204, 223, 234, 237, 245, 282, 299, 313, 473, 502, 536, 578, 581, 593, 594, 597, 599, 601, 603, 605, 608, 610, 612, 643, 648, 655, 666, 673, 719, 720, 722, 723, 740, 760, 765, 766, 778, 796, 807, 810, 817, 835, 840, 858, 873, 889, 894, 895, 1054, 1085, 1118, 1139, 1150, 1194, 1199, 1206, 1217, 1224, 1262], "definit": [36, 313, 485, 778, 894, 895, 1069, 1262], "deflat": [31, 313], "deg": 1286, "degre": [261, 284, 313, 523, 529, 583, 607, 608, 611, 612, 629, 693, 703, 710, 712, 754, 755, 759, 767, 778, 851, 859, 889, 1158, 1160, 1180, 1252, 1262, 1282], "delet": [1278, 1291], "delimit": [40, 42, 139, 147, 238, 268, 313, 630, 644, 889, 1181, 1195, 1238, 1262], "delta": [35, 133, 144, 261, 284, 313, 523, 529, 607, 608, 611, 612, 629, 693, 710, 712, 754, 755, 759, 767, 778, 790, 851, 859, 889, 1158, 1160, 1180, 1252, 1262], "delta_merge_opt": [35, 313], "delta_table_opt": [133, 144], "delta_write_opt": [35, 313], "deltalak": [35, 133, 144, 151, 313], "deltat": [35, 313], "demo": [36, 313], "demonstr": [129, 457, 778, 895], "dens": [20, 202, 313, 584, 778, 1141, 1262], "densiti": [1262, 1267], "depend": [41, 46, 52, 85, 131, 151, 173, 313, 343, 344, 492, 493, 536, 545, 581, 584, 724, 727, 730, 736, 778, 899, 918, 919, 1075, 1076, 1139, 1141, 1262, 1292], "deploi": [159, 163], "deprec": [35, 156, 157, 158, 159, 163, 166, 174, 229, 271, 289, 294, 313, 403, 438, 459, 551, 588, 630, 637, 694, 703, 711, 778, 793, 809, 831, 844, 857, 863, 864, 868, 889, 981, 989, 990, 1020, 1047, 1145, 1181, 1188, 1243, 1262], "depth": 126, "desc": [895, 1271, 1274, 1278, 1280], "descend": [47, 254, 259, 313, 338, 358, 522, 584, 617, 626, 627, 692, 704, 778, 845, 849, 889, 913, 933, 1066, 1105, 1141, 1167, 1178, 1251, 1262], "describ": [159, 202, 313, 889, 1262], "descript": [204, 313, 817, 889, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1287, 1290, 1291], "deseri": [126, 253, 313, 459, 548, 778, 844, 889], "deserializ": [184, 253, 313, 391, 548, 778, 805, 844, 889], "design": [270, 275, 313], "desir": [159, 362, 438, 527, 937, 1020, 1110], "destin": 132, "detail": [52, 117, 131, 132, 152, 154, 172, 204, 313, 817, 889, 1292], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 175, 179, 197, 204, 216, 217, 223, 245, 276, 277, 283, 313, 373, 408, 421, 468, 527, 545, 581, 587, 589, 624, 632, 643, 665, 666, 668, 669, 687, 721, 750, 753, 769, 778, 794, 801, 802, 808, 817, 840, 854, 860, 889, 986, 1003, 1050, 1110, 1139, 1145, 1146, 1176, 1183, 1216, 1219, 1220, 1262], "dev": [171, 898, 1158, 1262], "develop": [132, 159, 163], "deviat": [261, 313, 445, 607, 608, 629, 759, 778, 851, 889, 1030, 1180, 1262, 1279], "devic": [270, 313, 799, 889, 1241, 1262], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 602, 604, 606, 607, 609, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 774, 778, 817, 840, 856, 858, 870, 873, 881, 889, 895, 1003, 1029, 1197, 1208, 1209, 1239, 1262, 1267, 1271, 1272, 1273, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1292], "df0": [230, 313, 832, 889, 1277], "df1": [47, 55, 152, 153, 189, 192, 230, 260, 285, 313, 832, 889, 1274, 1276, 1277, 1278, 1289], "df2": [47, 55, 152, 153, 189, 192, 285, 313, 1274, 1276, 1277, 1278, 1289], "df3": [47, 313], "df4": 313, "df5": 313, "df6": 313, "df_a": 1289, "df_a1": 55, "df_a2": 55, "df_a3": 55, "df_agg_nuniqu": [234, 313], "df_b": 1289, "df_current_batch": 130, "df_d1": 55, "df_d2": 55, "df_from_str_repr": [269, 313], "df_h1": 55, "df_h2": 55, "df_new_grid": [471, 778], "df_nuniqu": [234, 313], "df_original_grid": [471, 778], "df_panda": 1272, "df_pd": 117, "df_tempor": [597, 599, 601, 603, 605, 608, 610, 612, 778], "dfi": [117, 172], "diagon": [55, 277, 313], "diagonal_relax": 55, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 196, 216, 236, 242, 246, 247, 248, 266, 267, 270, 275, 277, 313, 778, 838, 889, 893, 894, 895, 1039, 1262, 1275], "dictat": [418, 778, 893, 1000], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 216, 236, 246, 247, 248, 266, 267, 270, 275, 313, 889, 894], "did": [397, 975], "diff": [287, 313, 428, 429, 430, 431, 432, 433, 434, 516, 778, 861, 889, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1099, 1262], "differ": [36, 41, 87, 90, 111, 129, 134, 149, 152, 154, 192, 204, 205, 216, 220, 238, 245, 247, 248, 267, 270, 271, 277, 313, 392, 404, 418, 419, 421, 436, 442, 457, 466, 497, 516, 518, 527, 536, 566, 567, 569, 588, 589, 665, 690, 727, 730, 736, 778, 809, 817, 823, 840, 889, 895, 950, 970, 982, 1000, 1001, 1003, 1018, 1025, 1034, 1048, 1080, 1099, 1101, 1118, 1127, 1128, 1130, 1145, 1146, 1216, 1262, 1285, 1287, 1289], "digit": [63, 578, 613, 614, 639, 778, 895, 1161, 1162, 1184, 1190, 1262, 1292], "dimens": [116, 118, 120, 122, 138, 139, 147, 313, 590, 778, 889, 1147, 1243, 1262], "dimension": [118, 120, 122, 271, 313, 889, 1262], "direct": [36, 132, 141, 145, 148, 256, 270, 281, 313, 357, 520, 618, 778, 846, 889, 932, 1103, 1169, 1262], "directli": [6, 30, 36, 54, 131, 159, 163, 168, 248, 270, 313, 443, 445, 446, 589, 753, 778, 800, 889, 1028, 1030, 1031, 1146, 1241, 1262, 1274, 1289, 1292], "directori": [36, 41, 141, 143, 146, 148, 313, 893], "dirpath": [31, 33, 37, 38, 41, 143, 313], "disabl": [41, 45, 46, 84, 85, 141, 146, 160, 216, 313, 799, 889], "disable_string_cach": 85, "disallow": 159, "discard": [195, 313, 453, 778, 813, 889, 1038, 1262], "disco": [641, 1192], "discont": [641, 1192], "discourag": [536, 778], "discoveri": [238, 313], "discret": [389, 392, 440, 468, 497, 516, 581, 778, 968, 970, 1023, 1050, 1080, 1099, 1139, 1262], "disk": [41, 42, 43, 44, 45, 135, 313, 847, 889], "dispatch": 895, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 183, 202, 313, 804, 809, 889], "distanc": [219, 313, 468, 778, 822, 889, 1050, 1262], "distinct": [36, 163, 236, 238, 291, 313, 363, 476, 479, 528, 584, 593, 724, 778, 938, 1058, 1061, 1111, 1141, 1150, 1262, 1279, 1288, 1290, 1292], "distinct_count": [41, 45, 313, 889], "distribut": [485, 624, 778, 1069, 1176, 1262], "div": 1282, "divid": [20, 389, 422, 435, 443, 445, 446, 457, 485, 581, 778, 968, 1004, 1017, 1028, 1030, 1031, 1069, 1139, 1262, 1283], "divis": [457, 688, 778, 1283], "divisor": [261, 284, 313, 523, 529, 607, 608, 611, 612, 629, 693, 710, 712, 754, 755, 759, 767, 778, 851, 859, 889, 1158, 1160, 1180, 1252, 1262], "dl": [275, 313], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 143, 148, 152, 153, 154, 155, 173, 183, 192, 215, 219, 238, 265, 277, 281, 313, 316, 388, 396, 499, 535, 660, 661, 662, 750, 753, 769, 778, 795, 799, 800, 804, 809, 822, 827, 836, 847, 889, 895, 967, 974, 1034, 1082, 1211, 1212, 1213, 1246, 1262, 1267], "do_polars_oper": 29, "do_someth": 131, "do_various_th": 168, "doc": [35, 37, 38, 132, 135, 137, 152, 154, 170, 171, 181, 313, 897, 898], "document": [87, 132, 170, 313, 317, 424, 427, 646, 665, 667, 668, 672, 774, 897, 950, 1006, 1009, 1197, 1216, 1218, 1219, 1223], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 178, 185, 192, 195, 199, 204, 205, 217, 218, 246, 247, 248, 278, 287, 290, 313, 316, 317, 438, 453, 457, 466, 527, 536, 632, 641, 653, 661, 662, 690, 774, 778, 798, 799, 804, 806, 813, 817, 821, 827, 855, 861, 865, 889, 957, 1020, 1034, 1038, 1048, 1171, 1183, 1192, 1204, 1262, 1267, 1284], "doesn": [35, 129, 143, 204, 219, 313, 440, 778, 817, 822, 889, 1023, 1262], "dog": [631, 671, 674, 709, 1182, 1222, 1225], "doi": 1285, "dollar": [651, 652, 1202, 1203], "domain": [1, 639, 1190], "don": [55, 204, 219, 223, 278, 281, 313, 388, 499, 536, 778, 817, 822, 855, 889, 895, 967, 1082, 1118, 1262], "done": [130, 149, 168, 174, 176, 219, 313, 328, 329, 574, 778, 793, 796, 822, 889], "dot": [47, 774, 778, 847, 889, 1262], "doubl": [272, 313], "dow": 1285, "down": [143, 146, 147, 148, 149, 456, 778, 1040, 1262], "download": [139, 143, 146, 147, 847, 889], "downstream": [271, 313, 617, 778, 1167, 1262], "dr": 145, "drago": [643, 1194], "dragon": 643, "dragonfr": 1194, "dragonfruit": [643, 655, 666, 1194, 1206, 1217], "dramat": 134, "draw": [20, 25, 159, 163, 1292], "drawback": 774, "drawfn": 1292, "drawing_charact": 20, "dremio": 131, "driver": [34, 131, 132, 313], "drop": [1, 119, 186, 187, 223, 278, 287, 313, 392, 394, 395, 497, 498, 581, 778, 807, 855, 861, 889, 970, 972, 973, 1080, 1081, 1139, 1262, 1288], "drop_dupl": [278, 313, 855, 889], "drop_first": [268, 313, 1238, 1262], "drop_in_plac": 313, "drop_nan": [395, 778, 973, 1262], "drop_nul": [313, 394, 778, 889, 972, 1262], "dset": 149, "dst": [422, 435, 1004, 1017], "dst_offset": [397, 975], "dt": [1, 36, 47, 134, 140, 245, 313, 594, 724, 778, 787, 840, 889, 895, 1270, 1284, 1285], "dt1": 1284, "dt2": 1284, "dtm": [36, 313, 400, 895, 978, 1284], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 156, 157, 158, 159, 163, 170, 172, 176, 179, 204, 219, 245, 269, 270, 271, 272, 275, 281, 290, 313, 374, 375, 386, 387, 438, 447, 460, 494, 502, 533, 535, 536, 542, 579, 586, 587, 594, 597, 599, 601, 603, 605, 608, 610, 612, 619, 621, 645, 665, 681, 685, 691, 701, 726, 730, 734, 735, 737, 738, 739, 740, 750, 753, 760, 769, 778, 796, 801, 817, 822, 840, 865, 889, 894, 895, 897, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 947, 948, 949, 950, 955, 965, 966, 969, 970, 1020, 1027, 1056, 1073, 1074, 1077, 1085, 1109, 1116, 1118, 1137, 1148, 1170, 1173, 1196, 1216, 1233, 1240, 1241, 1243, 1244, 1245, 1246, 1250, 1262, 1289, 1292], "dtype_format": [36, 313], "dtypekind": 172, "dtypelik": [170, 897], "dtypeoper": [1, 50], "dubiou": 87, "due": [176, 204, 219, 245, 248, 283, 313, 324, 405, 418, 422, 435, 557, 558, 560, 562, 564, 565, 594, 597, 599, 601, 603, 605, 608, 610, 612, 706, 719, 720, 722, 723, 765, 766, 778, 796, 817, 822, 840, 889, 983, 1000, 1004, 1017], "dummi": [268, 313, 1238, 1262], "duplic": [47, 92, 211, 218, 219, 220, 278, 282, 313, 324, 474, 557, 581, 778, 821, 822, 823, 855, 858, 889, 1055, 1139, 1262, 1290], "duplicateerror": [581, 778, 1139, 1262], "dur": [220, 313, 823, 889], "durat": [168, 219, 283, 313, 397, 405, 428, 429, 430, 431, 432, 433, 434, 438, 444, 685, 719, 720, 722, 723, 765, 766, 778, 822, 889, 894, 895, 975, 983, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1029, 1243, 1245, 1262], "dure": [46, 91, 129, 130, 143, 168, 192, 313, 1034, 1262], "dutch": [396, 706, 974], "dynam": [204, 313, 362, 527, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 778, 817, 889, 893, 937, 1110], "dynamicgroupbi": [204, 313], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 141, 146, 148, 149, 161, 184, 195, 202, 206, 215, 222, 264, 265, 271, 281, 313, 322, 391, 440, 444, 447, 473, 530, 536, 541, 542, 543, 545, 546, 547, 549, 550, 619, 624, 642, 661, 662, 673, 726, 740, 757, 768, 778, 805, 813, 825, 838, 889, 895, 1023, 1029, 1054, 1176, 1193, 1224, 1262, 1280, 1284, 1292], "e101": [36, 313], "e_filt": [545, 547], "e_sum_ov": [545, 547], "e_sum_slic": [545, 547], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 139, 147, 152, 153, 154, 155, 157, 180, 182, 188, 195, 202, 203, 204, 217, 219, 223, 236, 238, 245, 247, 249, 270, 275, 279, 282, 283, 291, 292, 294, 296, 298, 299, 307, 313, 338, 373, 389, 422, 435, 453, 476, 479, 505, 508, 515, 525, 532, 536, 574, 581, 584, 592, 593, 600, 604, 615, 620, 627, 639, 643, 647, 648, 655, 657, 658, 666, 673, 687, 701, 704, 709, 734, 735, 760, 768, 778, 799, 802, 803, 808, 813, 817, 822, 836, 840, 856, 858, 866, 868, 870, 872, 873, 881, 889, 913, 954, 968, 1004, 1017, 1058, 1061, 1088, 1091, 1098, 1108, 1139, 1141, 1149, 1150, 1163, 1172, 1190, 1194, 1198, 1199, 1206, 1208, 1209, 1217, 1224, 1232, 1262, 1289, 1290, 1292], "eager": [204, 219, 238, 281, 313, 398, 401, 404, 406, 415, 416, 418, 419, 421, 422, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 597, 599, 601, 603, 605, 608, 610, 612, 701, 705, 719, 720, 722, 723, 730, 734, 735, 750, 753, 757, 760, 765, 766, 769, 777, 778, 817, 822, 827, 889, 975, 976, 979, 982, 983, 984, 985, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1289], "eagerli": [527, 1271], "ear": [655, 666, 1206], "earlier": [219, 313, 822, 889], "earliest": [204, 313, 421, 665, 668, 721, 817, 882, 889, 1003, 1216, 1219], "easi": 168, "easiest": 173, "easili": [47, 251, 275, 287, 292, 313, 760, 774, 842, 861, 866, 889], "east": [148, 220, 313, 823, 889], "ebf1d": [36, 313], "eee": [1, 36, 313, 895], "effect": [36, 197, 204, 313, 405, 457, 536, 559, 561, 563, 778, 817, 864, 865, 889, 975, 983], "effici": [117, 131, 215, 217, 313, 535, 778], "efgh": 1284, "eg": [17, 25, 36, 55, 132, 168, 270, 313, 422, 665, 668, 688, 778, 895, 1216, 1219], "egnaro": 1284, "either": [76, 159, 214, 218, 219, 236, 245, 246, 270, 271, 313, 444, 535, 579, 581, 594, 665, 696, 704, 760, 778, 799, 821, 822, 825, 840, 889, 893, 895, 1029, 1137, 1139, 1216, 1262, 1275, 1292], "element": [13, 14, 25, 154, 155, 158, 161, 173, 175, 182, 214, 238, 246, 259, 261, 276, 284, 313, 330, 331, 332, 333, 334, 335, 346, 347, 372, 373, 376, 379, 380, 381, 382, 384, 385, 386, 387, 388, 394, 395, 448, 449, 453, 466, 477, 488, 496, 498, 499, 500, 503, 508, 516, 517, 518, 519, 523, 529, 531, 532, 535, 536, 574, 575, 584, 587, 595, 596, 598, 600, 602, 604, 606, 607, 609, 611, 616, 621, 622, 623, 627, 628, 629, 657, 658, 669, 683, 684, 686, 687, 693, 704, 710, 712, 754, 755, 759, 767, 778, 794, 803, 849, 851, 854, 859, 889, 905, 906, 907, 908, 909, 910, 921, 922, 946, 952, 955, 958, 959, 960, 961, 963, 964, 965, 966, 967, 972, 973, 1032, 1033, 1038, 1049, 1059, 1068, 1071, 1072, 1079, 1081, 1082, 1083, 1086, 1091, 1099, 1100, 1101, 1102, 1114, 1115, 1118, 1134, 1141, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1165, 1173, 1174, 1175, 1179, 1180, 1208, 1209, 1220, 1234, 1235, 1236, 1240, 1247, 1248, 1252, 1262, 1279, 1280], "elementwis": [535, 595, 596, 598, 600, 602, 604, 607, 609, 611, 778, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1262], "elif": 768, "elig": [827, 889], "elimin": [485, 778, 1069, 1262], "elis": [230, 313, 832, 889], "ellipsi": [202, 313], "elppa": 1284, "els": [130, 768], "email": [639, 1190], "email_part": [639, 1190], "emphas": [313, 317], "emploi": 895, "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 177, 178, 204, 229, 280, 313, 630, 637, 738, 756, 797, 798, 817, 831, 857, 889, 895, 955, 957, 1056, 1181, 1188, 1262], "en": [20, 36, 313], "enabl": [28, 29, 41, 45, 46, 84, 85, 141, 146, 152, 153, 154, 155, 167, 170, 251, 272, 287, 313, 325, 327, 588, 589, 617, 632, 641, 653, 692, 774, 778, 799, 842, 861, 889, 897, 902, 903, 1145, 1146, 1167, 1183, 1192, 1204, 1244, 1251, 1262], "enable_string_cach": 84, "enclos": [459, 778], "encod": [59, 65, 75, 126, 129, 130, 143, 268, 313, 316, 367, 459, 592, 634, 677, 778, 941, 1149, 1185, 1238, 1262, 1267], "encount": [107, 129, 130, 143, 204, 313, 566, 567, 645, 646, 710, 714, 728, 778, 817, 889, 1127, 1128, 1196, 1197, 1262], "end": [33, 36, 42, 129, 130, 143, 204, 238, 313, 366, 369, 371, 397, 422, 447, 521, 631, 636, 639, 643, 649, 655, 659, 660, 661, 664, 701, 706, 718, 719, 720, 721, 722, 723, 726, 734, 735, 765, 766, 768, 774, 778, 817, 818, 826, 836, 889, 895, 943, 975, 1004, 1066, 1104, 1187, 1190, 1194, 1200, 1206, 1210, 1211, 1212, 1217, 1262, 1284], "endpoint": [389, 581, 778, 968, 1139, 1262], "ends_a": 1284, "ends_in_digit": 1284, "ends_with": [366, 371, 631, 659, 895, 1210, 1282], "ends_with_expr": 369, "ends_with_lit": 369, "engin": [14, 34, 131, 132, 134, 165, 203, 218, 223, 271, 278, 299, 313, 535, 757, 778, 799, 816, 821, 827, 831, 855, 873, 889, 1118, 1243, 1262, 1274, 1289], "engine_opt": [34, 134, 313], "enginetyp": [799, 889], "enough": [499, 624, 778, 1082, 1176, 1262], "ensur": [10, 36, 132, 158, 161, 170, 195, 203, 236, 246, 271, 313, 473, 535, 778, 813, 816, 827, 889, 893, 895, 897, 1243, 1262], "enter": 168, "entir": [36, 53, 54, 134, 140, 313, 799, 800, 889], "entri": [313, 889, 1289], "entropi": [778, 1262], "enumer": [121, 129, 130, 134, 140, 143, 217, 313], "env": [4, 164], "env_onli": 30, "environ": [4, 30, 139, 141, 143, 146, 147, 148, 162, 165, 270, 313], "eol_char": [129, 130, 143], "eparg": 1284, "epoch": [61, 62, 730, 1285], "epoch_": [406, 984], "epoch_n": [406, 984], "epochtimeunit": [406, 730, 984], "eq": [195, 313, 442, 453, 778, 813, 889, 1025, 1262], "eq_miss": [778, 1130, 1262], "equal": [46, 85, 129, 130, 143, 152, 153, 154, 155, 204, 219, 220, 230, 259, 313, 389, 435, 441, 442, 462, 487, 527, 569, 581, 587, 595, 596, 598, 600, 602, 604, 607, 609, 611, 627, 649, 650, 653, 675, 704, 754, 755, 768, 774, 778, 817, 822, 823, 832, 849, 889, 968, 1004, 1025, 1110, 1130, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1200, 1201, 1204, 1226, 1262, 1281, 1292], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 204, 214, 234, 313, 322, 326, 441, 442, 444, 457, 462, 464, 487, 534, 553, 555, 568, 569, 570, 573, 579, 648, 671, 673, 674, 680, 688, 695, 778, 817, 889, 1024, 1025, 1029, 1043, 1045, 1068, 1070, 1117, 1129, 1130, 1199, 1222, 1224, 1225, 1262, 1272, 1280], "err": 640, "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 143, 176, 238, 246, 271, 313, 324, 349, 350, 367, 396, 502, 504, 506, 557, 589, 631, 634, 638, 640, 642, 645, 646, 665, 667, 668, 672, 778, 796, 800, 873, 889, 924, 925, 941, 974, 1085, 1087, 1089, 1146, 1182, 1185, 1189, 1191, 1193, 1196, 1197, 1216, 1218, 1219, 1223, 1243, 1262, 1287], "escap": [129, 130, 132, 143], "esp": 14, "especi": [157, 593, 778, 889, 1150, 1262], "espresso": 895, "est": 722, "establish": 131, "estim": [129, 130, 174, 190, 313, 329, 445, 446, 485, 700, 778, 793, 889, 1027, 1030, 1031, 1069, 1262], "estimated_s": [313, 1262], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 313, 536, 778, 893, 895, 1164, 1166, 1262, 1285], "eu": [144, 145], "eur": [202, 313, 1292], "europ": [401, 405, 421, 979, 983, 1003], "eval": [269, 313, 535, 536, 725, 778, 1118, 1240, 1262], "evalu": [42, 43, 44, 45, 148, 193, 195, 219, 313, 326, 339, 341, 342, 388, 453, 470, 490, 491, 527, 573, 696, 698, 701, 705, 719, 720, 722, 723, 725, 734, 735, 750, 753, 760, 765, 766, 768, 769, 778, 799, 813, 819, 821, 822, 889, 914, 916, 917, 967, 1038, 1073, 1074, 1253, 1262, 1281], "even": [33, 42, 129, 313, 444, 578, 581, 778, 889, 895, 1029, 1139, 1262], "evenli": [204, 313, 817, 889], "event": [54, 800, 889], "eventu": [34, 313], "everi": [14, 33, 42, 129, 130, 134, 140, 143, 198, 204, 267, 283, 313, 341, 342, 343, 344, 347, 349, 355, 384, 385, 386, 387, 388, 422, 435, 449, 461, 492, 493, 497, 500, 503, 504, 505, 513, 516, 521, 525, 593, 637, 714, 715, 778, 815, 817, 889, 916, 917, 918, 919, 922, 924, 930, 963, 964, 965, 966, 967, 1004, 1017, 1033, 1042, 1075, 1076, 1080, 1083, 1086, 1087, 1088, 1096, 1099, 1104, 1108, 1150, 1188, 1262], "everybodi": [632, 653, 1183, 1204], "everyth": 895, "ew": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "ewm_mean": [778, 1262], "ewm_mean_bi": [778, 1262], "ewm_std": [778, 1262], "ewm_var": [778, 1262], "ewma": [444, 778, 1029, 1262], "exact": [154, 157, 159, 163, 219, 257, 313, 329, 457, 637, 663, 664, 665, 667, 668, 688, 778, 822, 889, 1188, 1216, 1218, 1219], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 313, 657, 658, 663, 664, 724, 889, 1171, 1208, 1209, 1214, 1215, 1262], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 778, 790, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 893, 894, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1267, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291], "exc_tb": 1289, "exc_typ": 1289, "exc_val": 1289, "exce": [202, 313], "excel": [32, 36, 128, 134, 313, 790], "excelread": 134, "excelspreadsheetengin": 134, "except": [0, 185, 199, 206, 219, 222, 264, 313, 374, 589, 643, 666, 726, 778, 790, 806, 822, 889, 895, 947, 1049, 1072, 1146, 1194, 1217, 1234, 1243, 1262, 1288], "exclud": [159, 163, 204, 313, 373, 384, 387, 396, 473, 542, 687, 706, 774, 778, 817, 889, 895, 974, 1054, 1262], "excluded_dtyp": [159, 160, 163], "exclus": [246, 313, 695, 701, 734, 735, 778], "execut": [35, 46, 55, 131, 132, 221, 260, 313, 391, 499, 692, 757, 778, 795, 799, 805, 827, 836, 850, 889, 893, 1082, 1251, 1262, 1272, 1273, 1274, 1276, 1289, 1291], "execute_glob": 1289, "execute_opt": [131, 132], "exist": [1, 34, 35, 36, 47, 92, 133, 144, 159, 185, 199, 238, 277, 282, 287, 288, 313, 324, 366, 369, 371, 400, 421, 708, 778, 802, 806, 808, 838, 841, 858, 860, 861, 862, 889, 895, 978, 1003, 1291], "existing_t": 1291, "existing_table_path": [35, 313], "exit": [46, 84, 168, 1277, 1289], "exp": [443, 444, 445, 446, 778, 1028, 1029, 1030, 1031, 1262, 1282], "exp_a": 1283, "expand": [129, 141, 143, 148, 449, 541, 543, 587, 778, 893, 895, 1033, 1262], "expand_selector": 895, "expans": 676, "expect": [63, 65, 97, 105, 113, 129, 131, 143, 153, 155, 527, 536, 738, 778, 825, 827, 889], "expens": [129, 130, 139, 141, 143, 147, 148, 162, 164, 216, 223, 246, 247, 248, 277, 278, 313, 536, 778, 802, 804, 808, 841, 855, 860, 889, 1034, 1118, 1262, 1292], "experiment": [220, 275, 313, 823, 861, 889], "explain": [53, 54, 173, 221, 313, 799, 800, 889, 1288], "explainformat": [809, 889], "explicit": [36, 91, 131, 143, 157, 260, 282, 313, 752, 850, 858, 889], "explicitli": [91, 132, 157, 159, 168, 199, 313, 588, 760, 778, 789, 1289], "explod": [313, 373, 455, 574, 590, 687, 778, 889, 893, 1147, 1262, 1280], "explor": [183, 313, 804, 889], "expon": [579, 778, 1137, 1262, 1283], "exponenti": [443, 444, 445, 446, 448, 579, 778, 1028, 1029, 1030, 1031, 1032, 1262, 1283], "export": [36, 37, 38, 171, 216, 217, 247, 248, 265, 267, 270, 313, 774, 895, 898, 1237, 1262], "expos": 790, "expr": [1, 47, 48, 49, 50, 51, 191, 193, 194, 218, 219, 220, 234, 238, 246, 251, 252, 270, 275, 287, 288, 313, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 778, 779, 780, 783, 784, 785, 786, 787, 810, 811, 812, 821, 822, 823, 837, 842, 843, 861, 862, 889, 893, 895, 967, 974, 977, 978, 992, 1000, 1024, 1025, 1029, 1036, 1037, 1041, 1043, 1045, 1070, 1082, 1088, 1104, 1108, 1117, 1129, 1130, 1182, 1187, 1193, 1210, 1262, 1287], "expr1": [1281, 1289], "expr2": [1281, 1289], "expr_unique_subset": [234, 313], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 175, 191, 193, 195, 203, 218, 219, 223, 234, 238, 246, 251, 252, 256, 259, 270, 275, 276, 287, 288, 290, 292, 299, 313, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 338, 339, 343, 344, 345, 346, 347, 350, 361, 366, 367, 368, 369, 370, 371, 373, 378, 379, 380, 381, 382, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 447, 449, 450, 452, 453, 457, 459, 460, 462, 463, 464, 465, 470, 473, 474, 475, 476, 477, 478, 479, 487, 488, 492, 493, 495, 496, 499, 500, 506, 508, 526, 527, 533, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 553, 555, 557, 558, 560, 562, 564, 565, 568, 569, 571, 573, 574, 578, 579, 580, 581, 583, 587, 588, 589, 590, 592, 593, 615, 616, 617, 620, 622, 623, 625, 627, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 655, 656, 657, 658, 666, 670, 679, 680, 683, 684, 687, 688, 689, 691, 692, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 742, 744, 747, 750, 752, 753, 754, 755, 756, 758, 760, 762, 764, 765, 766, 768, 769, 774, 777, 790, 794, 799, 800, 809, 810, 813, 816, 821, 822, 836, 842, 843, 846, 847, 849, 854, 861, 862, 863, 865, 866, 873, 889, 893, 895, 921, 956, 967, 974, 977, 978, 992, 1024, 1025, 1029, 1035, 1043, 1045, 1054, 1070, 1079, 1082, 1117, 1118, 1129, 1130, 1145, 1146, 1165, 1169, 1182, 1183, 1184, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1202, 1203, 1204, 1217, 1221, 1262, 1280, 1281, 1283, 1284, 1288], "exprmetanamespac": [540, 544], "ext": 131, "extend": [0, 119, 285, 313, 450, 778, 790, 893, 904, 1035, 1262], "extend_const": [778, 1262], "extens": [272, 313, 1244, 1262], "extern": [863, 889], "extra": [35, 129, 130, 133, 135, 137, 143, 144, 145, 192, 204, 313, 778, 817, 889, 893, 1034, 1262], "extract": [123, 173, 260, 313, 399, 402, 404, 407, 409, 410, 411, 412, 413, 414, 417, 419, 420, 423, 425, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 578, 639, 640, 641, 645, 646, 655, 657, 778, 977, 980, 981, 982, 985, 987, 991, 992, 993, 995, 996, 999, 1001, 1002, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1021, 1190, 1191, 1192, 1196, 1197, 1206, 1282], "extract_numb": [578, 778], "extracted_nr": 639, "extrem": [450, 595, 778, 1035, 1151, 1262], "extrema": [619, 778, 1170, 1262], "f": [48, 130, 131, 195, 202, 217, 265, 271, 277, 281, 313, 322, 362, 370, 527, 619, 637, 665, 668, 708, 778, 813, 889, 895, 937, 1110, 1188, 1216, 1219, 1262, 1267, 1280], "f32": [1, 50, 176, 260, 269, 275, 313, 619, 757, 778, 796, 850, 889, 895, 1116, 1262, 1287], "f4": [271, 313], "f5ed2452": [36, 313], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 176, 177, 178, 181, 183, 184, 185, 188, 193, 194, 197, 201, 202, 203, 204, 209, 210, 218, 219, 225, 226, 227, 228, 232, 238, 239, 240, 258, 259, 261, 263, 275, 284, 287, 292, 295, 297, 300, 301, 302, 303, 305, 306, 313, 321, 324, 330, 331, 332, 333, 334, 335, 353, 359, 364, 370, 374, 376, 377, 379, 380, 381, 389, 390, 394, 395, 423, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 456, 457, 462, 464, 471, 472, 480, 481, 482, 483, 485, 487, 499, 510, 511, 523, 529, 530, 531, 532, 534, 537, 538, 539, 552, 555, 557, 566, 567, 568, 569, 575, 579, 581, 582, 583, 584, 588, 589, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 621, 622, 623, 624, 628, 629, 679, 683, 684, 688, 693, 702, 703, 707, 708, 710, 712, 725, 726, 740, 743, 744, 745, 757, 759, 767, 774, 778, 796, 797, 804, 806, 811, 812, 816, 817, 820, 821, 822, 829, 830, 837, 849, 851, 859, 861, 863, 866, 869, 871, 874, 875, 876, 877, 879, 880, 889, 895, 905, 906, 907, 908, 909, 910, 928, 934, 939, 944, 952, 953, 958, 959, 960, 968, 969, 972, 973, 1005, 1028, 1029, 1030, 1031, 1032, 1036, 1040, 1050, 1052, 1053, 1082, 1093, 1094, 1106, 1112, 1113, 1114, 1115, 1134, 1137, 1139, 1141, 1146, 1151, 1153, 1154, 1156, 1157, 1158, 1160, 1161, 1162, 1173, 1174, 1175, 1179, 1235, 1236, 1250, 1262, 1271, 1279, 1280, 1283, 1286, 1289, 1292], "f_string": 729, "fa1e": [670, 1221], "face": [139, 141, 143, 146, 147, 148], "facil": 131, "facilit": [179, 313], "factor": [443, 445, 446, 685, 778, 1028, 1030, 1031, 1245, 1262], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 172, 271, 278, 313, 339, 425, 527, 665, 667, 668, 672, 778, 855, 889, 1118, 1216, 1218, 1219, 1223, 1243, 1262, 1287], "fall": [148, 389, 581, 778, 799, 889, 968, 1139, 1262], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 172, 175, 176, 177, 178, 183, 189, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 221, 226, 227, 233, 234, 236, 238, 239, 246, 247, 248, 249, 251, 254, 257, 259, 260, 263, 266, 268, 271, 272, 276, 277, 278, 282, 283, 285, 287, 295, 297, 300, 301, 303, 306, 313, 325, 326, 327, 338, 341, 342, 345, 349, 350, 358, 363, 366, 369, 371, 373, 374, 383, 384, 385, 386, 387, 388, 389, 396, 408, 423, 440, 441, 442, 443, 445, 446, 464, 465, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 490, 491, 495, 499, 502, 504, 506, 515, 522, 528, 534, 535, 536, 540, 542, 544, 546, 549, 568, 569, 571, 573, 576, 577, 581, 584, 595, 596, 598, 600, 602, 604, 606, 607, 609, 611, 615, 617, 619, 624, 626, 627, 630, 631, 632, 633, 636, 641, 642, 644, 645, 651, 652, 653, 656, 657, 659, 665, 667, 668, 670, 687, 689, 692, 695, 696, 697, 698, 699, 701, 704, 705, 706, 709, 710, 713, 714, 719, 720, 722, 723, 734, 735, 738, 750, 753, 757, 760, 765, 766, 768, 769, 778, 794, 796, 797, 798, 799, 800, 804, 809, 816, 817, 821, 822, 825, 827, 836, 842, 845, 847, 849, 850, 854, 855, 858, 861, 869, 871, 874, 875, 877, 880, 889, 893, 895, 902, 903, 913, 916, 917, 920, 924, 925, 933, 938, 940, 941, 943, 945, 947, 949, 951, 954, 955, 962, 963, 964, 965, 966, 967, 968, 974, 986, 1005, 1025, 1026, 1028, 1030, 1031, 1038, 1039, 1044, 1046, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1073, 1074, 1078, 1082, 1085, 1087, 1089, 1098, 1105, 1111, 1124, 1130, 1132, 1135, 1136, 1139, 1141, 1142, 1143, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1167, 1171, 1176, 1178, 1181, 1182, 1183, 1184, 1187, 1192, 1193, 1195, 1196, 1202, 1203, 1204, 1207, 1208, 1210, 1216, 1218, 1219, 1221, 1238, 1243, 1244, 1248, 1251, 1253, 1262, 1272, 1274, 1280, 1284, 1289], "far": [36, 313], "fashion": [218, 313, 809, 836, 847, 889], "fast": [41, 43, 45, 162, 164, 313, 450, 617, 778, 889, 893, 1035, 1167, 1262, 1292], "fast_executemani": [34, 313], "faster": [42, 43, 44, 45, 131, 134, 192, 271, 281, 313, 536, 690, 778, 889, 1034, 1118, 1262], "fastexcel": [134, 151], "favor": [34, 313], "fay": 126, "feat1": [270, 275, 313], "feat2": [270, 275, 313], "feather": [37, 135, 146, 313, 790], "featur": [1, 41, 52, 63, 65, 270, 275, 313], "feature_0": [863, 889], "feature_0_train": [863, 889], "feature_1": [863, 889], "feature_nam": [275, 313], "feb": [151, 1284], "februari": 1284, "fed": 661, "feel": [632, 653, 1183, 1204], "fetch": [125, 799, 818, 826, 889], "fetch_california_h": [275, 313], "few": [202, 313], "fewer": [643, 666, 889, 1194, 1217], "ff": 1279, "ff00": [670, 1221], "fff": 1, "ffff00": [367, 368, 634, 941, 942, 1185], "ffffff": [36, 313], "ffi": [190, 313, 1027, 1262], "fgg": 895, "fghi": 1284, "fh": 130, "fiction": 1271, "field": [32, 33, 35, 42, 76, 109, 112, 119, 279, 313, 362, 527, 535, 536, 559, 561, 563, 592, 639, 640, 645, 657, 658, 678, 679, 692, 714, 715, 739, 760, 778, 856, 889, 937, 1110, 1118, 1149, 1191, 1208, 1209, 1230, 1232, 1262, 1285], "field_0": [362, 527, 937, 1110], "field_1": [362, 527, 937, 1110], "field_2": [937, 1110], "field_n": [362, 527, 937, 1110], "field_nam": [536, 778, 1118, 1262], "figsiz": [836, 847, 889], "figur": [614, 778, 847, 889, 1162, 1262], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 253, 313, 391, 459, 548, 551, 778, 805, 844, 889, 893, 1034, 1262], "file_cache_ttl": [139, 143, 146, 147], "filenam": 135, "filesystem": [35, 133, 144, 145, 313], "fill": [47, 55, 177, 193, 194, 256, 281, 313, 317, 365, 384, 387, 451, 452, 458, 471, 472, 596, 598, 600, 602, 604, 607, 609, 611, 618, 729, 750, 753, 769, 778, 811, 812, 846, 863, 889, 1036, 1037, 1052, 1053, 1131, 1152, 1153, 1155, 1158, 1159, 1160, 1169, 1262], "fill_char": [649, 650, 1200, 1201], "fill_nan": [194, 313, 452, 778, 812, 889, 1037, 1262], "fill_nul": [47, 193, 313, 451, 778, 811, 863, 889, 1036, 1262], "fill_valu": [256, 281, 313, 618, 778, 846, 889, 1169, 1262], "fillnullstrategi": [194, 313, 452, 778, 812, 889, 1037, 1262], "film": 1271, "filter": [1, 48, 133, 143, 144, 148, 149, 187, 211, 212, 213, 238, 299, 313, 545, 547, 636, 659, 694, 718, 721, 728, 757, 768, 778, 807, 819, 850, 873, 889, 895, 1166, 1262, 1278], "final": [13, 36, 47, 148, 219, 221, 313, 443, 445, 446, 778, 804, 822, 889, 893, 1028, 1030, 1031, 1262, 1290], "find": [55, 200, 313, 616, 631, 632, 778, 1165, 1183, 1262], "find_pat": 642, "fine": [799, 889], "finish": [192, 313, 1034, 1262], "finit": [475, 688, 710, 778, 1057, 1262], "first": [41, 47, 129, 130, 134, 135, 137, 140, 141, 143, 148, 152, 153, 154, 155, 173, 202, 204, 206, 219, 222, 223, 233, 237, 238, 245, 264, 268, 269, 277, 278, 283, 290, 296, 313, 338, 340, 349, 388, 392, 416, 418, 422, 438, 457, 467, 476, 489, 497, 499, 504, 505, 527, 535, 536, 546, 578, 579, 594, 616, 627, 631, 637, 638, 642, 643, 645, 646, 651, 652, 666, 673, 707, 714, 728, 732, 768, 774, 778, 799, 817, 818, 822, 826, 835, 840, 855, 863, 865, 870, 889, 895, 913, 924, 967, 969, 970, 998, 1000, 1004, 1020, 1049, 1058, 1072, 1080, 1082, 1087, 1088, 1110, 1118, 1165, 1178, 1188, 1189, 1191, 1193, 1194, 1196, 1197, 1202, 1203, 1217, 1224, 1234, 1238, 1240, 1243, 1262, 1281, 1282, 1284, 1290, 1292], "first_column": [36, 313], "first_non_nul": [527, 1110], "first_part": [657, 658, 1208, 1209], "fisher": [485, 624, 778, 1069, 1176, 1262], "fit": [126, 216, 257, 281, 313, 619, 753, 778, 1170, 1171, 1262], "five": [274, 313, 1292], "fix": [10, 56, 65, 157, 438, 724, 1020], "flag": [52, 156, 271, 313, 617, 631, 638, 639, 642, 651, 652, 778, 809, 827, 889, 895, 1167, 1182, 1189, 1190, 1193, 1202, 1203, 1243, 1262, 1284], "flat": [126, 248, 313, 500, 590, 778, 1083, 1147, 1262], "flatten": 778, "flavour": [36, 131, 313], "flight": 131, "flight_sql": 131, "flightsql": 131, "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 172, 183, 190, 193, 219, 240, 249, 270, 271, 305, 313, 345, 377, 389, 394, 395, 423, 440, 441, 442, 443, 445, 446, 451, 456, 457, 462, 464, 471, 475, 478, 480, 481, 482, 483, 487, 495, 515, 530, 534, 537, 552, 566, 567, 568, 569, 579, 581, 582, 595, 596, 598, 600, 602, 604, 605, 607, 609, 611, 613, 615, 621, 688, 751, 753, 778, 804, 811, 822, 837, 847, 879, 889, 895, 920, 947, 953, 968, 969, 971, 972, 973, 1005, 1023, 1027, 1028, 1030, 1031, 1036, 1040, 1050, 1069, 1078, 1098, 1113, 1127, 1128, 1137, 1138, 1139, 1140, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1161, 1163, 1166, 1173, 1176, 1180, 1233, 1243, 1252, 1262, 1289, 1292], "float16": [275, 313], "float32": [1, 10, 33, 42, 50, 176, 197, 269, 270, 271, 275, 313, 444, 738, 778, 796, 889, 895, 1029, 1056, 1116, 1241, 1243, 1246, 1262], "float4": [260, 313, 757, 850, 889, 1287], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 179, 188, 190, 197, 250, 275, 287, 313, 330, 331, 332, 333, 334, 335, 370, 374, 379, 380, 381, 390, 423, 444, 447, 480, 481, 583, 622, 623, 683, 684, 726, 750, 753, 769, 774, 778, 801, 808, 841, 861, 889, 895, 1005, 1029, 1244, 1250, 1262], "float_list": 72, "float_precis": [9, 10, 27, 33, 36, 42, 313, 889], "float_scientif": [33, 42, 313, 889], "floatfmt": 11, "floor": [49, 457, 778, 1262, 1282], "floor_a": 1283, "floordiv": [688, 778], "fmt": [11, 219, 313, 470, 729, 778, 819, 822, 889], "fmt_number": [313, 317], "fmt_str_length": [12, 719, 720, 722, 723], "fmt_table_cell_list_len": 13, "fmt_titl": [36, 313], "fn": [714, 715, 728, 752], "foggi": [651, 652, 1202, 1203], "fold": [313, 546, 707, 714, 715, 752], "folder": 149, "follow": [36, 41, 52, 129, 130, 131, 133, 134, 140, 143, 144, 145, 204, 219, 223, 237, 245, 271, 283, 313, 418, 422, 435, 444, 535, 578, 579, 584, 594, 597, 599, 601, 603, 605, 606, 608, 610, 612, 621, 678, 688, 703, 719, 720, 722, 723, 740, 765, 766, 768, 770, 771, 773, 778, 779, 780, 783, 785, 786, 787, 817, 822, 835, 840, 889, 895, 1000, 1004, 1017, 1029, 1137, 1141, 1164, 1166, 1173, 1243, 1254, 1256, 1258, 1262, 1263, 1268, 1269, 1270, 1287, 1292], "font": [36, 313], "font_color": [36, 313], "font_siz": [36, 313], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 240, 242, 243, 246, 249, 250, 251, 253, 255, 258, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 277, 278, 279, 284, 285, 286, 291, 313, 375, 389, 391, 418, 461, 467, 470, 489, 540, 542, 544, 545, 546, 547, 548, 549, 550, 581, 590, 630, 633, 635, 637, 639, 640, 644, 654, 656, 658, 660, 661, 662, 663, 664, 671, 674, 682, 700, 710, 711, 712, 727, 731, 732, 733, 736, 737, 741, 743, 745, 746, 748, 749, 751, 756, 759, 763, 767, 768, 774, 778, 796, 801, 802, 806, 807, 808, 813, 819, 820, 821, 834, 838, 841, 842, 855, 856, 860, 863, 889, 894, 895, 948, 968, 1000, 1089, 1137, 1139, 1147, 1184, 1186, 1188, 1190, 1191, 1205, 1209, 1214, 1215, 1222, 1225, 1262, 1276, 1278, 1279, 1280, 1281, 1284, 1287], "foo1": 1284, "foo11": [197, 313], "foo_": [543, 656, 729], "foo_1": [268, 313], "foo_2": [268, 313], "foo_3_4": 1284, "foo_a": [238, 313], "foo_a_bar_1": 729, "foo_at_1": 1280, "foo_b": [238, 313], "foo_b_bar_2": 729, "foo_bar": [540, 544, 656, 738, 1276], "foo_bar2": [540, 544], "foo_bar_baz": 656, "foo_c_bar_3": 729, "foo_low": [671, 1284], "foo_mean": 1280, "foo_std": 1279, "foo_strip": 660, "foo_strip_end": 661, "foo_strip_start": 662, "foo_sum": [1279, 1280], "foo_uniqu": 1280, "foo_upp": [674, 1284], "foo_var": 1279, "foobar": [663, 664, 1214, 1215, 1284], "foobarbar": [664, 1215], "foofoobar": [663, 1214], "foral": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "forc": [219, 223, 271, 299, 313, 527, 821, 822, 873, 889, 1118, 1243, 1262], "force_parallel": [219, 313, 821, 822, 889], "form": [33, 42, 116, 118, 119, 120, 122, 138, 139, 147, 216, 247, 281, 313, 575, 673, 778, 889, 1134, 1224, 1262, 1284], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 41, 42, 87, 127, 129, 130, 131, 134, 135, 137, 140, 143, 149, 171, 184, 191, 202, 216, 229, 238, 247, 248, 253, 267, 280, 311, 313, 317, 391, 422, 424, 427, 548, 549, 665, 667, 668, 672, 724, 778, 805, 809, 810, 831, 844, 857, 889, 898, 1006, 1009, 1216, 1218, 1219, 1223, 1261, 1284, 1285], "formula": [36, 313, 440, 778, 1023, 1262], "fortran": [270, 271, 313], "forward": [194, 219, 256, 313, 357, 396, 415, 452, 458, 520, 618, 778, 812, 822, 846, 889, 932, 974, 997, 1037, 1103, 1169, 1262], "forward_fil": [283, 313, 365, 384, 387, 618, 778], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 188, 260, 313, 616, 642, 646, 663, 664, 665, 668, 778, 850, 889, 1165, 1193, 1197, 1214, 1215, 1216, 1219, 1262, 1274, 1289], "four": [274, 313, 1289], "fourth": [485, 778, 1069, 1262], "frac": [443, 444, 445, 446, 624, 778, 1028, 1029, 1030, 1031, 1176, 1262], "fraction": [33, 42, 152, 153, 154, 155, 249, 313, 423, 515, 575, 615, 665, 668, 778, 889, 1005, 1098, 1134, 1163, 1216, 1219, 1262], "fragment": 1289, "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 176, 177, 183, 216, 217, 221, 223, 230, 234, 237, 246, 247, 248, 260, 275, 281, 282, 313, 757, 796, 797, 804, 832, 835, 850, 858, 889, 895, 955, 1262, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1288, 1292], "frame_data": [1273, 1276], "frameinittyp": [313, 889], "frametyp": [47, 1289], "framework": [238, 280, 313, 857, 889], "freedom": [261, 284, 313, 523, 529, 607, 608, 611, 612, 629, 693, 710, 712, 754, 755, 759, 767, 778, 851, 859, 889, 1158, 1160, 1180, 1252, 1262], "freeli": [757, 850, 889, 895], "freez": [36, 313], "freeze_pan": [36, 313], "frequenc": [283, 313, 692, 778, 1251, 1262], "frequent": [1164, 1166, 1262], "fri": [313, 316], "fridai": [204, 313, 396, 424, 427, 706, 817, 889, 974, 1006, 1009], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 173, 176, 183, 184, 185, 190, 192, 195, 196, 202, 204, 216, 217, 218, 219, 220, 221, 229, 238, 242, 245, 246, 248, 249, 251, 252, 260, 268, 275, 277, 278, 280, 281, 282, 283, 289, 313, 316, 317, 362, 370, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 447, 457, 459, 471, 485, 503, 515, 527, 536, 566, 567, 569, 574, 575, 578, 581, 583, 594, 595, 597, 599, 601, 603, 605, 608, 610, 612, 615, 627, 638, 639, 643, 645, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 690, 702, 703, 706, 707, 718, 719, 720, 721, 722, 723, 724, 738, 753, 757, 764, 765, 766, 774, 777, 778, 796, 804, 805, 806, 813, 817, 821, 822, 823, 831, 838, 840, 842, 843, 850, 855, 857, 858, 863, 864, 889, 895, 937, 944, 968, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1027, 1029, 1034, 1069, 1086, 1098, 1110, 1127, 1128, 1130, 1131, 1134, 1139, 1151, 1163, 1189, 1190, 1194, 1196, 1206, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1223, 1238, 1253, 1262, 1271, 1272, 1273, 1274, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292], "from_arrai": 757, "from_arrow": 117, "from_json": 778, "from_panda": 117, "from_repr": [269, 313, 1240, 1262], "fromkei": [48, 50], "front": [204, 313, 817, 889], "fruit": [266, 313, 591, 636, 659, 666, 778, 1187, 1210, 1217], "fruits_revers": [591, 778], "fsspec": [129, 130, 135, 137, 144, 145, 151], "fsspecfileio": 145, "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 139, 143, 144, 145, 147, 149, 218, 282, 313, 643, 645, 665, 666, 667, 668, 672, 719, 720, 821, 827, 858, 889, 895, 1194, 1196, 1216, 1217, 1218, 1219, 1223, 1262, 1278, 1292], "full_sent": 709, "fulli": [161, 237, 249, 271, 313], "funcnam": [36, 313], "function": [0, 36, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 170, 172, 175, 181, 184, 190, 197, 220, 223, 229, 237, 238, 242, 260, 270, 271, 272, 275, 276, 277, 280, 281, 282, 299, 313, 316, 317, 325, 362, 372, 373, 388, 389, 391, 422, 443, 445, 446, 468, 527, 535, 536, 558, 559, 574, 578, 581, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 621, 624, 685, 686, 687, 696, 700, 711, 713, 714, 715, 727, 728, 730, 732, 733, 736, 739, 740, 743, 745, 748, 750, 752, 754, 755, 759, 763, 767, 769, 774, 778, 790, 794, 800, 805, 823, 827, 831, 835, 838, 850, 854, 857, 858, 865, 873, 889, 893, 897, 937, 946, 951, 967, 968, 1004, 1027, 1028, 1030, 1031, 1050, 1110, 1118, 1139, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1164, 1166, 1171, 1173, 1176, 1241, 1244, 1246, 1247, 1262, 1267, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1291, 1292], "function_nam": 893, "further": 774, "futur": [54, 172, 183, 254, 313, 800, 804, 845, 889], "g": [33, 42, 126, 129, 133, 135, 137, 144, 149, 161, 172, 184, 215, 271, 281, 313, 322, 391, 444, 447, 536, 619, 726, 778, 805, 838, 889, 1029, 1262, 1292], "g1": [453, 694, 778], "g2": [453, 694, 778], "g_1": [624, 778, 1176, 1262], "gag": 26, "gamma": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "gantt": [836, 889], "gather": [130, 198, 313, 338, 461, 503, 704, 778, 815, 889, 913, 1042, 1086, 1262], "gather_everi": [313, 778, 889, 1262], "gb": [190, 313, 370, 1027, 1262], "gbp": 1292, "gc": [35, 133, 144, 145, 313], "gca": 26, "gcaacgcatata": 26, "gcp": [139, 141, 143, 145, 146, 147, 148], "gdp": [219, 313, 822, 889], "gdp2": [219, 313, 822, 889], "gdp_date": [219, 313, 822, 889], "ge": [778, 1262], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 172, 179, 181, 238, 249, 268, 271, 277, 313, 374, 515, 615, 620, 701, 719, 722, 734, 735, 737, 753, 765, 766, 778, 889, 947, 1098, 1163, 1172, 1238, 1262, 1292], "geq": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "germani": [219, 313, 822, 889], "get": [47, 54, 136, 142, 149, 173, 175, 179, 180, 188, 196, 199, 201, 204, 206, 207, 211, 213, 214, 222, 225, 232, 233, 238, 245, 246, 250, 255, 258, 264, 272, 276, 286, 296, 307, 313, 323, 336, 337, 338, 340, 348, 351, 363, 370, 373, 375, 384, 385, 386, 387, 396, 406, 454, 460, 467, 484, 486, 489, 501, 507, 528, 537, 538, 539, 545, 547, 552, 566, 567, 576, 577, 582, 593, 594, 625, 629, 637, 681, 682, 686, 687, 689, 693, 704, 706, 727, 732, 736, 740, 741, 742, 743, 745, 746, 747, 749, 759, 763, 767, 778, 794, 799, 800, 802, 808, 814, 817, 818, 824, 826, 840, 841, 848, 853, 854, 860, 870, 881, 889, 893, 894, 899, 911, 912, 913, 914, 915, 923, 926, 938, 944, 948, 954, 963, 964, 965, 966, 974, 984, 1022, 1039, 1044, 1049, 1054, 1055, 1067, 1072, 1084, 1090, 1111, 1119, 1121, 1122, 1124, 1126, 1127, 1128, 1135, 1136, 1140, 1150, 1177, 1180, 1188, 1234, 1238, 1244, 1248, 1252, 1262], "get_chunk": 1262, "get_column": [172, 273, 313], "get_column_index": 313, "get_worksheet_by_nam": [36, 313], "gevent": [54, 151, 800, 889], "ghi": [322, 639, 778, 895, 1190], "gil": [536, 778], "git": 52, "github": [132, 313], "give": [139, 146, 147, 219, 229, 278, 280, 313, 406, 457, 485, 587, 688, 692, 778, 790, 822, 831, 855, 857, 889, 984, 1069, 1251, 1262, 1288], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 170, 190, 191, 193, 204, 214, 223, 236, 237, 246, 247, 248, 256, 259, 275, 282, 313, 345, 357, 362, 370, 373, 378, 397, 401, 424, 426, 427, 440, 444, 468, 473, 495, 520, 527, 530, 536, 574, 578, 584, 587, 588, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 618, 639, 640, 649, 650, 665, 668, 675, 678, 687, 726, 727, 736, 739, 740, 753, 754, 755, 778, 810, 817, 827, 835, 846, 849, 858, 873, 889, 894, 895, 897, 920, 932, 937, 944, 956, 975, 979, 1006, 1008, 1009, 1023, 1027, 1029, 1050, 1054, 1068, 1078, 1103, 1110, 1113, 1116, 1118, 1131, 1137, 1141, 1147, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1165, 1169, 1190, 1191, 1200, 1201, 1216, 1219, 1226, 1250, 1253, 1262, 1271, 1273, 1278, 1280, 1283, 1284, 1289, 1291, 1292], "glimps": [183, 206, 313], "glob": [129, 130, 141, 143, 146, 147, 148], "global": [46, 84, 85, 134, 150, 159, 167, 260, 313, 588, 589, 757, 778, 850, 889, 949, 950, 1145, 1146, 1262, 1272, 1274, 1288], "gmt": [401, 405, 421, 979, 983, 1003], "go": [12, 129, 130, 143, 636, 1187], "godfath": 1271, "goe": 12, "gonfruit": 1217, "good": [41, 43, 45, 216, 313, 889, 1283], "goodby": 1, "googl": [133, 144, 145], "gpu": [270, 313, 799, 889, 1241, 1262], "gpu_devic": [270, 313], "gpudevic": [270, 313], "gpuengin": [799, 889], "grade": [1069, 1262], "grain": [799, 889], "granular": 1289, "grape": 1284, "graph": [53, 131, 221, 313, 799, 819, 863, 889], "graphviz": [221, 313, 847, 889], "great": [313, 317], "great_tabl": [313, 317], "greater": [177, 219, 313, 462, 464, 473, 624, 649, 650, 658, 675, 778, 822, 889, 1054, 1176, 1200, 1201, 1209, 1226, 1262], "greatest": [1279, 1282], "greatli": [135, 146], "green": [46, 84, 85, 299, 692, 778, 873, 1251, 1262], "greenlet": [54, 800, 889], "greet": 1, "grid": [471, 778], "grid_point": [471, 778], "gridlin": [36, 313], "gross": 1271, "group": [9, 27, 41, 45, 130, 148, 176, 203, 204, 217, 234, 236, 238, 245, 248, 281, 283, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 323, 373, 388, 449, 455, 460, 463, 499, 535, 536, 545, 547, 574, 584, 593, 594, 626, 627, 631, 638, 639, 640, 642, 651, 652, 687, 692, 740, 778, 796, 816, 817, 840, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 893, 895, 967, 1082, 1150, 1182, 1189, 1190, 1191, 1193, 1202, 1203, 1251, 1262, 1271, 1279, 1288, 1289], "group_bi": [204, 234, 238, 245, 283, 312, 313, 323, 373, 453, 455, 460, 463, 535, 536, 574, 626, 627, 687, 694, 719, 722, 740, 778, 799, 800, 809, 817, 836, 840, 847, 887, 889, 895], "group_by_dynam": [245, 313, 840, 889], "group_by_partit": [836, 889], "group_col": [453, 694, 778], "group_df": [299, 873], "group_dtyp": [574, 778], "group_index": [638, 1189], "group_to_row": [574, 778], "groupbi": [203, 313, 536, 740, 778], "grow": [285, 313], "grown": [208, 313], "gt": [313, 317, 778, 1262], "gte": [453, 694, 778], "guarante": [41, 45, 129, 130, 175, 183, 205, 276, 278, 313, 372, 373, 466, 686, 687, 778, 794, 804, 854, 855, 889, 946, 1048, 1247, 1262], "guid": [778, 893, 1292], "gzip": [41, 45, 313, 889], "h": [281, 313, 322, 424, 427, 619, 651, 652, 665, 668, 672, 778, 1202, 1203, 1216, 1219, 1223, 1284, 1285], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 172, 283, 289, 294, 313, 372, 373, 388, 459, 535, 546, 551, 643, 666, 676, 686, 687, 727, 736, 774, 778, 800, 864, 868, 873, 889, 946, 955, 967, 969, 1194, 1217, 1247, 1262], "half": [275, 313, 422, 443, 444, 445, 446, 778, 1004, 1028, 1029, 1030, 1031, 1262], "half_lif": [443, 444, 445, 446, 778, 1028, 1029, 1030, 1031, 1262], "ham": [31, 33, 35, 37, 38, 41, 176, 179, 180, 181, 185, 186, 187, 188, 189, 195, 200, 205, 206, 208, 218, 222, 224, 226, 228, 231, 235, 240, 242, 243, 246, 249, 250, 251, 258, 261, 262, 264, 268, 269, 271, 272, 273, 278, 284, 285, 313, 375, 549, 774, 796, 801, 802, 806, 807, 808, 813, 821, 834, 838, 841, 842, 855, 863, 889, 948, 1278, 1279], "ham_a": [268, 313], "ham_b": [268, 313], "ham_right": [218, 313, 821, 889], "hamburg": 774, "hand": [36, 129, 130, 143, 313, 516, 517, 518, 519, 1099, 1100, 1101, 1102], "handi": [396, 706, 974], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 195, 199, 313, 392, 497, 637, 675, 778, 799, 800, 813, 889, 893, 970, 1080, 1188, 1226, 1262], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 391, 778, 805, 889], "happen": [131, 401, 581, 778, 979, 1139, 1262], "hard": [143, 827, 889], "harder": [204, 313, 817, 889], "hardwar": 1292, "has_head": [129, 130, 134, 140, 143], "has_nul": [778, 1047, 1262], "has_prefix": 659, "has_suffix": 636, "has_two": 1280, "has_valid": 1262, "hash": [205, 313, 778, 1262], "hash_row": 313, "hat": [651, 652, 1202, 1203], "have": [5, 14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 184, 192, 216, 218, 219, 238, 241, 245, 247, 248, 267, 275, 290, 313, 388, 391, 443, 445, 446, 536, 546, 584, 588, 589, 594, 640, 653, 778, 805, 821, 822, 831, 840, 864, 865, 889, 893, 895, 967, 969, 1028, 1030, 1031, 1034, 1141, 1145, 1146, 1204, 1262, 1288, 1290, 1292], "haystack": [639, 1190], "he": 661, "head": [143, 202, 222, 264, 313, 328, 489, 574, 778, 826, 889, 1072, 1234, 1262], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 140, 143, 188, 277, 313, 889], "header_format": [36, 313], "header_nam": [277, 313], "headerless": 143, "heap": [190, 313, 778, 893, 1027, 1262], "heatmap": [36, 313], "heavili": 148, "height": [36, 126, 159, 187, 313], "hell": [660, 1211], "hello": [1, 20, 660, 661, 662, 895, 1089, 1211, 1212, 1213, 1273, 1276], "hello_": 729, "hello_data": 1276, "hello_world": 1276, "help": [36, 152, 153, 154, 155, 313, 889], "helper": [313, 317, 774], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 146, 147, 148, 157, 159, 163, 173, 238, 313, 396, 535, 536, 640, 646, 706, 778, 847, 889, 895, 974, 1197], "hex": [367, 368, 634, 635, 670, 941, 942, 1185, 1186, 1221], "hexadecim": [941, 942], "hf": [139, 141, 143, 146, 147, 148], "hf_token": [139, 141, 143, 146, 147, 148], "hi": [1, 1284], "hidden": [36, 313], "hidden_column": [36, 313], "hide": [21, 22, 23, 24, 36, 313], "hide_gridlin": [36, 313], "hide_password": 131, "high": [248, 313, 317, 581, 778, 790, 1139, 1262], "higher": [41, 45, 183, 240, 305, 313, 582, 604, 605, 751, 778, 804, 837, 879, 889, 969, 1140, 1156, 1262], "highest": [313, 317, 584, 691, 710, 778, 889, 1141, 1262], "highli": [778, 893], "hippopotamu": [649, 650, 1200, 1201], "hist": [778, 1262, 1267], "histogram": [1262, 1267], "hit": [795, 889], "hive": [141, 146, 148], "hive_partit": [141, 146, 148], "hive_schema": [141, 146, 148], "hmm": 895, "hold": [257, 271, 313, 1243, 1262], "holidai": [396, 706, 974], "home": [673, 1224], "horizont": [20, 55, 92, 197, 208, 225, 227, 232, 263, 281, 313, 697, 699, 708, 709, 714, 715, 717, 725, 728, 742, 744, 747, 752, 762, 863, 889], "host": [52, 129, 135, 137, 148], "hour": [139, 143, 146, 147, 204, 219, 245, 283, 313, 410, 412, 413, 417, 418, 422, 423, 429, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 721, 722, 723, 724, 764, 765, 766, 778, 817, 822, 840, 889, 895, 1000, 1004, 1011, 1017, 1029, 1262, 1285], "hours_diff": 429, "hous": [275, 313], "how": [11, 35, 36, 47, 55, 92, 132, 139, 141, 143, 146, 147, 148, 187, 195, 218, 219, 238, 281, 282, 313, 346, 392, 421, 471, 496, 497, 574, 587, 606, 665, 668, 706, 721, 768, 778, 807, 813, 821, 822, 858, 863, 889, 893, 921, 970, 1003, 1079, 1080, 1157, 1216, 1219, 1262], "howev": [1, 119, 131, 190, 223, 271, 313, 799, 889, 1027, 1262], "hstack": [92, 313], "html": [36, 37, 38, 117, 131, 135, 137, 170, 171, 172, 181, 313, 897, 898], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 313, 638, 640, 847, 889, 897, 898, 1189, 1191], "hug": [139, 141, 143, 146, 147, 148], "hut": [651, 652, 1202, 1203], "hvplot": [313, 316, 1262, 1267], "hyperbol": [331, 333, 335, 380, 623, 684, 778, 906, 908, 910, 959, 1175, 1236, 1262], "hyperloglog": [174, 313, 329, 700, 778, 793, 889], "hyphen": [630, 1181], "hypothesi": [157, 159, 162, 163, 1292], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 173, 174, 175, 178, 179, 183, 184, 187, 189, 190, 192, 195, 199, 203, 204, 205, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 229, 230, 234, 236, 237, 238, 243, 245, 246, 247, 248, 249, 252, 253, 254, 256, 258, 259, 260, 261, 264, 265, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 288, 290, 291, 299, 313, 316, 317, 322, 325, 327, 328, 329, 339, 342, 349, 350, 357, 362, 372, 373, 388, 389, 391, 394, 395, 396, 397, 400, 408, 415, 416, 418, 422, 424, 435, 443, 444, 445, 446, 449, 453, 457, 466, 468, 470, 473, 485, 491, 498, 499, 502, 504, 506, 515, 520, 521, 523, 527, 529, 532, 535, 536, 540, 542, 544, 545, 546, 548, 556, 574, 579, 581, 584, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 624, 625, 626, 627, 629, 630, 631, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 658, 660, 661, 662, 665, 666, 667, 668, 670, 672, 673, 675, 679, 686, 687, 692, 693, 696, 697, 698, 699, 700, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 722, 723, 728, 732, 733, 734, 735, 737, 738, 740, 743, 745, 748, 750, 753, 754, 755, 756, 757, 759, 763, 765, 766, 767, 768, 769, 774, 778, 793, 794, 795, 798, 799, 800, 802, 804, 805, 807, 808, 809, 813, 816, 817, 820, 821, 822, 823, 825, 827, 831, 832, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 860, 862, 865, 873, 883, 889, 893, 895, 902, 903, 904, 917, 924, 925, 932, 937, 946, 949, 951, 956, 957, 967, 968, 969, 972, 973, 974, 975, 978, 986, 1000, 1004, 1006, 1017, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1038, 1048, 1049, 1050, 1054, 1056, 1066, 1068, 1069, 1072, 1074, 1081, 1082, 1085, 1087, 1089, 1098, 1103, 1104, 1110, 1118, 1137, 1139, 1141, 1143, 1145, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1167, 1169, 1172, 1173, 1176, 1177, 1180, 1181, 1182, 1183, 1184, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1209, 1211, 1212, 1213, 1216, 1217, 1218, 1219, 1221, 1223, 1224, 1226, 1234, 1237, 1241, 1243, 1244, 1246, 1247, 1251, 1252, 1262, 1267, 1271, 1272, 1277, 1281, 1284, 1287, 1289, 1290, 1292], "i0e0": 1292, "i16": [1, 50, 404, 419, 437, 619, 778, 895, 1001, 1240, 1262, 1292], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 251, 260, 313, 348, 349, 351, 374, 399, 407, 409, 410, 411, 412, 413, 417, 439, 619, 706, 768, 778, 842, 889, 923, 924, 926, 977, 987, 991, 992, 993, 999, 1021, 1116, 1262, 1281, 1285, 1292], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 173, 175, 176, 177, 178, 180, 184, 185, 187, 188, 191, 192, 194, 195, 198, 199, 201, 202, 203, 204, 206, 208, 209, 211, 213, 215, 218, 219, 220, 222, 223, 224, 230, 231, 236, 237, 238, 239, 242, 243, 244, 245, 249, 251, 253, 256, 258, 259, 260, 262, 264, 266, 273, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 303, 306, 307, 313, 322, 324, 328, 338, 343, 344, 346, 347, 352, 354, 355, 356, 357, 358, 360, 363, 365, 372, 373, 378, 384, 385, 386, 387, 388, 389, 392, 393, 406, 426, 428, 429, 430, 431, 432, 433, 434, 444, 447, 449, 450, 452, 453, 454, 455, 457, 458, 460, 461, 463, 467, 469, 470, 471, 472, 473, 476, 477, 479, 480, 481, 482, 483, 486, 489, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 533, 535, 536, 553, 554, 555, 557, 558, 560, 562, 564, 565, 570, 574, 575, 578, 579, 580, 581, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 615, 617, 618, 619, 620, 625, 626, 627, 643, 651, 652, 666, 670, 675, 676, 678, 679, 680, 681, 682, 686, 687, 688, 689, 691, 694, 701, 704, 707, 708, 709, 714, 715, 716, 717, 718, 721, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 746, 747, 749, 752, 756, 757, 758, 761, 762, 763, 764, 768, 774, 778, 794, 796, 797, 799, 800, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 826, 827, 828, 832, 833, 835, 836, 838, 839, 840, 842, 844, 846, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 861, 864, 865, 866, 867, 869, 870, 871, 873, 874, 877, 880, 881, 889, 895, 899, 900, 901, 904, 922, 927, 929, 931, 932, 933, 935, 938, 946, 956, 957, 963, 964, 965, 966, 967, 968, 984, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1033, 1034, 1035, 1037, 1038, 1041, 1042, 1044, 1049, 1051, 1059, 1072, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1092, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1110, 1111, 1118, 1123, 1131, 1137, 1139, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1152, 1155, 1159, 1163, 1164, 1166, 1169, 1170, 1172, 1177, 1178, 1221, 1227, 1232, 1234, 1239, 1247, 1248, 1253, 1262, 1271, 1272, 1274, 1278, 1279, 1280, 1281, 1283, 1286, 1287, 1289, 1290, 1292], "i8": [361, 362, 404, 407, 410, 412, 413, 414, 417, 419, 420, 423, 436, 437, 526, 619, 750, 753, 769, 778, 936, 937, 970, 982, 985, 995, 996, 1002, 1005, 1018, 1019, 1109, 1148, 1170, 1250, 1262, 1285], "iceberg": [145, 790], "icon": [36, 313], "id": [26, 36, 55, 126, 129, 145, 220, 270, 277, 290, 299, 313, 593, 651, 652, 690, 778, 823, 865, 873, 889, 895, 1150, 1249, 1262, 1289, 1290, 1292], "id_char": 1292, "id_var": [229, 280, 313, 831, 857, 889], "ideal": 125, "ident": [123, 177, 178, 313, 424, 592, 593, 778, 797, 798, 889, 955, 957, 1006, 1149, 1150, 1262], "identifi": [123, 131, 229, 236, 278, 280, 291, 313, 831, 855, 857, 889], "idiograph": 895, "idiomat": [774, 802, 808, 841, 860, 873, 889], "idx": [143, 204, 217, 290, 313, 349, 362, 527, 817, 865, 889, 937, 1110, 1193], "idx_lit": 1193, "idx_rx": 1193, "ieee": [688, 778], "if_set": [5, 30], "if_table_exist": [34, 313], "ifnul": 1282, "ignor": [35, 131, 158, 159, 163, 227, 263, 282, 313, 325, 327, 350, 392, 421, 443, 445, 446, 497, 506, 566, 567, 630, 644, 696, 698, 709, 778, 858, 889, 895, 902, 903, 925, 970, 1003, 1028, 1030, 1031, 1080, 1089, 1127, 1128, 1181, 1195, 1262], "ignore_error": [129, 130, 139, 143, 147], "ignore_nul": [227, 263, 313, 325, 327, 350, 443, 445, 446, 506, 630, 644, 696, 698, 709, 778, 902, 903, 925, 1028, 1030, 1031, 1089, 1181, 1195, 1262], "ignore_spac": 895, "ijkl": 1284, "ilmsuxu": [631, 638, 639, 642, 651, 652, 1182, 1189, 1190, 1193, 1202, 1203], "imbal": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "imdb_scor": 1271, "immedi": [584, 701, 705, 719, 720, 722, 723, 734, 735, 750, 753, 760, 765, 766, 769, 778, 1141, 1262, 1272], "immut": [271, 313, 1243, 1262], "impact": [204, 313, 817, 889, 1271, 1289], "impl": 145, "implement": [41, 117, 131, 172, 205, 223, 299, 313, 316, 317, 466, 536, 557, 558, 560, 562, 564, 565, 676, 740, 778, 873, 1048, 1118, 1164, 1166, 1262, 1267], "implic": [391, 778, 805, 889], "implicit": [282, 313, 858, 889], "implicitli": [195, 313, 453, 768, 778, 813, 889, 1289], "implod": [778, 1262, 1280], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 176, 183, 184, 185, 187, 202, 204, 217, 219, 236, 238, 253, 260, 268, 270, 275, 280, 281, 283, 313, 316, 317, 370, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 453, 542, 548, 595, 597, 599, 601, 603, 605, 608, 610, 612, 706, 718, 719, 720, 721, 722, 723, 724, 757, 765, 766, 774, 778, 790, 796, 800, 804, 805, 806, 807, 817, 822, 827, 844, 857, 889, 944, 958, 960, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1029, 1057, 1060, 1062, 1063, 1151, 1174, 1235, 1262, 1267, 1272, 1286, 1289, 1292], "improv": [34, 45, 135, 146, 313, 535, 778, 889], "in_plac": [208, 257, 285, 313, 1142, 1171, 1178, 1262], "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 139, 143, 144, 145, 146, 147, 148, 159, 160, 179, 183, 190, 195, 220, 236, 238, 248, 259, 275, 277, 281, 282, 313, 389, 423, 453, 457, 468, 473, 542, 581, 596, 598, 600, 602, 604, 606, 607, 609, 611, 656, 657, 660, 661, 706, 714, 754, 755, 778, 804, 813, 823, 849, 858, 889, 895, 968, 969, 1005, 1027, 1038, 1050, 1054, 1139, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1207, 1208, 1211, 1262, 1289], "include_bom": [33, 42, 313, 889], "include_boundari": [204, 313, 817, 889], "include_break": [389, 581, 778, 968, 1139, 1262], "include_breakpoint": [468, 778, 1050, 1262], "include_categor": 895, "include_categori": [468, 778, 1050, 1262], "include_col": 159, "include_file_path": [139, 143, 146, 147, 148], "include_head": [33, 36, 42, 130, 277, 313, 889], "include_index": 121, "include_init": 714, "include_kei": [236, 248, 313], "include_nul": [282, 313, 858, 889], "inclus": [173, 204, 245, 313, 473, 594, 597, 599, 601, 603, 605, 608, 610, 612, 656, 657, 701, 719, 720, 722, 723, 734, 735, 765, 766, 778, 817, 840, 889, 1054, 1207, 1208, 1262], "incom": 131, "incompat": 110, "incomplet": [589, 778, 1146, 1262], "incorpor": 1289, "incorrect": [254, 313, 438, 535, 536, 617, 778, 845, 873, 889, 1020, 1167, 1262], "incorrectli": [129, 527], "increas": [36, 47, 129, 134, 140, 141, 148, 313, 388, 593, 778, 967, 1150, 1262], "independ": [53, 54, 156, 159, 163, 275, 313, 620, 778, 799, 800, 809, 836, 847, 889], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 151, 172, 198, 200, 204, 209, 214, 216, 238, 243, 245, 246, 247, 256, 258, 270, 271, 273, 280, 282, 283, 289, 290, 313, 323, 336, 337, 338, 340, 343, 344, 349, 357, 362, 444, 460, 461, 463, 492, 493, 502, 503, 504, 520, 521, 527, 594, 597, 599, 601, 603, 605, 608, 610, 612, 616, 618, 625, 631, 638, 642, 643, 655, 666, 676, 704, 734, 737, 778, 815, 817, 840, 846, 848, 857, 858, 864, 865, 889, 895, 911, 912, 913, 914, 915, 918, 919, 924, 932, 937, 1029, 1041, 1042, 1068, 1075, 1076, 1085, 1086, 1087, 1103, 1104, 1110, 1131, 1164, 1165, 1169, 1177, 1189, 1193, 1194, 1206, 1217, 1262, 1267, 1280, 1284], "index_column": [204, 245, 313, 594, 778, 817, 840, 889], "indexord": [270, 271, 313], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 156, 157, 163, 204, 245, 248, 254, 256, 268, 313, 339, 357, 460, 468, 474, 475, 476, 478, 479, 480, 481, 482, 483, 502, 520, 540, 541, 542, 543, 544, 594, 597, 599, 601, 603, 605, 608, 610, 612, 616, 618, 704, 705, 749, 778, 817, 840, 845, 846, 889, 893, 895, 932, 1041, 1050, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1085, 1103, 1164, 1165, 1169, 1238, 1262, 1292], "indistinguish": [33, 42, 313, 889], "individu": [36, 45, 168, 245, 270, 271, 275, 313, 536, 639, 778, 799, 840, 889, 895, 954, 1190, 1262], "inequ": [568, 778], "inexact": [152, 153, 154, 155], "inf": [156, 159, 163, 335, 389, 468, 475, 478, 581, 688, 778, 910, 960, 968, 1057, 1060, 1116, 1134, 1139, 1250, 1262, 1286], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 146, 147, 148, 223, 313, 535, 536, 590, 645, 665, 667, 668, 669, 672, 724, 738, 753, 778, 889, 1118, 1147, 1196, 1216, 1218, 1219, 1220, 1223, 1262], "infer_schema": [129, 143], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 313, 645, 889, 1196], "inference_length": [669, 1220], "inference_s": [223, 313], "infin": [673, 688, 778, 1224], "infinit": [478, 688, 778, 1060, 1262], "influenc": [134, 827, 889], "influxdb": 131, "info": [133, 144, 145, 151], "inform": [19, 23, 34, 52, 133, 139, 141, 143, 144, 145, 146, 147, 148, 152, 154, 170, 181, 183, 313, 317, 485, 536, 624, 631, 638, 639, 642, 651, 652, 778, 799, 804, 836, 889, 893, 897, 950, 1069, 1176, 1182, 1189, 1190, 1193, 1202, 1203, 1262], "inherit": [246, 313, 391, 778, 805, 889], "init": [168, 1271], "initcap": 1282, "initi": [36, 76, 168, 313, 714, 728, 768, 1289], "initialis": [131, 168, 889], "inject": [36, 47, 313], "inlin": [18, 248, 313, 631, 638, 639, 642, 651, 652, 1182, 1189, 1190, 1193, 1202, 1203, 1280], "inner": [56, 72, 158, 218, 282, 313, 350, 361, 393, 506, 526, 536, 587, 685, 757, 778, 821, 858, 889, 925, 936, 971, 1089, 1109, 1118, 1245, 1262, 1278, 1289], "inner_dtyp": [158, 161], "innermost": [158, 161], "innter": 924, "inprocessqueri": [799, 889], "input": [0, 47, 53, 91, 119, 121, 129, 130, 175, 185, 203, 220, 223, 227, 236, 238, 242, 251, 252, 256, 259, 263, 276, 287, 288, 292, 313, 322, 373, 378, 444, 447, 459, 473, 531, 535, 536, 546, 574, 588, 589, 621, 627, 643, 653, 655, 661, 662, 663, 664, 666, 668, 679, 687, 695, 697, 699, 701, 704, 707, 708, 709, 717, 724, 726, 734, 735, 738, 739, 740, 742, 744, 747, 756, 760, 762, 768, 774, 778, 790, 794, 806, 816, 823, 838, 842, 843, 846, 849, 854, 861, 862, 866, 889, 893, 956, 1029, 1054, 1114, 1115, 1118, 1137, 1145, 1146, 1169, 1173, 1194, 1206, 1217, 1219, 1262, 1283, 1284, 1286], "input_wildcard_expans": [778, 893], "insensit": [632, 639, 641, 651, 652, 653, 895, 1182, 1183, 1190, 1192, 1193, 1202, 1203, 1204], "insensitive_match": [631, 642], "insert": [34, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 209, 277, 279, 313, 616, 630, 644, 675, 778, 856, 889, 1165, 1181, 1195, 1226, 1262], "insert_aft": [36, 313], "insert_befor": [36, 313], "insert_chart": [36, 313], "insert_column": 313, "insid": [54, 535, 778, 800, 889], "inspect": [778, 889], "instal": [95, 121, 129, 130, 132, 135, 137, 181, 272, 313, 396, 706, 847, 889, 974, 1244, 1262], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 159, 163, 168, 176, 192, 197, 313, 546, 714, 728, 774, 796, 827, 864, 865, 889, 1034, 1262], "instanti": [34, 36, 131, 161, 251, 269, 270, 287, 313, 842, 861, 889, 894, 1240, 1241, 1262], "instantli": [54, 800, 889], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 149, 156, 157, 158, 159, 163, 174, 175, 202, 215, 216, 219, 223, 229, 234, 236, 246, 247, 248, 251, 252, 253, 256, 270, 271, 272, 276, 288, 289, 313, 316, 317, 338, 357, 373, 374, 389, 403, 444, 447, 457, 520, 548, 581, 588, 618, 630, 637, 647, 648, 651, 652, 660, 661, 662, 663, 664, 675, 687, 694, 701, 703, 705, 711, 719, 720, 722, 723, 724, 734, 735, 750, 753, 757, 760, 765, 766, 769, 778, 793, 794, 800, 809, 822, 831, 842, 843, 844, 846, 854, 862, 863, 864, 889, 895, 913, 932, 941, 947, 968, 981, 989, 990, 1029, 1047, 1103, 1139, 1145, 1164, 1166, 1169, 1178, 1181, 1188, 1198, 1199, 1202, 1203, 1211, 1212, 1213, 1226, 1243, 1244, 1262, 1267, 1271, 1272, 1276, 1289, 1290], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 177, 183, 190, 193, 194, 198, 200, 202, 205, 206, 207, 209, 214, 216, 217, 219, 222, 223, 233, 234, 243, 245, 246, 249, 255, 256, 258, 261, 264, 269, 273, 276, 281, 284, 286, 289, 290, 296, 307, 313, 322, 345, 349, 357, 359, 362, 364, 365, 372, 373, 388, 392, 396, 443, 445, 446, 450, 451, 452, 458, 460, 461, 463, 466, 467, 468, 489, 495, 497, 502, 503, 504, 505, 515, 520, 521, 523, 525, 526, 527, 529, 573, 575, 578, 579, 581, 584, 587, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 620, 625, 629, 638, 643, 645, 649, 650, 651, 655, 657, 658, 666, 669, 670, 675, 682, 686, 687, 693, 695, 701, 710, 712, 718, 721, 724, 730, 732, 734, 735, 749, 750, 753, 754, 755, 759, 760, 763, 764, 767, 769, 778, 794, 797, 804, 811, 812, 815, 818, 822, 826, 836, 846, 848, 851, 853, 854, 859, 860, 864, 865, 870, 881, 889, 894, 895, 911, 912, 920, 924, 932, 934, 937, 939, 946, 947, 954, 955, 961, 967, 970, 971, 974, 1027, 1028, 1030, 1031, 1035, 1036, 1037, 1041, 1042, 1048, 1049, 1050, 1068, 1071, 1072, 1078, 1080, 1085, 1086, 1087, 1088, 1098, 1103, 1104, 1106, 1108, 1109, 1110, 1112, 1124, 1125, 1127, 1128, 1131, 1133, 1134, 1137, 1138, 1139, 1141, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1172, 1177, 1180, 1189, 1194, 1196, 1200, 1201, 1202, 1206, 1208, 1209, 1217, 1220, 1221, 1226, 1233, 1234, 1240, 1247, 1252, 1262, 1274, 1277, 1289, 1292], "int16": [1, 50, 275, 313, 386, 387, 419, 681, 778, 895, 965, 966, 1001, 1233, 1240, 1262], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 204, 217, 245, 270, 313, 348, 349, 351, 374, 399, 409, 410, 411, 412, 417, 439, 444, 594, 685, 753, 778, 817, 840, 889, 895, 920, 923, 924, 926, 977, 987, 991, 992, 993, 999, 1021, 1029, 1116, 1245, 1246, 1262], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 179, 188, 197, 204, 237, 245, 250, 251, 265, 272, 313, 343, 344, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 386, 387, 428, 429, 430, 431, 432, 433, 434, 438, 444, 447, 535, 536, 559, 561, 563, 578, 586, 594, 645, 670, 681, 685, 701, 726, 734, 735, 738, 753, 760, 774, 778, 801, 808, 817, 835, 840, 841, 842, 889, 895, 918, 919, 921, 922, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 965, 966, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1029, 1118, 1143, 1221, 1233, 1243, 1244, 1245, 1246, 1262], "int64arrai": [1237, 1262], "int8": [1, 50, 76, 197, 313, 361, 362, 386, 387, 404, 407, 413, 414, 420, 423, 436, 437, 526, 681, 750, 753, 769, 778, 894, 936, 937, 965, 966, 970, 982, 985, 995, 996, 1002, 1005, 1018, 1019, 1109, 1148, 1233, 1243, 1250, 1262], "int_rang": [204, 281, 290, 299, 313, 701, 737, 817, 827, 865, 873, 889], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 187, 204, 245, 268, 271, 313, 326, 377, 423, 456, 457, 573, 579, 581, 586, 593, 594, 606, 643, 666, 670, 695, 701, 730, 734, 735, 753, 778, 807, 817, 840, 889, 895, 953, 1005, 1040, 1137, 1139, 1143, 1150, 1157, 1164, 1194, 1217, 1221, 1243, 1262, 1283, 1289, 1292], "integer_list": 72, "integr": [36, 275, 313, 1292], "intend": [1, 152, 153, 154, 155, 675, 1226], "intens": [223, 299, 313, 574, 778, 1118, 1262], "interact": [159, 163, 183, 313, 316, 804, 889, 1262, 1267], "interchang": [117, 172], "interest": [130, 424, 427, 1006, 1009], "interfac": [0, 106, 107, 171, 790, 898, 1289], "interleav": 1284, "intermedi": [210, 313, 820, 889, 1292], "intern": [37, 38, 131, 150, 216, 265, 313, 457, 778, 1237, 1262, 1272], "interoper": [170, 897], "interpol": [183, 240, 305, 313, 452, 472, 539, 582, 604, 605, 751, 778, 804, 837, 879, 889, 969, 1053, 1140, 1156, 1262], "interpolate_bi": [778, 1262], "interpolationmethod": [471, 778, 1052, 1262], "interpret": [120, 122, 129, 130, 143, 313, 889], "intersect": [36, 313, 517, 895, 1100, 1288], "interv": [204, 245, 283, 313, 389, 422, 435, 468, 473, 581, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 840, 889, 968, 982, 984, 985, 991, 993, 995, 996, 999, 1001, 1002, 1004, 1008, 1017, 1018, 1050, 1054, 1139, 1262], "intoexpr": [175, 203, 204, 245, 251, 252, 256, 259, 276, 287, 288, 292, 313, 328, 346, 366, 369, 371, 373, 396, 444, 450, 460, 468, 472, 473, 496, 516, 517, 518, 519, 574, 588, 589, 597, 599, 601, 603, 605, 608, 610, 612, 616, 618, 627, 632, 641, 653, 656, 657, 658, 663, 664, 679, 687, 697, 699, 704, 707, 708, 709, 710, 712, 714, 717, 721, 728, 742, 744, 747, 753, 756, 760, 762, 778, 794, 816, 817, 840, 842, 843, 846, 849, 854, 861, 862, 866, 889, 893, 921, 940, 943, 945, 974, 1029, 1035, 1053, 1054, 1079, 1145, 1146, 1165, 1169, 1207, 1208, 1209, 1214, 1215, 1262], "intoexprcolumn": [195, 313, 345, 349, 350, 357, 372, 373, 378, 422, 450, 453, 495, 503, 506, 515, 520, 575, 579, 615, 618, 638, 643, 646, 655, 660, 661, 662, 666, 670, 675, 686, 687, 701, 706, 719, 720, 722, 723, 734, 735, 765, 766, 768, 778, 813, 846, 889, 920, 924, 925, 932, 956, 1004, 1017, 1035, 1078, 1086, 1089, 1098, 1103, 1134, 1189, 1194, 1197, 1206, 1211, 1212, 1213, 1217, 1226, 1262], "introduc": [46, 85, 665, 667, 668, 1216, 1218, 1219], "introduct": 1288, "intuit": [457, 778, 895], "invalid": [33, 42, 107, 129, 130, 143, 313, 374, 645, 646, 670, 688, 778, 889, 941, 947, 1196, 1197, 1221, 1262], "invalid_valu": 941, "invalidoperationerror": [589, 778, 1146, 1262, 1287], "invari": [827, 889], "invers": [330, 331, 332, 333, 334, 335, 778, 905, 906, 907, 908, 909, 910, 1243, 1262, 1286], "invert": 895, "invok": [535, 778], "involv": [195, 313, 813, 889], "io": [31, 33, 36, 37, 38, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 184, 253, 313, 391, 459, 548, 778, 805, 844, 889], "iobas": [39, 40, 138, 139, 184, 253, 313, 391, 548, 551, 778, 805, 844, 889], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 313, 790, 889], "ipccompress": [37, 38, 313], "is_between": [778, 1262], "is_dupl": [313, 778, 1262], "is_elementwis": [535, 778, 893], "is_empti": [313, 1262], "is_finit": [778, 1262], "is_first_distinct": [778, 1262], "is_in": [93, 195, 313, 778, 1262], "is_infinit": [778, 1262], "is_last_distinct": [778, 1262], "is_nan": [778, 1262], "is_not_nan": [778, 1262], "is_not_nul": [778, 1262], "is_nul": [187, 313, 778, 807, 889, 1262], "is_numer": 1292, "is_odd": [251, 313, 842, 889, 895], "is_selector": 895, "is_sort": 1262, "is_uniqu": [313, 778, 1262], "isn": 768, "iso": [409, 436, 437, 987, 1018, 1019, 1284], "iso8601": [129, 130, 143], "iso_lang": 1284, "iso_year": 439, "isodow": 1285, "isoweek": 1285, "isoyear": 1285, "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 143, 313, 386, 387, 681, 778, 965, 966, 1233, 1262, 1289], "ital": [36, 313], "item": [13, 55, 130, 202, 246, 249, 313, 345, 349, 350, 392, 449, 495, 497, 504, 506, 515, 615, 658, 778, 920, 924, 925, 970, 1033, 1078, 1080, 1087, 1089, 1098, 1163, 1209, 1262], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 175, 185, 195, 203, 204, 215, 216, 217, 220, 245, 246, 247, 248, 251, 252, 259, 276, 277, 287, 288, 291, 292, 313, 373, 388, 396, 453, 574, 627, 679, 687, 697, 699, 704, 706, 707, 708, 709, 717, 742, 744, 747, 756, 760, 762, 768, 774, 778, 794, 806, 813, 816, 817, 823, 840, 842, 843, 849, 854, 861, 862, 866, 889, 893, 894, 967, 974, 1164, 1262, 1292], "iter_batch": 131, "iter_column": 313, "iter_row": [217, 246, 247, 248, 313], "iter_slic": 313, "its": [123, 151, 190, 271, 313, 400, 422, 435, 444, 535, 592, 627, 768, 778, 802, 808, 860, 889, 950, 978, 1004, 1017, 1027, 1029, 1149, 1243, 1262, 1291], "itself": [157, 313, 316, 317, 536, 596, 598, 600, 602, 604, 606, 607, 609, 611, 754, 755, 778, 825, 889, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1262, 1267, 1271, 1272, 1289], "ix": [238, 313], "j": [277, 313], "jax": [270, 313, 1241, 1262], "jax_enable_x64": [270, 313], "jaxexporttyp": [270, 313], "jjk": 895, "jkl": [639, 1190], "jklmn": 1284, "job": [795, 889], "join": [46, 47, 53, 54, 55, 85, 195, 219, 220, 282, 313, 453, 471, 574, 630, 757, 778, 799, 800, 809, 813, 822, 823, 836, 847, 858, 863, 889, 1181, 1272, 1274, 1280, 1288, 1289], "join_asof": [218, 313, 821, 889], "join_nul": [218, 313, 821, 889], "join_wher": [313, 889], "joinstrategi": [47, 218, 313, 821, 889], "joinvalid": [218, 313, 821, 889], "jpy": 1292, "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 184, 253, 313, 391, 459, 548, 551, 645, 646, 677, 778, 790, 805, 844, 889, 893, 1196, 1197, 1229], "json_path": [646, 1197], "json_path_match": [645, 1196], "json_stat": 5, "json_str": [138, 139], "json_val": [646, 1197], "jsonpath": [645, 646, 1196, 1197], "jst": [123, 895], "jul": [665, 1216, 1284], "juli": [1284, 1285], "just": [36, 121, 131, 143, 229, 280, 313, 831, 857, 889, 895], "k": [175, 248, 276, 277, 313, 372, 373, 383, 485, 686, 687, 778, 794, 854, 889, 946, 962, 1069, 1247, 1262], "k_2": [624, 778, 1176, 1262], "k_3": [624, 778, 1176, 1262], "kanji": 895, "karen": [238, 313], "kathmandu": [980, 981, 1007], "kb": [190, 313, 370, 944, 1027, 1262], "kde": [1262, 1267], "keep": [47, 129, 130, 139, 143, 146, 147, 195, 278, 282, 283, 313, 459, 535, 550, 558, 588, 707, 778, 813, 855, 858, 889, 1145, 1262], "kei": [36, 41, 45, 47, 52, 55, 139, 141, 143, 145, 146, 147, 148, 173, 204, 216, 218, 219, 230, 236, 238, 242, 244, 247, 248, 282, 313, 453, 536, 588, 589, 653, 719, 722, 760, 778, 817, 821, 822, 832, 838, 839, 858, 889, 895, 899, 1145, 1146, 1204, 1262, 1278], "kept": [278, 313, 855, 889], "keyerror": 16, "keystrok": 774, "keyword": [35, 133, 141, 144, 159, 163, 181, 203, 237, 246, 251, 252, 272, 287, 288, 292, 313, 453, 578, 679, 756, 760, 768, 778, 816, 835, 842, 843, 861, 862, 866, 889, 1244, 1262, 1275], "kleen": [325, 327, 696, 697, 698, 699, 778, 902, 903, 1262], "klmnoopqrstuvwxyz": [217, 313], "knight": 1271, "know": [47, 131, 238, 280, 313, 527, 535, 778, 857, 889], "known": [135, 362, 527, 873, 937, 1110], "kurtosi": [778, 1262], "kuzu_db_conn": 131, "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 181, 195, 237, 272, 313, 316, 578, 778, 813, 835, 889, 893, 1244, 1262, 1267, 1275, 1289], "k\u00f9zudb": 131, "l1": 55, "l2": 55, "label": [204, 270, 275, 313, 317, 389, 581, 595, 596, 598, 600, 602, 604, 607, 609, 611, 778, 817, 836, 889, 968, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1262], "label_column": [275, 313], "lag": [256, 313, 357, 520, 618, 708, 778, 846, 889, 932, 1103, 1169, 1262], "lake": [35, 133, 144, 313, 790], "lambda": [143, 197, 223, 237, 238, 242, 299, 313, 362, 445, 446, 527, 535, 536, 558, 559, 714, 715, 728, 739, 740, 752, 778, 827, 835, 838, 873, 889, 937, 1030, 1031, 1110, 1118, 1262], "land": [396, 974], "languag": [143, 204, 219, 245, 283, 313, 418, 422, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017, 1029, 1262], "larg": [10, 11, 14, 47, 131, 134, 140, 148], "large_str": [217, 265, 272, 313], "larger": [10, 42, 43, 44, 45, 53, 54, 457, 710, 778, 799, 800, 889], "largest": [175, 276, 313, 373, 686, 687, 778, 794, 854, 889, 1247, 1262], "last": [35, 139, 143, 146, 147, 152, 153, 154, 155, 206, 219, 222, 238, 248, 259, 264, 271, 278, 307, 313, 338, 349, 358, 388, 404, 415, 419, 436, 479, 504, 522, 525, 527, 557, 558, 560, 562, 564, 565, 589, 626, 627, 643, 658, 666, 682, 704, 763, 774, 778, 822, 849, 853, 855, 881, 889, 895, 913, 924, 933, 967, 982, 997, 1001, 1018, 1049, 1061, 1072, 1087, 1105, 1108, 1146, 1178, 1194, 1209, 1217, 1234, 1243, 1262, 1282, 1284], "last_column": [36, 313], "later": [219, 253, 313, 548, 822, 844, 889], "latest": [117, 133, 144, 172, 421, 458, 546, 665, 668, 721, 778, 1003, 1216, 1219], "latt": 895, "latter": [36, 192, 313, 1034, 1262], "lazi": [1, 55, 143, 159, 219, 237, 238, 260, 313, 536, 730, 750, 753, 769, 778, 804, 821, 822, 863, 866, 867, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 889, 895, 1271, 1272, 1273, 1274, 1275, 1277, 1289, 1292], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 800, 889], "lazy_fram": [53, 54], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 179, 184, 221, 237, 238, 253, 260, 313, 391, 453, 527, 548, 757, 778, 790, 887, 888, 895, 1271, 1272, 1275, 1277, 1289, 1290, 1292], "lazygroupbi": [816, 817, 840, 889], "lbl": [270, 275, 313], "ldf": [1, 866, 867, 869, 871, 874, 875, 876, 877, 878, 879, 880], "ldot": [444, 778, 1029, 1262], "le": [636, 778, 1262], "lead": [14, 41, 123, 149, 227, 254, 256, 263, 313, 357, 460, 463, 520, 535, 536, 617, 618, 660, 662, 710, 778, 827, 845, 846, 873, 889, 932, 1103, 1118, 1167, 1169, 1211, 1213, 1262], "leap": [408, 418, 986, 1000], "leap_year": 408, "learn": [275, 313], "least": [97, 238, 313, 575, 638, 640, 778, 1134, 1189, 1191, 1262, 1282], "leav": [6, 229, 280, 313, 527, 831, 857, 889], "left": [15, 16, 36, 47, 152, 153, 154, 155, 204, 218, 219, 245, 282, 313, 389, 443, 444, 445, 446, 471, 473, 581, 594, 597, 599, 601, 603, 605, 608, 610, 612, 616, 685, 707, 714, 715, 719, 720, 722, 723, 728, 752, 765, 766, 768, 778, 817, 821, 822, 840, 858, 889, 968, 1028, 1029, 1030, 1031, 1054, 1139, 1165, 1245, 1262, 1274, 1278, 1282], "left_clos": [389, 581, 778, 968, 1139, 1262], "left_on": [218, 219, 282, 313, 821, 822, 858, 889], "leftmost": [616, 778, 1165, 1262, 1284], "len": [12, 36, 159, 163, 179, 217, 238, 290, 294, 299, 313, 382, 536, 545, 547, 592, 711, 734, 778, 801, 860, 865, 868, 873, 889, 894, 961, 1149, 1262], "len_byt": [12, 648, 1199], "len_char": [647, 1198], "length": [55, 56, 72, 134, 140, 143, 157, 161, 202, 204, 245, 258, 313, 316, 388, 422, 435, 521, 527, 546, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 625, 643, 647, 648, 649, 650, 653, 655, 666, 675, 750, 753, 754, 755, 769, 778, 817, 836, 840, 848, 889, 893, 954, 967, 978, 1004, 1017, 1104, 1110, 1131, 1145, 1146, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1177, 1194, 1198, 1199, 1200, 1201, 1204, 1206, 1217, 1226, 1262, 1280, 1282], "leq": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "less": [143, 219, 313, 457, 487, 534, 535, 658, 778, 822, 889, 1209, 1292], "letter": [191, 296, 307, 313, 447, 632, 639, 641, 653, 673, 726, 778, 810, 870, 881, 889, 895, 1183, 1190, 1192, 1204, 1224, 1284], "level": [10, 36, 37, 38, 41, 45, 126, 143, 146, 147, 148, 197, 223, 234, 260, 265, 313, 317, 453, 778, 790, 818, 826, 850, 889, 1237, 1262, 1289], "lexic": [59, 895, 951], "lf": [42, 43, 44, 45, 50, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 868, 872, 889, 1279, 1289, 1292], "lf1": [757, 850, 889, 1275, 1277, 1290], "lf2": [757, 850, 889, 1275, 1277, 1290], "lf3": [889, 1275], "lf4": [889, 1275], "lf5": 889, "lf6": 889, "lf_other": [863, 889], "lib": [778, 1237, 1262], "librari": [1, 99, 131, 134, 535, 778, 893, 1292], "life": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "lifetim": [168, 789, 1277], "light": [36, 313], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 184, 204, 211, 213, 218, 248, 253, 270, 271, 313, 316, 391, 397, 459, 499, 535, 550, 584, 638, 661, 662, 692, 774, 778, 795, 800, 805, 817, 889, 893, 975, 1082, 1141, 1189, 1251, 1262, 1267], "limit": [10, 11, 45, 131, 132, 165, 194, 313, 365, 452, 458, 778, 812, 818, 889, 1037, 1262, 1280, 1288], "line": [10, 20, 36, 129, 130, 134, 143, 202, 211, 213, 313, 316, 638, 1189, 1262, 1267], "line_termin": [33, 42, 313, 889], "linear": [183, 210, 240, 305, 313, 471, 472, 494, 539, 582, 604, 605, 708, 709, 751, 778, 804, 820, 837, 879, 889, 969, 1052, 1053, 1077, 1140, 1156, 1262], "lineitem": [125, 130, 132], "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 180, 185, 188, 190, 191, 195, 201, 203, 204, 208, 216, 233, 236, 245, 246, 247, 248, 251, 259, 266, 267, 275, 277, 278, 279, 281, 287, 292, 293, 313, 323, 350, 361, 362, 363, 389, 396, 449, 455, 460, 469, 477, 535, 536, 546, 547, 574, 581, 587, 590, 595, 596, 598, 600, 602, 604, 607, 609, 611, 626, 627, 637, 639, 641, 656, 676, 678, 685, 704, 706, 708, 719, 720, 722, 723, 725, 733, 735, 738, 740, 758, 760, 766, 774, 778, 802, 808, 810, 813, 816, 817, 842, 849, 855, 856, 861, 863, 866, 867, 889, 894, 895, 925, 936, 937, 938, 954, 968, 974, 1027, 1033, 1038, 1041, 1044, 1050, 1051, 1059, 1118, 1139, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1183, 1188, 1190, 1192, 1204, 1207, 1242, 1245, 1262, 1271, 1276, 1280, 1281, 1291, 1292], "list_of_seri": 740, "lit": [1, 324, 366, 473, 557, 642, 708, 714, 728, 750, 753, 769, 778, 1037, 1262], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 251, 252, 256, 282, 287, 288, 313, 324, 366, 378, 400, 441, 442, 450, 457, 462, 464, 473, 487, 534, 553, 555, 568, 569, 579, 588, 589, 631, 632, 633, 641, 642, 651, 652, 653, 679, 680, 688, 697, 699, 701, 707, 708, 709, 717, 718, 721, 734, 738, 742, 744, 747, 756, 760, 762, 764, 778, 812, 842, 843, 846, 858, 861, 862, 889, 895, 940, 956, 978, 1025, 1035, 1054, 1130, 1145, 1146, 1164, 1166, 1169, 1182, 1183, 1184, 1192, 1193, 1202, 1203, 1204, 1262, 1284], "littl": [247, 313], "lmn": 895, "ln": [443, 444, 445, 446, 778, 1028, 1029, 1030, 1031, 1262, 1282], "ln_a": 1283, "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 313, 778, 790, 818, 826, 889, 893, 1292], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 134, "load_workbook": 134, "loader": [275, 313], "lobster": [642, 1193], "loc": [313, 317], "local": [4, 35, 131, 133, 144, 145, 148, 313, 435, 576, 577, 778, 949, 950, 980, 981, 1004, 1007, 1017, 1135, 1136, 1262, 1272], "localhost": 131, "localis": [422, 435, 1017], "locat": [36, 141, 143, 146, 148, 192, 243, 273, 279, 313, 616, 778, 856, 889, 1034, 1041, 1164, 1165, 1262], "lock": 165, "log": [29, 49, 373, 440, 532, 555, 579, 687, 778, 1023, 1262, 1282], "log10": [778, 1262, 1282], "log10_a": 1283, "log16_a": 1283, "log1p": [778, 1262, 1282], "log1p_a": 1283, "log2": 1282, "logarithm": [530, 531, 532, 778, 1113, 1114, 1115, 1262, 1283], "logic": [55, 223, 299, 313, 316, 317, 325, 327, 391, 536, 685, 696, 697, 698, 699, 740, 778, 805, 809, 821, 844, 873, 889, 902, 903, 1118, 1243, 1245, 1262, 1267], "london": [401, 405, 421, 979, 983, 1003], "london_timezon": [421, 1003], "london_to_amsterdam": [421, 1003], "long": [191, 229, 238, 280, 281, 313, 810, 831, 857, 889], "longer": [129, 130, 143], "longest": 527, "look": [10, 204, 313, 366, 527, 817, 889, 940], "lookup": 774, "loop": [536, 778], "lose": [398, 976], "lossi": [129, 130, 143], "love": [632, 653, 1183, 1204], "low": [17, 131, 581, 778, 1139, 1262], "low_memori": [129, 130, 139, 141, 143, 147, 148], "lower": [143, 183, 204, 240, 305, 313, 378, 473, 533, 558, 582, 586, 604, 605, 701, 719, 720, 722, 723, 751, 765, 766, 778, 804, 817, 837, 879, 889, 956, 969, 1054, 1116, 1140, 1143, 1156, 1250, 1262, 1280, 1282], "lower_bound": [204, 313, 378, 473, 778, 817, 889, 956, 1054, 1250, 1262], "lowercas": [564, 671, 673, 1222, 1224, 1284], "lowest": [533, 778], "lru_cach": [223, 313, 536, 778, 1118, 1262], "lst": 158, "lt": [453, 694, 778, 1262], "ltrim": 1282, "lyric": [632, 653, 1183, 1204], "lz4": [37, 38, 41, 43, 45, 313, 889], "lzo": [41, 45, 313, 889], "m": [62, 64, 218, 313, 397, 398, 400, 405, 406, 424, 426, 427, 438, 638, 665, 667, 668, 672, 721, 722, 723, 724, 730, 821, 889, 894, 895, 975, 976, 978, 983, 984, 1006, 1008, 1009, 1020, 1189, 1216, 1218, 1219, 1223, 1275, 1284, 1285], "m_2": [624, 778, 1176, 1262], "m_3": [624, 778, 1176, 1262], "m_i": [624, 778, 1176, 1262], "machin": 1292, "maco": 151, "made": [36, 131, 313], "mai": [1, 35, 41, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 183, 184, 190, 192, 204, 219, 220, 223, 245, 253, 260, 270, 272, 275, 281, 282, 283, 313, 316, 317, 388, 389, 391, 396, 397, 398, 409, 418, 422, 424, 427, 435, 447, 468, 502, 527, 535, 536, 545, 548, 581, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 641, 645, 647, 706, 714, 715, 719, 720, 722, 723, 728, 752, 754, 755, 765, 766, 778, 799, 800, 804, 805, 809, 817, 822, 823, 827, 840, 844, 850, 858, 864, 865, 873, 889, 950, 951, 967, 968, 969, 974, 975, 976, 987, 1000, 1004, 1006, 1009, 1017, 1027, 1034, 1050, 1085, 1118, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1192, 1196, 1198, 1241, 1244, 1246, 1262, 1267, 1292], "main": [151, 800, 889], "maintain": [42, 43, 44, 45, 259, 313, 363, 528, 616, 627, 689, 704, 778, 804, 849, 889, 938, 1111, 1165, 1248, 1262], "maintain_ord": [42, 43, 44, 45, 203, 236, 238, 259, 278, 283, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 323, 363, 373, 460, 463, 528, 536, 627, 687, 689, 704, 778, 800, 809, 816, 836, 847, 849, 855, 867, 869, 871, 874, 875, 876, 877, 878, 879, 880, 889, 938, 1111, 1248, 1262], "major": [134, 270, 313], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 230, 234, 241, 271, 283, 313, 445, 446, 468, 564, 565, 574, 587, 657, 778, 832, 889, 893, 1030, 1031, 1050, 1208, 1243, 1262], "man": [654, 1205], "manag": [46, 84, 85, 789, 790, 1277, 1289], "mandatori": [36, 313], "mango": [636, 659, 1187, 1210], "mani": [131, 132, 148, 192, 313, 641, 653, 1034, 1192, 1204, 1262, 1266], "manner": 131, "many_to_mani": [218, 313, 821, 889], "many_to_on": [218, 313, 821, 889], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 176, 179, 196, 216, 223, 242, 246, 247, 248, 250, 266, 313, 324, 422, 435, 535, 536, 557, 559, 560, 562, 564, 565, 588, 589, 653, 692, 739, 778, 796, 838, 841, 889, 894, 895, 969, 1004, 1017, 1118, 1145, 1146, 1204, 1251, 1262, 1272, 1274, 1275, 1289], "map_": 103, "map_batch": [778, 889], "map_el": [94, 223, 313, 535, 695, 778, 1262], "map_field": [561, 563], "map_row": 313, "mapelementsstrategi": [536, 778], "mapping_strategi": [574, 778], "march": [424, 427, 1006, 1009], "mariadb": 132, "mark": [126, 374, 778, 947, 1262], "mark_area": [1262, 1267], "mark_attr": [313, 316, 1262, 1267], "mark_bar": [313, 316, 1262, 1267], "mark_lin": [313, 316], "mark_point": [313, 316], "markdown": 20, "marker": [36, 313], "mask": [148, 211, 213, 313, 367, 474, 476, 479, 484, 576, 577, 631, 634, 642, 778, 941, 1038, 1054, 1055, 1058, 1061, 1067, 1135, 1136, 1166, 1182, 1185, 1193, 1253, 1262], "mass": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "massag": [229, 280, 313, 831, 857, 889], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 131, 138, 139, 147, 152, 153, 154, 155, 176, 194, 218, 219, 246, 282, 313, 542, 543, 588, 589, 606, 631, 632, 633, 636, 638, 639, 641, 642, 645, 646, 651, 652, 653, 659, 665, 667, 668, 768, 774, 778, 796, 812, 821, 822, 858, 889, 895, 1026, 1145, 1146, 1157, 1182, 1183, 1184, 1187, 1189, 1190, 1192, 1193, 1196, 1197, 1202, 1203, 1204, 1210, 1216, 1218, 1219, 1262, 1284], "matches_overlap": 641, "matches_supertyp": [194, 313, 812, 889], "materi": [223, 248, 299, 313, 799, 836, 873, 883, 889, 895, 1118, 1262], "materialis": [216, 217, 246, 247, 313], "math": [1, 10, 51, 238, 313, 390, 778, 958, 960, 1174, 1235, 1262, 1282, 1286, 1288], "mathemat": [688, 725, 778, 1282], "mathshortcut": [1, 51], "matplotlib": [151, 836, 847, 889], "matter": [204, 216, 245, 247, 248, 267, 313, 594, 661, 662, 778, 817, 840, 889], "max": [25, 36, 41, 45, 126, 183, 194, 203, 225, 238, 245, 313, 317, 384, 452, 527, 535, 574, 584, 588, 589, 594, 596, 597, 617, 658, 719, 722, 742, 758, 778, 804, 812, 816, 840, 889, 963, 969, 1037, 1110, 1141, 1152, 1167, 1209, 1262, 1271, 1280, 1282], "max_a": [245, 313, 594, 778, 840, 889], "max_binary_s": 131, "max_col": [157, 159], "max_colname_length": [202, 313], "max_color": [36, 313], "max_data_s": 163, "max_elem": 1280, "max_horizont": [313, 741], "max_items_per_column": [202, 313], "max_level": 126, "max_siz": [158, 159, 161, 163, 1292], "max_text_s": 131, "max_valu": 1292, "max_width": [527, 1110], "maxim": [300, 336, 778, 874, 911, 1262], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 149, 157, 158, 159, 161, 163, 202, 204, 224, 225, 313, 343, 492, 537, 566, 576, 584, 643, 645, 648, 655, 666, 741, 742, 778, 817, 828, 889, 918, 988, 1075, 1119, 1127, 1135, 1141, 1194, 1196, 1199, 1206, 1217, 1262, 1279], "mb": [190, 313, 370, 1027, 1262], "me": [632, 653, 673, 1183, 1204, 1224], "mean": [41, 45, 129, 130, 135, 141, 143, 146, 183, 194, 203, 204, 219, 227, 238, 245, 283, 292, 313, 418, 422, 435, 449, 452, 457, 594, 597, 598, 599, 601, 603, 605, 608, 610, 612, 624, 630, 638, 644, 719, 720, 722, 723, 724, 744, 765, 766, 768, 778, 804, 812, 816, 817, 822, 827, 840, 866, 889, 969, 1000, 1004, 1017, 1033, 1037, 1153, 1176, 1181, 1189, 1195, 1262, 1279, 1280], "mean_horizont": [313, 743], "measur": [229, 280, 313, 317, 831, 857, 889], "measure_a": [313, 317], "measure_b": [313, 317], "median": [183, 238, 313, 452, 600, 601, 778, 804, 863, 889, 969, 1154, 1262, 1282], "mediat": 1289, "medium": [36, 313], "megan": [230, 313, 832, 889], "melt": [280, 313, 857, 889], "member": [204, 313, 817, 889, 1059, 1262], "membership": [345, 495, 920, 1078], "memori": [14, 41, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 139, 141, 143, 146, 147, 148, 172, 192, 223, 247, 248, 257, 271, 299, 313, 574, 585, 619, 778, 799, 800, 889, 1034, 1118, 1142, 1170, 1171, 1243, 1262], "memory_map": [135, 141, 146], "merg": [35, 218, 219, 230, 313, 821, 822, 832, 889], "merge_sort": [313, 889], "messi": [638, 640, 1189, 1191], "met": 768, "meta": [391, 778], "metadata": [0, 145, 790], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 170, 179, 183, 184, 187, 192, 199, 203, 210, 216, 223, 234, 240, 246, 247, 248, 256, 278, 287, 294, 299, 305, 313, 322, 325, 326, 357, 378, 391, 424, 427, 441, 442, 450, 457, 459, 462, 464, 471, 487, 520, 534, 536, 551, 553, 555, 557, 558, 560, 562, 564, 565, 568, 569, 570, 573, 579, 582, 584, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 618, 632, 641, 653, 661, 662, 663, 664, 669, 675, 680, 688, 690, 695, 710, 740, 751, 770, 771, 773, 774, 778, 779, 780, 783, 784, 785, 786, 787, 790, 800, 804, 805, 807, 820, 837, 846, 855, 861, 868, 873, 879, 889, 894, 897, 904, 932, 956, 969, 1006, 1009, 1024, 1025, 1034, 1035, 1043, 1045, 1052, 1070, 1103, 1117, 1118, 1129, 1130, 1140, 1141, 1156, 1169, 1183, 1192, 1204, 1220, 1226, 1245, 1254, 1256, 1258, 1262, 1263, 1266, 1268, 1269, 1270, 1272, 1276], "metric": 131, "micro": [423, 1005], "microsecond": [62, 64, 204, 216, 219, 245, 247, 248, 267, 283, 313, 418, 422, 430, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 721, 722, 723, 724, 764, 765, 766, 778, 817, 822, 836, 840, 889, 895, 1000, 1004, 1012, 1017, 1029, 1262, 1285], "microsoft": [36, 313], "mid_color": [36, 313], "midnight": 77, "midpoint": [183, 240, 305, 313, 582, 604, 605, 751, 778, 804, 837, 879, 889, 969, 1140, 1156, 1262], "might": [129, 130, 143, 165, 238, 271, 280, 313, 536, 690, 778, 849, 857, 889], "millennia": 1285, "millennium": 1285, "milli": [423, 1005], "millisecond": [204, 219, 245, 283, 313, 407, 413, 418, 422, 431, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 895, 1000, 1004, 1013, 1017, 1029, 1262, 1285], "milliseconds_diff": [430, 431, 433], "mimic": 708, "min": [36, 41, 45, 183, 194, 232, 238, 245, 313, 385, 452, 536, 574, 584, 594, 602, 603, 719, 722, 747, 756, 778, 804, 812, 840, 889, 893, 964, 969, 1037, 1141, 1155, 1262, 1280, 1282, 1285, 1292], "min_a": [245, 313, 594, 778, 840, 889], "min_col": [157, 159], "min_color": [36, 313], "min_elem": 1280, "min_horizont": [313, 746, 756], "min_period": [388, 443, 445, 446, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 754, 755, 778, 967, 1028, 1030, 1031, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1262], "min_siz": [158, 159, 161, 163, 1292], "min_valu": 1292, "mincol": 157, "minim": [303, 337, 344, 493, 619, 627, 778, 877, 912, 919, 1076, 1122, 1170, 1262], "minimum": [41, 45, 157, 158, 159, 161, 163, 197, 231, 232, 313, 443, 445, 446, 552, 567, 577, 584, 746, 747, 778, 833, 889, 994, 1028, 1030, 1031, 1128, 1136, 1141, 1262, 1279, 1292], "minu": [418, 570, 778, 1000], "minut": [204, 219, 245, 283, 313, 407, 410, 412, 417, 418, 422, 423, 432, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 721, 722, 723, 724, 764, 765, 766, 778, 817, 822, 840, 889, 895, 1000, 1004, 1014, 1017, 1029, 1262, 1285], "minutes_diff": 432, "misc": 1277, "miscellan": 790, "mismatch": [55, 108, 139, 147, 152, 154], "miss": [55, 129, 130, 143, 193, 199, 313, 365, 443, 445, 446, 451, 458, 480, 481, 527, 778, 811, 889, 1028, 1030, 1031, 1036, 1262], "missing_utf8_is_empty_str": [129, 130, 143], "mix": [11, 219, 271, 313, 757, 822, 850, 889, 895, 969, 1262], "mixin": 1, "mlnm": 411, "mm": [36, 313], "mn": 1284, "mno": [16, 20], "mnop": 1284, "mo": 724, "mocha": 895, "mod": [778, 1282], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 238, 260, 313, 639, 750, 753, 769, 778, 799, 800, 809, 889, 1190, 1262, 1271, 1272, 1289], "model": [275, 313], "modifi": [129, 130, 143, 165, 168, 192, 208, 215, 216, 285, 313, 339, 421, 438, 631, 638, 639, 642, 651, 652, 671, 673, 674, 778, 904, 1003, 1020, 1034, 1182, 1189, 1190, 1193, 1202, 1203, 1222, 1224, 1225, 1262], "modul": [87, 95, 134, 777, 895, 1292], "modulu": [553, 778], "moment": [41, 181, 313, 485, 624, 778, 1069, 1176, 1262], "mon": [313, 316, 1285], "mondai": [204, 313, 396, 435, 437, 706, 817, 889, 974, 1017, 1019], "monkei": [649, 650, 1200, 1201], "month": [204, 219, 245, 283, 313, 404, 415, 416, 418, 422, 424, 427, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 718, 719, 720, 721, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 982, 997, 998, 1000, 1004, 1006, 1009, 1017, 1029, 1262, 1285], "month_nam": [424, 427], "monthbegin": [416, 998], "monthend": [415, 997], "moos": 895, "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 147, 152, 154, 159, 168, 170, 181, 183, 195, 215, 216, 223, 229, 234, 246, 247, 249, 260, 270, 271, 275, 278, 280, 299, 313, 317, 326, 363, 453, 457, 465, 485, 515, 528, 532, 535, 536, 573, 615, 624, 639, 647, 665, 667, 668, 689, 700, 711, 727, 733, 736, 743, 745, 748, 749, 758, 768, 774, 778, 804, 813, 831, 850, 855, 857, 889, 893, 895, 897, 938, 950, 969, 1046, 1047, 1069, 1098, 1111, 1118, 1163, 1176, 1190, 1198, 1216, 1218, 1219, 1241, 1243, 1248, 1262, 1277, 1278, 1287, 1290, 1291, 1292], "more_bi": [236, 259, 313, 627, 778, 849, 889], "more_column": [191, 279, 313, 447, 726, 778, 810, 856, 889, 895], "more_expr": [574, 704, 707, 708, 709, 778], "more_nam": [676, 774], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 271, 313, 546, 554, 575, 589, 658, 778, 1123, 1134, 1146, 1209, 1243, 1262, 1274, 1289], "mostli": [265, 313, 453, 778], "move": [18, 238, 248, 313, 396, 443, 444, 445, 446, 596, 598, 602, 609, 778, 974, 1028, 1029, 1030, 1031, 1152, 1153, 1155, 1159, 1262], "mssql": [34, 313], "much": [223, 281, 299, 313, 388, 502, 536, 647, 648, 740, 778, 873, 967, 1085, 1118, 1198, 1199, 1262], "mul": 778, "multi": [8, 36, 129, 130, 275, 313, 447, 638, 778, 1189], "multi_fram": [36, 313], "multicolselector": 173, "multiindexselector": [173, 899], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 185, 190, 192, 195, 203, 204, 208, 217, 220, 236, 238, 248, 251, 254, 259, 282, 287, 292, 313, 373, 502, 535, 541, 546, 554, 555, 574, 588, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 627, 676, 687, 704, 711, 728, 739, 741, 746, 752, 758, 761, 768, 774, 778, 799, 800, 806, 813, 816, 817, 823, 842, 845, 849, 858, 861, 866, 873, 889, 904, 933, 1027, 1034, 1085, 1105, 1123, 1145, 1147, 1178, 1262, 1275, 1280], "multipli": [535, 595, 596, 598, 600, 602, 604, 607, 609, 611, 679, 778, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1262], "multithread": [259, 313, 627, 704, 778, 849, 889, 933, 1105, 1178, 1262], "must": [36, 65, 117, 118, 133, 144, 145, 149, 183, 191, 204, 219, 220, 230, 238, 245, 246, 313, 389, 527, 536, 581, 588, 589, 594, 597, 599, 601, 603, 605, 608, 610, 612, 653, 719, 720, 768, 778, 804, 810, 817, 822, 823, 827, 832, 840, 847, 889, 893, 968, 969, 1139, 1145, 1146, 1204, 1262], "mutual": [246, 313], "my": [145, 149], "my_column": 873, "my_column_": [277, 313], "my_column_0": [277, 313], "my_column_1": [277, 313], "my_column_2": [277, 313], "my_custom_aggreg": 740, "my_fil": 135, "my_holidai": [396, 706, 974], "my_larger_than_ram_fil": [42, 43, 44, 45, 889], "my_long_fil": 143, "my_struct": 760, "mydf": 143, "myrol": 132, "mysql": 132, "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 177, 192, 198, 204, 206, 216, 217, 222, 223, 247, 248, 249, 256, 261, 264, 267, 269, 284, 296, 298, 307, 313, 329, 357, 362, 370, 372, 373, 388, 392, 396, 398, 400, 406, 426, 438, 444, 450, 453, 461, 467, 489, 497, 503, 505, 515, 516, 520, 523, 525, 527, 529, 575, 578, 587, 607, 608, 611, 612, 615, 618, 624, 629, 643, 647, 648, 651, 657, 658, 660, 661, 666, 668, 682, 686, 687, 688, 692, 693, 695, 710, 712, 721, 722, 723, 724, 730, 732, 750, 753, 754, 755, 759, 763, 767, 769, 778, 797, 799, 815, 817, 818, 826, 846, 851, 853, 859, 870, 872, 881, 889, 895, 932, 937, 944, 946, 955, 967, 970, 974, 976, 978, 984, 1008, 1020, 1029, 1034, 1035, 1042, 1049, 1072, 1080, 1086, 1088, 1098, 1099, 1103, 1108, 1110, 1134, 1158, 1160, 1163, 1169, 1176, 1180, 1194, 1198, 1199, 1202, 1208, 1209, 1217, 1219, 1234, 1240, 1247, 1251, 1252, 1262, 1274, 1275, 1281, 1284, 1285, 1287, 1289, 1292], "n0": [362, 527], "n00": [937, 1110], "n01": [937, 1110], "n02": [937, 1110], "n1": [362, 527], "n2": [1, 362], "n3": 1, "n_1": [453, 778], "n_2": [453, 778], "n_3": [453, 778], "n_bar": 1279, "n_bit": 1284, "n_byte": [370, 647, 648, 1284], "n_char": [647, 648, 1284], "n_chunk": [313, 904, 1034, 1142, 1262], "n_elem": 1280, "n_even": 895, "n_field_strategi": [527, 1110], "n_film": 1271, "n_foo_uniqu": 1279, "n_kilobyt": 370, "n_row": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 217, 313, 889], "n_thread": [129, 130], "n_uniqu": [313, 329, 778, 1262], "na": [272, 313, 659, 1244, 1262], "naiv": [400, 401, 668, 978, 979, 1219], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 175, 176, 179, 180, 185, 186, 187, 191, 195, 196, 199, 200, 202, 203, 214, 215, 216, 218, 219, 220, 223, 225, 227, 229, 230, 232, 236, 238, 242, 246, 247, 248, 250, 251, 252, 259, 260, 263, 266, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 292, 298, 313, 317, 324, 362, 366, 367, 369, 371, 373, 389, 424, 427, 447, 453, 473, 480, 481, 482, 483, 527, 536, 541, 543, 545, 547, 550, 574, 581, 591, 627, 639, 640, 651, 652, 653, 676, 678, 679, 687, 692, 696, 697, 698, 699, 700, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 716, 717, 726, 727, 732, 733, 736, 741, 742, 743, 744, 745, 746, 747, 748, 751, 754, 755, 756, 757, 759, 760, 761, 762, 763, 767, 768, 774, 778, 794, 796, 801, 802, 806, 807, 810, 813, 816, 821, 822, 823, 831, 832, 838, 841, 842, 843, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 872, 889, 893, 894, 895, 901, 937, 955, 968, 1006, 1009, 1026, 1110, 1139, 1144, 1189, 1190, 1191, 1202, 1203, 1227, 1230, 1238, 1239, 1244, 1251, 1262, 1267, 1272, 1273, 1274, 1275, 1276, 1277, 1288, 1289, 1292], "name_gener": [277, 313], "named_agg": [292, 866], "named_bi": [203, 313, 816, 889], "named_expr": [251, 252, 287, 288, 313, 679, 756, 760, 842, 843, 861, 862, 889], "named_fram": [1275, 1289], "nameless": 121, "namespac": [1, 131, 312, 313, 316, 676, 757, 777, 790, 887, 888, 1262, 1267, 1292], "nan": [121, 159, 172, 193, 271, 272, 313, 394, 395, 441, 442, 451, 462, 464, 471, 480, 481, 482, 483, 487, 534, 537, 552, 566, 567, 568, 569, 595, 621, 688, 710, 778, 811, 889, 906, 910, 972, 973, 1036, 1062, 1063, 1127, 1128, 1151, 1173, 1243, 1244, 1262, 1292], "nan_as_nul": 172, "nan_max": [778, 1262], "nan_min": [778, 1262], "nan_to_nul": [121, 313, 889, 1262], "nana": 1284, "nanmax": [566, 567, 778, 1127, 1128, 1262], "nanosecond": [77, 204, 219, 245, 283, 313, 418, 422, 423, 433, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1005, 1015, 1017, 1029, 1262, 1285], "nansum": [595, 778, 1151, 1262], "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 216, 223, 247, 248, 267, 271, 299, 313, 536, 740, 757, 778, 784, 850, 873, 889, 1118, 1243, 1262, 1266, 1289, 1292], "natur": [532, 778, 1115, 1262, 1278, 1283], "ndarrai": [120, 170, 195, 271, 313, 460, 616, 778, 813, 889, 897, 1041, 1164, 1165, 1243, 1262], "ndjson": [44, 889], "ne": [569, 778, 1025, 1130, 1262], "ne_miss": [195, 313, 778, 813, 889, 1025, 1262], "nearest": [49, 183, 219, 240, 305, 313, 377, 456, 471, 582, 604, 605, 751, 778, 804, 822, 837, 879, 889, 953, 969, 1040, 1052, 1140, 1156, 1262, 1283], "nearest_pow2": 49, "necessari": [33, 34, 42, 46, 85, 134, 271, 313, 889, 1243, 1262], "need": [55, 86, 95, 123, 129, 130, 132, 141, 143, 146, 148, 204, 245, 248, 257, 313, 316, 527, 594, 619, 653, 669, 724, 750, 753, 769, 778, 817, 840, 889, 1170, 1204, 1220, 1262, 1267, 1292], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 206, 222, 245, 256, 258, 264, 290, 313, 357, 520, 521, 578, 579, 594, 618, 625, 643, 655, 666, 778, 840, 846, 848, 864, 865, 889, 895, 932, 1049, 1072, 1103, 1104, 1137, 1169, 1177, 1194, 1206, 1217, 1234, 1262], "negat": [571, 778, 1132, 1262], "neither": [123, 134, 140, 249, 313, 362, 527, 937, 1110], "nest": [46, 123, 126, 160, 161, 190, 313, 790, 1027, 1262, 1289, 1292], "nest_asyncio": 151, "nesting_level": 160, "net": [639, 1190], "netherland": [219, 313, 822, 889], "never": [33, 42, 131, 218, 219, 246, 313, 821, 822, 889], "new": [34, 35, 36, 143, 168, 173, 198, 208, 209, 223, 234, 235, 238, 242, 277, 279, 281, 282, 287, 288, 313, 324, 400, 449, 459, 461, 471, 558, 559, 574, 588, 589, 593, 651, 652, 657, 658, 676, 678, 774, 778, 790, 815, 838, 856, 858, 861, 862, 873, 889, 899, 901, 978, 1033, 1042, 1131, 1144, 1145, 1146, 1150, 1202, 1203, 1208, 1209, 1227, 1230, 1239, 1262, 1289, 1291], "new_column": [129, 130, 134, 143], "new_dat": 418, "new_df": [282, 313, 858, 889], "new_fil": [31, 33, 37, 38, 41, 313], "new_from_index": 1262, "new_id": [277, 313], "new_lf": [858, 889], "new_tabl": 1291, "new_valu": [714, 715, 728, 752], "new_york": 722, "newli": 47, "newlin": [40, 139, 147, 313], "next": [49, 204, 219, 245, 283, 313, 365, 396, 418, 422, 435, 584, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 974, 1000, 1004, 1017, 1141, 1262], "next_batch": 130, "next_pow2": 49, "nfruit": 666, "nl": [396, 706, 974], "nnel_id": 123, "no1": 895, "no_default": [199, 313, 588, 589, 653, 778, 1145, 1146, 1204, 1262], "no_optim": [42, 43, 44, 45, 53, 54, 799, 800, 827, 836, 889], "nodataerror": [129, 130, 134, 140, 143], "nodd": [638, 1189], "node": [795, 799, 819, 827, 831, 836, 838, 889], "nodefault": [199, 313, 588, 589, 653, 778, 1145, 1146, 1204, 1262], "non": [4, 5, 33, 35, 36, 42, 47, 62, 63, 121, 150, 175, 182, 217, 229, 245, 251, 252, 256, 276, 277, 280, 282, 287, 288, 313, 372, 373, 378, 382, 383, 396, 421, 473, 527, 535, 536, 575, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 633, 639, 647, 653, 673, 675, 679, 686, 687, 697, 699, 707, 708, 709, 711, 713, 717, 724, 742, 744, 747, 754, 755, 756, 760, 762, 778, 794, 803, 831, 840, 842, 843, 846, 854, 857, 858, 861, 862, 889, 893, 895, 946, 956, 961, 962, 969, 974, 1003, 1054, 1110, 1118, 1134, 1145, 1146, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1169, 1184, 1190, 1198, 1224, 1226, 1243, 1247, 1262, 1281, 1289], "non_exist": [421, 1003], "non_numer": [33, 42, 313, 889], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 54, 56, 59, 62, 63, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 171, 177, 182, 183, 187, 193, 194, 195, 197, 199, 202, 204, 205, 210, 214, 218, 219, 221, 223, 226, 229, 234, 235, 238, 245, 246, 249, 253, 256, 258, 259, 265, 266, 268, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 294, 298, 313, 325, 327, 328, 340, 341, 342, 349, 350, 362, 365, 378, 382, 383, 384, 387, 389, 394, 395, 403, 418, 421, 442, 443, 444, 445, 446, 447, 450, 451, 452, 458, 465, 466, 468, 471, 472, 473, 480, 481, 482, 483, 488, 490, 491, 498, 504, 506, 508, 515, 516, 517, 518, 519, 521, 527, 535, 536, 545, 548, 549, 551, 556, 569, 570, 571, 572, 574, 575, 581, 584, 585, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 618, 619, 620, 621, 625, 626, 630, 631, 633, 635, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 655, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 670, 672, 675, 676, 677, 678, 685, 692, 697, 698, 699, 701, 707, 708, 709, 711, 713, 717, 719, 720, 721, 722, 723, 724, 726, 727, 734, 735, 736, 737, 738, 739, 740, 742, 744, 747, 753, 754, 755, 760, 762, 764, 765, 766, 768, 778, 797, 798, 800, 803, 804, 807, 809, 811, 812, 813, 817, 820, 821, 822, 825, 827, 831, 834, 840, 844, 846, 847, 848, 849, 855, 856, 857, 858, 863, 868, 872, 873, 882, 883, 889, 893, 894, 895, 897, 898, 902, 903, 911, 912, 916, 917, 924, 925, 937, 955, 956, 961, 962, 968, 969, 971, 972, 973, 981, 988, 989, 990, 994, 1003, 1023, 1025, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1046, 1048, 1050, 1052, 1053, 1054, 1064, 1065, 1068, 1069, 1071, 1073, 1074, 1077, 1081, 1087, 1089, 1091, 1098, 1099, 1100, 1101, 1102, 1104, 1110, 1118, 1119, 1120, 1121, 1122, 1130, 1133, 1139, 1140, 1141, 1145, 1146, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1169, 1172, 1173, 1176, 1177, 1180, 1181, 1182, 1184, 1186, 1187, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1217, 1218, 1219, 1221, 1223, 1226, 1229, 1237, 1239, 1240, 1241, 1243, 1244, 1245, 1251, 1252, 1262, 1271, 1273, 1274, 1275, 1277, 1280, 1281, 1285, 1289], "nonexist": [421, 1003], "nor": [134, 140, 249, 313], "normal": [35, 126, 204, 313, 440, 485, 624, 692, 778, 817, 889, 1023, 1069, 1176, 1251, 1262], "normalised_scor": 131, "norowsreturnederror": [246, 313], "not_": [287, 313, 778, 861, 889, 895, 1262], "not_c": [287, 313, 861, 889], "notabl": 131, "notat": [11, 36, 313], "note": [4, 10, 20, 35, 36, 41, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 147, 149, 152, 154, 157, 159, 163, 165, 168, 172, 179, 181, 183, 184, 193, 195, 204, 205, 214, 215, 216, 218, 219, 223, 234, 237, 238, 245, 246, 247, 248, 253, 256, 260, 267, 270, 272, 275, 277, 278, 280, 282, 283, 287, 289, 290, 313, 357, 378, 386, 387, 391, 394, 395, 401, 415, 416, 418, 422, 435, 444, 451, 457, 459, 466, 473, 480, 481, 499, 502, 520, 527, 536, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 620, 624, 630, 631, 632, 637, 638, 639, 640, 641, 642, 643, 647, 648, 651, 652, 653, 655, 660, 661, 662, 665, 666, 673, 675, 676, 681, 688, 697, 699, 706, 714, 719, 720, 722, 723, 724, 728, 738, 750, 752, 753, 757, 765, 766, 768, 769, 774, 778, 789, 800, 804, 805, 811, 813, 817, 818, 821, 822, 826, 838, 840, 844, 846, 847, 849, 850, 855, 857, 858, 861, 864, 865, 889, 895, 932, 956, 965, 966, 969, 972, 973, 979, 997, 998, 1000, 1004, 1017, 1029, 1036, 1048, 1054, 1082, 1085, 1103, 1118, 1145, 1146, 1150, 1157, 1164, 1166, 1169, 1171, 1176, 1181, 1182, 1183, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198, 1199, 1202, 1203, 1204, 1206, 1211, 1212, 1213, 1216, 1217, 1224, 1226, 1233, 1244, 1246, 1262, 1271, 1272, 1276, 1277, 1287, 1289], "noth": [20, 638, 646, 1189, 1197], "notic": [131, 195, 313, 813, 889, 1262], "notimplementederror": 172, "now": [47, 134, 245, 271, 313, 840, 889, 1243, 1262], "np": [120, 170, 195, 271, 313, 460, 535, 616, 778, 813, 889, 897, 1041, 1057, 1060, 1062, 1063, 1164, 1165, 1262], "npt": [170, 897], "nr": [296, 307, 870, 881], "nth": [198, 313, 461, 658, 774, 778, 815, 889, 1042, 1209, 1262], "nthe": [638, 1189], "nthose": [638, 1189], "nu": 636, "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 143, 147, 149, 156, 159, 163, 172, 175, 177, 182, 183, 187, 189, 194, 195, 197, 210, 218, 226, 227, 228, 235, 238, 240, 256, 259, 261, 262, 263, 266, 271, 272, 276, 279, 282, 284, 287, 294, 313, 325, 327, 328, 338, 341, 342, 349, 350, 357, 358, 365, 367, 372, 373, 374, 378, 382, 383, 384, 387, 392, 394, 395, 418, 421, 428, 429, 430, 431, 432, 433, 434, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 458, 465, 471, 472, 480, 481, 482, 483, 488, 490, 491, 497, 498, 501, 502, 504, 506, 507, 508, 516, 517, 518, 519, 520, 522, 527, 535, 536, 556, 569, 570, 571, 572, 575, 585, 589, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 619, 621, 626, 627, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 655, 657, 658, 659, 665, 666, 668, 670, 675, 676, 677, 678, 685, 686, 687, 696, 697, 698, 699, 704, 707, 708, 709, 711, 713, 717, 721, 726, 737, 738, 742, 744, 747, 754, 755, 760, 762, 768, 778, 794, 797, 803, 804, 807, 812, 813, 820, 821, 834, 846, 849, 854, 856, 858, 861, 863, 868, 889, 895, 902, 903, 913, 916, 917, 924, 925, 932, 933, 941, 946, 947, 955, 956, 961, 962, 970, 972, 973, 1003, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1026, 1028, 1029, 1030, 1031, 1035, 1037, 1038, 1046, 1047, 1052, 1053, 1064, 1065, 1066, 1071, 1073, 1074, 1077, 1080, 1081, 1084, 1085, 1087, 1089, 1090, 1091, 1100, 1102, 1103, 1105, 1110, 1118, 1130, 1133, 1134, 1146, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1169, 1173, 1178, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1206, 1208, 1209, 1210, 1216, 1217, 1219, 1221, 1226, 1229, 1240, 1243, 1244, 1245, 1247, 1262, 1274, 1278, 1280, 1281, 1285, 1287, 1289, 1290, 1292], "null_behavior": [392, 497, 778, 970, 1080, 1262], "null_count": [41, 45, 183, 187, 313, 388, 778, 804, 889, 967, 969, 1262], "null_equ": [189, 313, 1026, 1262], "null_on_oob": [349, 502, 504, 924, 1085, 1087], "null_prob": [156, 159, 163], "null_valu": [33, 42, 129, 130, 143, 313, 889], "nullabl": [35, 313], "nullbehavior": [392, 497, 778, 970, 1080, 1262], "nullif": 1282, "nulls_last": [259, 313, 338, 358, 522, 626, 627, 704, 778, 849, 889, 913, 933, 1066, 1105, 1178, 1262], "num": [13, 36, 274, 313, 473, 778, 1054, 1262], "num_row": 172, "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 175, 177, 182, 190, 191, 193, 194, 202, 206, 207, 216, 217, 222, 233, 234, 245, 249, 256, 261, 264, 276, 281, 284, 286, 294, 296, 298, 307, 313, 339, 355, 357, 362, 365, 372, 373, 382, 388, 389, 392, 396, 399, 407, 409, 411, 413, 414, 423, 436, 437, 439, 443, 444, 445, 446, 450, 451, 452, 458, 467, 480, 481, 488, 489, 497, 505, 508, 513, 515, 520, 523, 525, 527, 529, 574, 578, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 620, 629, 643, 645, 647, 648, 651, 655, 657, 658, 666, 669, 682, 686, 687, 693, 706, 710, 711, 712, 724, 732, 737, 754, 755, 759, 763, 767, 778, 794, 797, 803, 810, 811, 812, 818, 826, 836, 846, 851, 853, 854, 859, 860, 868, 870, 872, 881, 889, 894, 930, 932, 937, 946, 955, 961, 967, 968, 970, 974, 977, 985, 987, 992, 995, 996, 1005, 1018, 1019, 1021, 1027, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1049, 1071, 1072, 1080, 1088, 1091, 1096, 1098, 1103, 1108, 1110, 1124, 1125, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1169, 1172, 1180, 1194, 1196, 1198, 1199, 1202, 1206, 1208, 1209, 1217, 1220, 1234, 1247, 1252, 1262, 1278, 1283, 1292], "number_of_two": [346, 496], "numbers_decim": 669, "numer": [10, 16, 33, 36, 42, 133, 144, 176, 185, 219, 271, 272, 280, 281, 313, 322, 374, 378, 457, 473, 532, 553, 555, 579, 587, 619, 621, 640, 675, 680, 688, 778, 790, 796, 806, 822, 857, 889, 895, 947, 956, 969, 1054, 1170, 1173, 1191, 1226, 1243, 1262, 1283, 1292], "numeric_dtyp": 1292, "numericliter": [378, 778, 956, 1262], "numpi": [90, 120, 151, 170, 181, 216, 247, 248, 267, 271, 272, 313, 535, 566, 567, 595, 778, 889, 897, 1057, 1060, 1062, 1063, 1127, 1128, 1151, 1243, 1244, 1262], "nworld": 660, "o": [135, 146, 370, 372, 373, 388, 637, 686, 687, 778, 944, 946, 967, 1188, 1211, 1247, 1262, 1275], "oauth": 145, "obj": 895, "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 171, 172, 179, 184, 203, 204, 219, 221, 236, 245, 248, 253, 260, 270, 271, 272, 313, 391, 548, 719, 720, 722, 723, 738, 757, 765, 766, 778, 790, 799, 805, 817, 822, 825, 840, 850, 889, 895, 898, 1237, 1262, 1272, 1274, 1277, 1289, 1291], "observ": [389, 443, 444, 445, 446, 581, 778, 968, 1028, 1029, 1030, 1031, 1139, 1262], "obtain": 527, "obvious": 678, "occur": [36, 53, 54, 91, 100, 106, 220, 313, 346, 496, 554, 584, 778, 799, 800, 809, 823, 836, 847, 889, 921, 1079, 1123, 1141, 1243, 1262], "occurr": [468, 476, 479, 692, 778, 1050, 1058, 1061, 1251, 1262], "oct": 1284, "octet_length": 1282, "octob": 1284, "od": [140, 790], "odbc": [34, 131, 313], "odd": 638, "odi": 641, "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 313, 396, 706, 799, 800, 809, 821, 822, 827, 836, 889, 974], "offer": [237, 313, 578, 778, 835, 889, 1285, 1289], "offic": [36, 313], "offset": [64, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 198, 204, 245, 258, 289, 290, 313, 396, 397, 405, 415, 416, 418, 422, 435, 461, 503, 521, 594, 625, 655, 668, 778, 815, 817, 840, 848, 864, 865, 889, 974, 975, 983, 997, 998, 1000, 1004, 1017, 1042, 1086, 1104, 1177, 1206, 1219, 1262, 1288], "offset_bi": 724, "often": [132, 168, 204, 245, 313, 346, 496, 587, 594, 778, 817, 840, 889, 921, 1079, 1277, 1289], "ok": 527, "old": [35, 242, 313, 588, 589, 778, 838, 889, 1145, 1146, 1262], "old_tabl": 1291, "older": [41, 45, 313, 889], "oldw": 661, "omit": [27, 119, 123, 157, 168, 234, 248, 270, 275, 313, 719, 722, 734, 735, 765, 766, 895, 1290], "onc": [129, 130, 165, 223, 247, 249, 292, 313, 515, 535, 536, 615, 663, 664, 778, 795, 866, 889, 1098, 1118, 1163, 1214, 1215, 1262, 1275], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 147, 162, 164, 168, 176, 184, 194, 195, 202, 203, 204, 216, 220, 221, 229, 238, 245, 246, 247, 253, 254, 256, 271, 274, 280, 293, 313, 323, 357, 389, 391, 452, 453, 457, 460, 463, 465, 520, 527, 532, 548, 557, 558, 560, 562, 564, 565, 593, 594, 618, 626, 638, 639, 640, 653, 676, 719, 722, 740, 758, 768, 774, 778, 796, 805, 812, 813, 816, 817, 823, 831, 840, 844, 845, 846, 857, 863, 867, 889, 904, 932, 937, 968, 1037, 1046, 1047, 1103, 1110, 1115, 1139, 1150, 1169, 1189, 1190, 1191, 1204, 1227, 1243, 1262, 1277, 1278, 1280, 1283, 1291], "one_to_mani": [218, 313, 821, 889], "one_to_on": [218, 313, 821, 889], "oneormoredatatyp": [36, 157, 313], "ones": 895, "onf": [655, 1206], "onli": [1, 5, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 139, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 187, 192, 204, 205, 216, 219, 223, 238, 245, 247, 248, 267, 269, 270, 271, 282, 283, 299, 313, 323, 325, 327, 339, 377, 378, 391, 396, 418, 425, 447, 456, 466, 535, 536, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 574, 586, 632, 641, 653, 690, 706, 740, 778, 799, 802, 805, 807, 808, 817, 818, 822, 826, 840, 841, 858, 860, 873, 889, 893, 895, 902, 903, 904, 953, 956, 974, 1000, 1034, 1040, 1048, 1118, 1143, 1183, 1192, 1204, 1237, 1240, 1243, 1262, 1271, 1274, 1289, 1290, 1292], "onlin": [192, 313, 1034, 1262], "ont": [641, 1192], "onto": 159, "oof": [654, 1205, 1280, 1284], "op": [20, 163, 313, 542, 587, 778, 825, 889, 1262], "opaqu": 873, "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 391, 778, 805, 889], "openoffic": 140, "openpyxl": [134, 151], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 178, 192, 195, 197, 203, 209, 221, 223, 230, 234, 236, 237, 238, 241, 243, 245, 248, 249, 254, 256, 265, 271, 272, 277, 280, 281, 291, 292, 313, 322, 323, 326, 357, 383, 384, 385, 386, 387, 388, 441, 442, 457, 459, 462, 464, 487, 515, 516, 517, 518, 519, 520, 527, 534, 550, 553, 555, 556, 557, 558, 560, 562, 564, 565, 568, 569, 570, 573, 574, 579, 586, 615, 618, 680, 688, 695, 696, 698, 708, 709, 713, 725, 757, 768, 778, 790, 798, 802, 804, 808, 813, 816, 818, 821, 826, 831, 832, 841, 845, 846, 850, 857, 860, 866, 889, 893, 932, 957, 962, 963, 964, 965, 966, 967, 1024, 1025, 1034, 1043, 1045, 1070, 1098, 1099, 1100, 1101, 1102, 1103, 1117, 1129, 1130, 1143, 1163, 1169, 1237, 1242, 1243, 1244, 1262, 1288, 1289], "operand": [688, 778], "opp": 895, "oppos": 706, "opposit": [256, 313, 357, 520, 618, 778, 846, 889, 932, 1103, 1169, 1262], "opt": [275, 313], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 216, 221, 237, 241, 247, 278, 313, 795, 799, 800, 809, 827, 836, 847, 855, 864, 865, 873, 889, 952, 1164, 1262], "optimis": [131, 223, 248, 299, 313, 889, 1118, 1166, 1262, 1292], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 184, 199, 204, 214, 219, 229, 253, 260, 266, 277, 280, 282, 313, 391, 396, 485, 542, 548, 595, 596, 598, 600, 602, 604, 607, 609, 611, 624, 632, 641, 653, 655, 692, 760, 768, 778, 790, 799, 805, 817, 821, 822, 831, 844, 850, 857, 858, 889, 895, 974, 1069, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1176, 1183, 1192, 1204, 1206, 1239, 1251, 1262, 1280, 1284], "optional_memb": [477, 778, 1059, 1262], "or_": 778, "oracl": 132, "orang": [180, 294, 295, 297, 298, 300, 301, 303, 305, 306, 313, 373, 687, 778, 868, 869, 871, 872, 874, 875, 877, 879, 880, 1284], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 131, 150, 152, 153, 154, 155, 175, 179, 180, 187, 188, 195, 203, 204, 218, 220, 236, 237, 238, 245, 247, 249, 250, 254, 259, 270, 271, 276, 278, 283, 313, 338, 358, 363, 372, 373, 394, 395, 453, 498, 515, 522, 528, 574, 579, 584, 594, 615, 616, 617, 626, 627, 654, 661, 662, 663, 664, 678, 686, 687, 689, 690, 692, 704, 757, 768, 778, 789, 794, 802, 807, 808, 813, 816, 817, 821, 823, 831, 840, 841, 845, 849, 850, 854, 855, 889, 894, 895, 913, 933, 938, 946, 951, 972, 973, 1038, 1066, 1081, 1098, 1105, 1111, 1137, 1141, 1148, 1163, 1165, 1167, 1178, 1205, 1230, 1247, 1248, 1249, 1251, 1262, 1271, 1274, 1280, 1288, 1289, 1292], "order_bi": [574, 778], "ordin": [419, 584, 778, 1001, 1141, 1262, 1290], "ordinal_dai": [404, 437], "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 313, 847, 889, 897, 898], "orient": [48, 50, 91, 120, 122, 234, 313, 889, 1271], "origin": [47, 129, 130, 143, 187, 195, 278, 313, 394, 395, 421, 422, 435, 453, 498, 536, 557, 574, 586, 587, 588, 589, 590, 592, 633, 638, 646, 702, 703, 778, 807, 813, 855, 889, 972, 973, 1003, 1004, 1017, 1038, 1081, 1145, 1146, 1147, 1149, 1184, 1189, 1197, 1262], "orld": 1212, "other": [1, 20, 32, 36, 41, 54, 128, 129, 130, 131, 134, 143, 148, 152, 153, 154, 155, 187, 189, 192, 195, 218, 219, 220, 229, 230, 238, 246, 248, 251, 252, 275, 280, 282, 285, 287, 288, 311, 313, 316, 322, 326, 328, 338, 339, 378, 393, 441, 442, 453, 457, 462, 464, 473, 477, 487, 494, 516, 517, 518, 519, 534, 540, 544, 553, 555, 568, 569, 573, 588, 589, 620, 627, 653, 679, 680, 685, 688, 695, 697, 699, 704, 707, 708, 709, 717, 724, 742, 744, 747, 756, 760, 762, 778, 790, 800, 807, 813, 821, 822, 823, 831, 832, 842, 843, 857, 858, 861, 862, 863, 889, 895, 904, 956, 971, 1024, 1025, 1026, 1034, 1043, 1045, 1059, 1070, 1077, 1099, 1100, 1101, 1102, 1117, 1129, 1130, 1145, 1146, 1245, 1253, 1261, 1262, 1267, 1277, 1289], "other_df": [218, 313], "other_lf": [821, 889], "otherwis": [34, 131, 134, 141, 146, 158, 161, 165, 199, 223, 230, 248, 251, 270, 275, 299, 313, 362, 367, 378, 389, 443, 444, 445, 446, 527, 536, 545, 574, 578, 579, 581, 586, 621, 631, 634, 637, 642, 643, 648, 655, 666, 692, 696, 724, 727, 736, 740, 768, 778, 832, 842, 873, 889, 937, 941, 956, 968, 1028, 1029, 1030, 1031, 1110, 1118, 1137, 1139, 1143, 1164, 1166, 1173, 1182, 1185, 1188, 1193, 1194, 1199, 1206, 1217, 1251, 1262, 1281], "our": 173, "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 148, 151, 195, 245, 248, 313, 349, 367, 502, 504, 631, 634, 642, 768, 813, 840, 889, 924, 941, 1085, 1087, 1182, 1185, 1193, 1287], "outcom": [574, 778], "outer": [47, 55, 282, 313, 858, 889], "outermost": 46, "outlin": 7, "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 41, 42, 175, 183, 216, 220, 223, 227, 230, 236, 238, 247, 251, 253, 263, 276, 283, 287, 313, 325, 327, 350, 372, 373, 389, 506, 527, 535, 536, 545, 548, 558, 581, 588, 630, 644, 648, 686, 687, 692, 696, 697, 698, 699, 708, 709, 710, 739, 740, 778, 790, 794, 804, 809, 823, 827, 831, 832, 842, 844, 854, 861, 873, 889, 902, 903, 925, 946, 968, 1089, 1118, 1139, 1181, 1195, 1199, 1247, 1251, 1262], "output_path": [847, 889], "outsid": [378, 778, 956, 1262], "over": [125, 129, 130, 131, 133, 134, 140, 143, 148, 159, 160, 175, 192, 215, 216, 217, 223, 246, 247, 248, 260, 276, 277, 291, 299, 313, 317, 372, 373, 388, 391, 444, 452, 535, 536, 545, 547, 548, 549, 550, 558, 559, 584, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 686, 687, 714, 715, 728, 739, 740, 752, 757, 778, 794, 799, 850, 854, 873, 889, 895, 946, 967, 1029, 1034, 1118, 1152, 1153, 1155, 1159, 1247, 1262, 1289], "overflow": [176, 313, 374, 386, 387, 670, 681, 778, 796, 889, 947, 965, 966, 1221, 1233, 1262], "overhead": [46, 85, 143, 146, 147, 148], "overlap": [633, 639, 641, 1184, 1190, 1192], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 147, 156, 157, 163, 165, 313, 889], "overridden": [36, 116, 118, 120, 122, 138, 139, 147, 165, 313, 889], "overview": [313, 778, 790, 889, 1262, 1288, 1292], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 172, 282, 313, 324, 679, 778, 858, 889], "overwrite_schema": [35, 313], "ow": 660, "own": [768, 1243, 1262, 1292], "p": [49, 237, 313, 578, 760, 778, 835, 889, 895, 1193, 1194, 1275], "pa": [35, 116, 149, 313, 757], "pa_tabl": 757, "pacif": [397, 975], "pack": [234, 313], "packag": [131, 313, 317, 396, 706, 893, 974], "pad": [649, 650, 675, 1200, 1201, 1226], "pad_end": [650, 1201], "pad_start": [649, 675, 1200, 1226], "page": [41, 45, 135, 141, 146, 148, 313, 778, 790, 889, 1262, 1288], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 242, 313, 838, 889, 1292], "pairwis": [181, 313], "panda": [34, 117, 121, 126, 151, 195, 204, 272, 278, 280, 313, 415, 416, 685, 757, 778, 813, 817, 855, 857, 889, 997, 998, 1244, 1245, 1262, 1272, 1274, 1289], "pandas_df": 1289, "pane": [36, 313], "panic": 99, "pap": 1194, "papa": 643, "papai": [643, 1194], "papaya": [643, 655, 666, 1194, 1206, 1217], "parallel": [53, 55, 125, 132, 141, 148, 204, 219, 221, 237, 252, 288, 313, 388, 499, 692, 768, 778, 790, 817, 821, 822, 843, 862, 873, 889, 967, 1082, 1251, 1262], "parallelis": [223, 299, 313, 1118, 1262], "parallelstrategi": [141, 148], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 147, 158, 159, 163, 246, 313, 889], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 175, 176, 177, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 214, 216, 217, 218, 219, 220, 222, 223, 227, 229, 230, 233, 234, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 296, 298, 299, 305, 307, 313, 322, 324, 325, 326, 327, 328, 338, 345, 346, 349, 350, 357, 358, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 396, 398, 400, 401, 406, 418, 421, 422, 423, 424, 426, 427, 435, 438, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 471, 472, 473, 477, 485, 487, 489, 494, 495, 496, 497, 499, 502, 503, 504, 505, 506, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 534, 535, 536, 542, 548, 549, 553, 555, 558, 559, 560, 561, 562, 563, 568, 569, 573, 574, 575, 578, 579, 581, 582, 584, 586, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 676, 678, 679, 680, 682, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 778, 794, 796, 797, 799, 800, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 826, 827, 831, 832, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 870, 872, 873, 879, 881, 889, 893, 894, 895, 899, 901, 902, 903, 904, 913, 920, 921, 924, 925, 932, 933, 937, 938, 940, 941, 942, 943, 945, 946, 947, 955, 956, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 976, 978, 979, 984, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1017, 1020, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1048, 1049, 1050, 1052, 1053, 1054, 1066, 1069, 1072, 1077, 1078, 1079, 1080, 1082, 1085, 1086, 1087, 1088, 1089, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1118, 1130, 1134, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1172, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1226, 1227, 1230, 1234, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1247, 1248, 1251, 1252, 1253, 1262, 1271, 1272, 1273, 1274, 1275, 1277, 1281, 1284, 1289], "parameteris": 131, "parametr": 790, "paramount": [827, 889], "parent": [36, 197, 313], "parenthes": 18, "parquet": [41, 45, 141, 142, 148, 313, 790, 889], "parquetcompress": [41, 313], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 141, 143, 146, 147, 148, 175, 203, 251, 252, 256, 259, 276, 287, 288, 292, 313, 373, 378, 473, 574, 588, 589, 627, 645, 653, 669, 670, 679, 687, 697, 699, 704, 707, 708, 709, 717, 730, 742, 744, 747, 756, 758, 760, 762, 768, 778, 794, 816, 842, 843, 846, 849, 854, 861, 862, 866, 889, 956, 1054, 1145, 1146, 1169, 1196, 1220, 1221, 1262, 1271], "parseerror": [670, 1221], "parser": [129, 134], "part": [116, 134, 173, 270, 275, 313, 574, 639, 657, 658, 778, 809, 836, 847, 863, 889, 899, 1190, 1208, 1209, 1285], "parti": [535, 778], "partial": [119, 129, 143, 313, 889], "particip": [36, 313], "particular": [129, 135, 137, 175, 190, 276, 313, 372, 373, 686, 687, 778, 794, 854, 889, 946, 1027, 1247, 1262], "partit": [41, 132, 133, 141, 144, 146, 148, 149, 217, 236, 313, 574, 778], "partition_bi": [41, 130, 217, 313, 574, 778], "partition_chunk_size_byt": [41, 313], "partition_col": [41, 132, 313], "partition_df": 130, "partition_num": 132, "partition_on": 132, "partition_rang": 132, "partitioned_object": [41, 313], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 146, 149, 152, 154, 157, 159, 161, 163, 175, 181, 185, 203, 204, 206, 219, 222, 236, 237, 238, 245, 251, 256, 259, 264, 272, 275, 276, 283, 287, 292, 313, 357, 373, 396, 406, 418, 421, 450, 470, 520, 535, 536, 574, 578, 588, 589, 594, 618, 627, 653, 660, 661, 662, 687, 696, 704, 706, 730, 760, 768, 774, 778, 794, 806, 816, 817, 819, 822, 827, 835, 840, 842, 846, 847, 849, 854, 861, 866, 873, 889, 893, 894, 932, 974, 984, 1003, 1035, 1049, 1072, 1103, 1118, 1145, 1146, 1169, 1204, 1211, 1212, 1213, 1234, 1244, 1262, 1275, 1289], "pass_nam": [536, 778], "pass_name_to_appli": [778, 893], "password": [129, 132, 135, 137], "past": [32, 313, 827, 889], "pat": [642, 1193], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 253, 313, 391, 548, 551, 617, 646, 778, 805, 844, 847, 889, 893, 1167, 1197, 1262, 1292], "pathlib": [31, 33, 37, 38, 41, 143, 313], "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 216, 313, 543, 631, 632, 633, 636, 638, 639, 640, 641, 642, 651, 652, 653, 659, 873, 895, 1164, 1166, 1182, 1183, 1184, 1187, 1189, 1190, 1191, 1192, 1193, 1202, 1203, 1204, 1210, 1262, 1284], "paya": 666, "pct": 159, "pct_chang": [778, 1262], "pd": [117, 121, 685, 757, 778, 1244, 1245, 1262, 1272, 1289], "pd_df": 121, "pd_frame": 757, "pd_seri": 121, "pdsh": [125, 130], "pea": 643, "peak": [247, 313, 576, 577, 778, 1135, 1136, 1262], "peak_max": [778, 1262], "peak_min": [778, 1262], "pear": [643, 655, 666, 1194, 1206, 1217], "pearson": [181, 313, 485, 624, 710, 778, 1069, 1176, 1262], "penalti": [665, 667, 668, 1216, 1218, 1219], "per": [14, 33, 36, 42, 134, 157, 159, 175, 202, 234, 235, 238, 252, 259, 276, 288, 302, 304, 305, 313, 349, 373, 499, 502, 504, 535, 536, 557, 558, 560, 562, 564, 565, 627, 687, 692, 704, 778, 794, 843, 849, 854, 862, 876, 878, 879, 889, 893, 924, 1082, 1085, 1087, 1251, 1262], "percent": [575, 778, 1134, 1262], "percentag": [156, 159, 163, 575, 778, 1134, 1262], "percentil": [183, 313, 804, 889, 969, 1262], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 139, 141, 143, 146, 147, 148, 172, 195, 203, 204, 219, 220, 223, 241, 245, 247, 248, 271, 299, 313, 457, 527, 535, 536, 574, 594, 632, 641, 647, 648, 653, 665, 667, 668, 778, 813, 817, 822, 823, 840, 849, 864, 865, 889, 1118, 1183, 1192, 1198, 1199, 1204, 1216, 1218, 1219, 1243, 1262], "perhap": [277, 313], "period": [129, 130, 143, 204, 245, 313, 422, 435, 443, 445, 446, 575, 594, 719, 720, 722, 723, 765, 766, 778, 817, 840, 889, 1004, 1017, 1028, 1030, 1031, 1134, 1262], "persist": 1277, "phase": [34, 281, 313], "philadelphia": [651, 652], "phone": [673, 1224], "physic": [46, 59, 85, 129, 130, 219, 238, 313, 685, 778, 795, 821, 822, 889, 950, 1245, 1262], "pi": [10, 390, 778, 958, 960, 1174, 1235, 1262, 1282, 1286], "pick": [160, 768], "pickl": [391, 778, 805, 889], "pip": [396, 706, 974], "pipe": [313, 778, 889], "pipelin": [134, 275, 313], "pitfal": 101, "pivot": [281, 313, 895], "pivot_long": [280, 313, 857, 889], "pivot_wid": [238, 313], "pivotagg": [238, 313], "pixel": [36, 313], "pk": [440, 778, 1023, 1262], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 778, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 894, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1267, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1292], "pl_frame": 757, "place": [10, 11, 33, 42, 186, 192, 208, 209, 238, 243, 248, 259, 285, 313, 317, 338, 350, 358, 506, 522, 626, 627, 704, 778, 849, 889, 904, 913, 925, 933, 1034, 1089, 1105, 1142, 1178, 1262], "placehold": 729, "plai": [12, 709], "plain": [809, 889], "plan": [219, 221, 313, 391, 778, 795, 799, 805, 809, 821, 822, 844, 847, 889, 1291], "plane": [702, 703], "platform": 151, "ple": 1284, "pleas": [121, 131, 132, 195, 204, 229, 313, 317, 444, 711, 724, 778, 813, 817, 831, 889, 1029, 1262], "plenti": 895, "plot": [313, 836, 847, 889, 1262], "plu": [389, 532, 778, 968, 1115, 1139, 1262, 1283], "plugin": [0, 778, 790], "plugin_path": 893, "point": [10, 11, 36, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 193, 204, 220, 221, 260, 270, 275, 281, 282, 313, 316, 317, 377, 388, 389, 394, 422, 423, 451, 456, 457, 468, 480, 481, 515, 536, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 754, 755, 778, 799, 800, 809, 811, 817, 823, 827, 838, 850, 858, 889, 951, 953, 967, 968, 972, 1004, 1005, 1036, 1040, 1050, 1098, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1241, 1246, 1262, 1267, 1289], "poison": [566, 567, 778, 1127, 1128, 1262], "pola": 313, "polar": [1, 313, 316, 317, 777, 778, 784, 790, 889, 893, 894, 895, 1262, 1266, 1267, 1288, 1289, 1291], "polars_df": 1289, "polars_file_cache_ttl": [139, 143, 146, 147], "polars_hypothesis_profil": [162, 164], "polars_max_thread": 165, "polars_seri": 1289, "polars_verbos": [799, 889], "polarsdatafram": 172, "polarsdataset": [275, 313], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 176, 223, 270, 275, 313, 374, 447, 535, 536, 588, 589, 645, 726, 738, 739, 740, 750, 753, 769, 774, 778, 796, 889, 895, 947, 1118, 1145, 1146, 1196, 1262], "polarsintegertyp": [701, 734, 735], "polarstemporaltyp": [665, 1216], "polarstyp": 55, "pool": [14, 54, 165, 166, 800, 889], "poor": 131, "pop2": [219, 313, 822, 889], "popul": [219, 313, 822, 889], "port": [34, 129, 131, 132, 135, 137, 313], "portion": 1284, "pos_a": 1284, "posit": [36, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 173, 185, 191, 203, 236, 251, 252, 256, 259, 279, 287, 288, 292, 313, 357, 443, 445, 446, 447, 520, 574, 579, 581, 618, 627, 640, 642, 651, 652, 670, 679, 702, 703, 704, 707, 708, 709, 726, 756, 760, 774, 778, 806, 810, 816, 842, 843, 846, 849, 856, 861, 862, 866, 889, 895, 932, 1028, 1030, 1031, 1103, 1137, 1139, 1169, 1191, 1221, 1262, 1290], "position": 1262, "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 203, 216, 223, 247, 278, 299, 313, 533, 536, 545, 595, 658, 691, 778, 799, 816, 849, 855, 889, 1118, 1151, 1209, 1262], "post": 47, "postgresql": [34, 131, 132, 313, 574, 778, 1287], "potenti": [101, 103, 134, 143, 146, 147, 216, 246, 248, 313, 557, 802, 804, 808, 841, 860, 889, 893], "pow": [778, 1262, 1282], "pow_n": 49, "power": [758, 1137, 1262, 1283], "powersofn": 49, "pre": [527, 536, 581, 750, 753, 769, 778, 1139, 1262], "preced": [159, 895], "precis": [10, 11, 33, 36, 42, 63, 131, 216, 247, 248, 267, 270, 275, 313, 398, 669, 889, 895, 976, 1220], "predefin": [238, 313], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 195, 214, 220, 246, 313, 453, 694, 728, 768, 778, 799, 800, 809, 813, 823, 827, 836, 838, 847, 864, 865, 889, 1038, 1164, 1166, 1262], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 799, 800, 809, 827, 836, 847, 889], "predict": [238, 241, 283, 313], "prefer": [129, 130, 133, 134, 143, 164, 175, 192, 216, 223, 246, 247, 276, 299, 313, 372, 373, 447, 536, 686, 687, 778, 794, 854, 889, 946, 1034, 1118, 1247, 1262, 1272, 1292], "prefilt": 148, "prefix": [35, 129, 130, 143, 168, 313, 324, 371, 543, 558, 561, 562, 564, 565, 659, 662, 663, 675, 778, 895, 945, 1210, 1214, 1226], "prefix_": 561, "prefix_a": 561, "prefix_b": 561, "prefix_field": [559, 563], "presenc": [727, 736, 895], "present": [119, 159, 199, 313, 477, 661, 662, 778, 847, 889], "preserv": [187, 195, 203, 218, 223, 271, 272, 313, 394, 395, 396, 415, 416, 453, 498, 588, 621, 637, 778, 807, 813, 821, 889, 972, 973, 974, 1038, 1081, 1145, 1173, 1188, 1244, 1262], "pressur": [45, 129, 130, 139, 141, 143, 147, 148, 619, 778, 889, 1170, 1262], "presum": [535, 778], "prev_pow2": 49, "prevent": [271, 313, 324, 386, 387, 557, 681, 778, 889, 965, 966, 1233, 1262], "preview": [202, 313], "previou": [49, 168, 313, 316, 396, 557, 558, 560, 562, 564, 565, 575, 678, 778, 974, 1134, 1262, 1267], "previous": [2, 3], "price": [313, 316, 1292], "primari": [134, 1289, 1292], "primarili": 1, "primit": [35, 313, 477, 778], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 188, 202, 203, 217, 221, 269, 291, 313, 470, 549, 719, 722, 778, 799, 819, 889, 895, 1059, 1240, 1262, 1292], "prior": [121, 313, 316, 1262, 1267], "prioriti": 160, "probabl": [440, 581, 778, 1023, 1139, 1262], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 247, 313, 799, 800, 889], "process_index": [270, 313], "produc": [2, 3, 159, 163, 218, 313, 346, 496, 545, 739, 821, 827, 889, 921, 1079], "product": [47, 181, 218, 313, 386, 393, 778, 821, 889, 965, 971, 1262], "profil": [162, 164, 799, 889], "programmat": [183, 313, 804, 889], "progress": [63, 65], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 626, 627, 778, 799, 800, 809, 827, 836, 838, 847, 889], "projection_pushdown": [42, 43, 44, 45, 53, 54, 799, 800, 809, 827, 836, 847, 889], "prompt": 123, "propag": [350, 442, 506, 566, 567, 569, 630, 644, 708, 709, 778, 925, 1025, 1089, 1127, 1128, 1130, 1181, 1195, 1262], "propagate_nan": 710, "proper": [220, 313, 823, 889], "properti": [36, 172, 179, 180, 188, 196, 207, 250, 255, 286, 290, 313, 316, 317, 801, 802, 808, 841, 860, 865, 889, 894, 895, 1022, 1039, 1126, 1168, 1262, 1267, 1292], "proport": [692, 778, 1251, 1262], "protocol": [35, 117, 132, 172, 313], "prototyp": 774, "provid": [34, 36, 129, 130, 132, 133, 134, 139, 141, 143, 144, 145, 146, 147, 148, 159, 163, 195, 199, 214, 260, 270, 313, 316, 367, 368, 447, 468, 527, 535, 536, 634, 635, 638, 645, 646, 661, 662, 663, 664, 730, 760, 778, 790, 799, 813, 850, 889, 941, 942, 1050, 1068, 1118, 1185, 1186, 1189, 1196, 1197, 1241, 1262, 1275, 1281, 1284, 1289, 1292], "prune": [141, 146, 148, 827, 889], "public": [132, 313, 778, 790, 889, 1262, 1288], "pulp": 1271, "pure": [36, 313, 542], "purpos": [556, 778, 799, 889], "push": [143, 146, 147, 148, 149], "pushdown": [42, 43, 44, 45, 53, 54, 799, 800, 809, 827, 836, 838, 847, 864, 865, 889, 1164, 1166, 1262], "put": [33, 42, 313, 317, 889], "pwd": 131, "py": 145, "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 265, 271, 272, 313, 757, 790, 1237, 1243, 1244, 1262, 1272, 1274, 1289], "pyarrow_opt": [41, 133, 141, 144, 313], "pyarrow_t": 1289, "pycapsul": [171, 898], "pycapsuleinterfac": [171, 898], "pydant": 151, "pyiceberg": [145, 151], "pyodbc": [34, 313], "pyodbc_uri": [34, 313], "pyspark": 165, "pytest": [152, 154], "python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 172, 216, 223, 247, 248, 267, 299, 313, 391, 396, 400, 457, 535, 536, 640, 706, 719, 720, 722, 723, 765, 766, 768, 778, 784, 805, 873, 889, 894, 974, 978, 988, 989, 990, 994, 1118, 1191, 1242, 1262, 1266, 1288], "pythondatatyp": [56, 72, 894], "pythonliter": [1119, 1120, 1121, 1122, 1164, 1262], "pytorch": [275, 313, 1246, 1262], "q": [248, 313, 760, 1262, 1267, 1275], "q1": [36, 313], "q2": [36, 313], "q3": [36, 313], "q4": [36, 313], "qcut": [389, 778, 968, 1262], "qhoo": 1292, "qmark": 131, "qqr": 895, "quad": [444, 778, 1029, 1262], "qualifi": [34, 313], "quantifi": [639, 1190], "quantil": [313, 581, 604, 605, 778, 889, 1139, 1156, 1262], "quarter": [204, 219, 245, 283, 313, 418, 422, 435, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017, 1285], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 192, 221, 237, 260, 313, 535, 536, 646, 757, 778, 799, 800, 809, 818, 826, 836, 847, 850, 864, 865, 873, 882, 889, 1034, 1118, 1197, 1262, 1271, 1272, 1274, 1278, 1288, 1290, 1291], "quick": [774, 969, 1262, 1292], "quit": [219, 313, 822, 889], "quot": [33, 34, 42, 129, 130, 132, 143, 313, 673, 889, 1224], "quote_char": [33, 42, 129, 130, 143, 313, 889], "quote_plu": 132, "quote_styl": [33, 42, 313, 889], "quotes_titl": 673, "quotient": 1283, "r": [129, 130, 143, 313, 578, 633, 637, 638, 639, 640, 651, 652, 778, 895, 1184, 1188, 1189, 1190, 1191, 1202, 1203, 1217, 1275, 1284], "r1": 55, "r2": 55, "r3": 55, "rab": [631, 654, 1182, 1205, 1280], "rad": 1286, "radian": [390, 702, 778, 1282], "radix": [670, 1221], "rai": [702, 703], "raini": [651, 652, 1202, 1203], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 143, 152, 154, 172, 199, 238, 246, 271, 313, 349, 367, 396, 421, 502, 504, 545, 579, 581, 589, 631, 634, 642, 665, 667, 668, 670, 672, 721, 738, 778, 924, 941, 974, 1003, 1085, 1087, 1137, 1139, 1146, 1182, 1185, 1193, 1216, 1218, 1219, 1221, 1223, 1243, 1262], "raise_if_empti": [129, 130, 134, 140, 143], "raise_if_undetermin": 545, "raker": 126, "ram": [42, 43, 44, 45, 889], "ran": [778, 893], "random": [36, 37, 135, 150, 157, 205, 249, 313, 466, 515, 584, 615, 620, 692, 778, 790, 1048, 1098, 1141, 1163, 1172, 1251, 1262], "randomli": 158, "rang": [17, 36, 131, 132, 183, 190, 204, 217, 313, 329, 390, 396, 404, 414, 419, 420, 422, 435, 436, 471, 701, 706, 708, 718, 719, 720, 721, 722, 723, 734, 735, 764, 765, 766, 778, 804, 817, 889, 895, 969, 974, 982, 996, 1001, 1002, 1004, 1017, 1018, 1027, 1134, 1262, 1284], "rank": [338, 499, 704, 710, 725, 778, 913, 1082, 1262], "rankmethod": [584, 778, 1141, 1262], "rare": [397, 975], "rather": [219, 313, 459, 535, 549, 581, 593, 675, 778, 822, 889, 1139, 1150, 1226, 1262], "raw": 132, "raw_output": [847, 889], "re": [199, 204, 215, 278, 280, 313, 415, 416, 424, 427, 817, 855, 857, 889, 997, 998, 1006, 1009, 1289], "reach": [649, 650, 675, 1200, 1201, 1226], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 313, 391, 459, 768, 778, 805, 889, 1034, 1262], "read_arrow_batches_from_odbc": 131, "read_clipboard": [32, 313], "read_csv": [128, 134, 143], "read_csv_batch": 125, "read_databas": 132, "read_database_uri": 131, "read_excel": 140, "read_ndjson": 138, "read_od": 134, "read_opt": 134, "read_parquet": 148, "read_tabl": 141, "readabl": 774, "reader": [41, 45, 125, 129, 130, 135, 137, 141, 313, 889], "readi": 883, "readthedoc": [36, 313], "real": [639, 1190], "realli": [388, 632, 653, 778, 967, 1183, 1204, 1262], "realloc": [139, 143, 146, 147, 192, 313, 1034, 1262], "rearrang": [223, 313], "reason": [165, 183, 313, 527, 535, 778, 804, 889], "receiv": [47, 131, 143, 223, 237, 299, 313, 536, 578, 778, 835, 889, 1292], "recent": [152, 153, 154, 155, 271, 313, 575, 589, 778, 1134, 1146, 1243, 1262, 1274, 1289], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 192, 313, 778, 954, 1034, 1044, 1124, 1262], "recognis": [15, 16, 20, 895], "recommend": [36, 165, 183, 216, 221, 237, 313, 795, 804, 889, 895], "record": [33, 38, 42, 126, 137, 149, 313, 889], "record_batch": [217, 313], "recordbatch": [116, 217, 313, 757, 1272, 1274, 1289], "recurs": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "red": [46, 84, 85, 299, 692, 778, 873, 1251, 1262], "redempt": 1271, "redshift": 132, "reduc": [45, 129, 130, 139, 141, 143, 146, 147, 148, 247, 300, 301, 303, 306, 313, 619, 715, 728, 778, 874, 875, 877, 880, 889, 1120, 1138, 1170, 1233, 1262], "reduct": [197, 313, 536, 778], "ref": [638, 640, 1189, 1191], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 184, 313, 317, 391, 424, 427, 584, 638, 651, 652, 665, 667, 668, 672, 778, 805, 889, 1006, 1009, 1141, 1202, 1203, 1216, 1218, 1219, 1223, 1262], "referenc": [36, 313, 535, 678, 778, 1272, 1289], "refin": 134, "reg": 126, "regard": [129, 710], "regardless": [121, 175, 203, 219, 276, 313, 373, 401, 646, 687, 768, 778, 794, 822, 854, 889, 979, 1197], "regex": [447, 542, 543, 631, 633, 638, 639, 640, 642, 651, 652, 676, 726, 778, 895, 1182, 1184, 1189, 1190, 1191, 1193, 1202, 1203], "regexp_lik": 1282, "region": [36, 145, 313], "regist": [1, 48, 49, 50, 51, 162, 164, 260, 313, 778, 850, 889, 893, 1271, 1272, 1274, 1275, 1276, 1277, 1289, 1291], "register_dataframe_namespac": [1, 49, 50, 51], "register_expr_namespac": [1, 48, 50, 51], "register_glob": [1273, 1275, 1277, 1289], "register_lazyframe_namespac": [1, 48, 49, 51], "register_mani": [1273, 1274, 1277], "register_plugin": 778, "register_plugin_funct": [778, 893], "register_series_namespac": [1, 48, 49, 50], "registr": [260, 313, 757, 790, 850, 889, 1277, 1289], "regrid": [471, 778], "regular": [124, 216, 246, 247, 283, 290, 313, 447, 631, 632, 633, 638, 639, 640, 641, 642, 651, 652, 653, 706, 726, 774, 778, 865, 889, 895, 1182, 1183, 1184, 1189, 1190, 1191, 1192, 1193, 1202, 1203, 1204, 1287], "reinterpret": [778, 1262], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 220, 313, 418, 443, 445, 446, 692, 778, 823, 889, 1000, 1028, 1030, 1031, 1251, 1262], "relat": [131, 168, 651, 652, 895, 1202, 1203, 1278], "releas": [54, 536, 778, 800, 889, 1292], "release_year": 1271, "relev": 55, "reliabl": [84, 85], "remain": [129, 130, 143, 187, 190, 195, 238, 313, 394, 395, 453, 498, 588, 657, 658, 778, 807, 813, 827, 889, 972, 973, 1027, 1038, 1081, 1145, 1208, 1209, 1262, 1277], "remaind": [658, 1209, 1283], "remap": 86, "remot": [129, 130, 135, 137], "remov": [4, 129, 130, 143, 172, 185, 268, 313, 447, 558, 660, 661, 662, 663, 664, 726, 778, 806, 889, 1211, 1212, 1213, 1214, 1215, 1238, 1262, 1291], "removes_pronoun": 653, "renam": [1, 119, 129, 130, 166, 203, 251, 252, 287, 288, 292, 294, 313, 324, 459, 550, 551, 557, 558, 559, 560, 562, 564, 565, 678, 679, 756, 760, 778, 816, 842, 843, 861, 862, 866, 868, 889, 901, 1193, 1230, 1239, 1262, 1289], "rename_field": [657, 658, 1208, 1209], "render": [847, 889], "render_as_str": 131, "reoconstruct": [248, 313], "repeat": [135, 146, 585, 587, 750, 769, 778], "repeat_bi": 778, "replac": [34, 35, 129, 130, 143, 193, 194, 243, 277, 280, 287, 288, 313, 316, 400, 421, 451, 535, 536, 589, 652, 653, 668, 778, 811, 857, 861, 862, 889, 978, 1003, 1036, 1146, 1164, 1166, 1203, 1204, 1219, 1262, 1267, 1282], "replace_al": [589, 651, 778, 1145, 1146, 1202, 1262], "replace_column": 313, "replace_strict": [588, 778, 1145, 1262], "replace_time_zon": [397, 403, 405, 980, 981, 1007], "replace_with": [653, 1204], "replic": [685, 778, 1245, 1262], "report": 131, "repr": 123, "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 238, 260, 261, 270, 271, 284, 291, 313, 457, 480, 481, 523, 529, 535, 629, 643, 648, 655, 666, 693, 696, 710, 712, 724, 726, 738, 739, 740, 749, 754, 755, 759, 767, 774, 778, 850, 851, 859, 889, 895, 1164, 1180, 1194, 1199, 1206, 1217, 1243, 1252, 1262, 1289], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 253, 269, 313, 399, 404, 407, 409, 410, 411, 412, 413, 414, 417, 419, 420, 423, 436, 437, 439, 548, 685, 778, 809, 825, 844, 889, 950, 977, 982, 985, 986, 987, 991, 992, 993, 995, 996, 999, 1001, 1002, 1005, 1018, 1019, 1021, 1240, 1245, 1262], "requested_schema": [171, 898], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 181, 246, 270, 271, 272, 275, 313, 363, 443, 445, 446, 528, 536, 574, 619, 665, 667, 668, 689, 753, 778, 802, 808, 849, 860, 889, 938, 1026, 1028, 1030, 1031, 1111, 1170, 1216, 1218, 1219, 1243, 1244, 1248, 1262], "require_al": 895, "rerais": [54, 800, 889], "rerun": [192, 313, 1034, 1262], "resampl": [204, 313, 817, 889], "reset": [4, 168], "reset_index": [121, 204, 313, 817, 889], "reshap": [238, 271, 313, 500, 778, 1083, 1262], "resolv": [400, 801, 802, 808, 841, 860, 889], "resourc": 893, "respect": [36, 313, 632, 641, 653, 895, 1183, 1192, 1204, 1246, 1262], "respons": [132, 230, 313, 832, 889], "rest": [673, 1224], "restor": [168, 313, 316, 1262, 1267], "restore_default": 168, "restrict": [30, 658, 1209], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 192, 195, 204, 205, 218, 219, 220, 234, 238, 245, 248, 253, 254, 256, 270, 271, 272, 283, 290, 292, 298, 313, 396, 422, 424, 427, 435, 443, 444, 445, 446, 450, 457, 466, 473, 485, 526, 527, 535, 536, 548, 574, 579, 581, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 617, 618, 637, 656, 657, 668, 688, 692, 714, 715, 719, 721, 722, 723, 724, 738, 739, 750, 753, 754, 755, 757, 769, 778, 795, 799, 804, 813, 817, 821, 822, 823, 827, 836, 840, 844, 845, 846, 865, 866, 872, 883, 884, 889, 895, 904, 1004, 1006, 1009, 1017, 1028, 1030, 1031, 1034, 1035, 1048, 1054, 1069, 1109, 1118, 1137, 1139, 1145, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1167, 1169, 1188, 1207, 1208, 1219, 1243, 1244, 1251, 1262, 1272, 1278, 1289, 1290, 1292], "resultset": 131, "retri": [139, 141, 143, 146, 147, 148], "retriev": [199, 270, 313, 343, 344, 492, 493, 676, 749, 918, 919, 1075, 1076, 1227, 1241, 1262, 1278], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 165, 166, 170, 173, 175, 177, 180, 181, 182, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 221, 222, 223, 225, 227, 232, 233, 234, 236, 237, 238, 242, 245, 246, 247, 248, 249, 253, 260, 263, 264, 270, 271, 272, 275, 276, 277, 278, 283, 286, 287, 288, 294, 296, 298, 299, 302, 307, 313, 325, 327, 330, 331, 332, 333, 334, 335, 338, 339, 343, 344, 345, 347, 349, 350, 361, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 389, 390, 396, 397, 399, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 444, 449, 457, 460, 461, 463, 467, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 489, 492, 493, 495, 500, 502, 504, 505, 506, 508, 515, 525, 526, 533, 535, 536, 546, 548, 549, 554, 578, 581, 583, 587, 588, 589, 590, 592, 593, 615, 616, 621, 622, 623, 630, 631, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 666, 670, 675, 682, 683, 684, 686, 687, 688, 690, 691, 692, 695, 696, 701, 702, 703, 704, 705, 706, 711, 713, 718, 719, 720, 721, 722, 723, 724, 727, 730, 732, 734, 735, 736, 737, 738, 739, 740, 750, 753, 756, 757, 760, 763, 764, 765, 766, 768, 769, 778, 794, 797, 799, 800, 802, 803, 804, 808, 809, 815, 817, 818, 821, 825, 826, 827, 835, 836, 838, 840, 844, 847, 853, 854, 855, 860, 861, 862, 868, 870, 872, 876, 881, 883, 889, 893, 894, 895, 897, 899, 902, 903, 904, 911, 912, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 936, 938, 940, 941, 942, 944, 946, 949, 951, 955, 961, 962, 968, 969, 974, 975, 977, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1027, 1029, 1033, 1034, 1042, 1049, 1050, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1083, 1085, 1087, 1088, 1089, 1091, 1098, 1108, 1109, 1116, 1118, 1123, 1132, 1139, 1145, 1146, 1147, 1148, 1149, 1150, 1163, 1165, 1173, 1181, 1182, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1217, 1221, 1226, 1234, 1237, 1244, 1247, 1249, 1250, 1251, 1253, 1262, 1271, 1272, 1276, 1278, 1279, 1280, 1281, 1283, 1284, 1287, 1289, 1290, 1291, 1292], "return_as_str": [202, 313, 549], "return_dtyp": [36, 223, 313, 535, 536, 588, 589, 695, 739, 740, 778, 1118, 1145, 1146, 1262], "return_typ": [270, 275, 313], "returns_scalar": [535, 536, 740, 778, 893], "reus": [53, 54, 799, 800, 809, 836, 847, 889], "rev": [220, 313, 823, 889], "revers": [175, 190, 276, 313, 373, 383, 384, 385, 386, 387, 558, 560, 562, 687, 713, 778, 794, 854, 889, 962, 963, 964, 965, 966, 1262, 1280, 1282], "reverse_": 560, "reverse_a": 560, "reverse_b": 560, "revert": [7, 9, 10], "rhap": 641, "rhapsodi": 641, "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 204, 218, 219, 245, 282, 313, 389, 443, 444, 445, 446, 473, 516, 517, 518, 519, 581, 594, 597, 599, 601, 603, 605, 608, 610, 612, 616, 624, 707, 719, 720, 722, 723, 765, 766, 778, 817, 821, 822, 840, 858, 889, 968, 1028, 1029, 1030, 1031, 1054, 1099, 1100, 1101, 1102, 1139, 1165, 1176, 1262, 1278, 1282], "right_on": [218, 219, 282, 313, 821, 822, 858, 889], "rightmost": [616, 778, 1165, 1262, 1284], "rld": [660, 662, 1213], "rle": [593, 778, 1150, 1262], "rle_id": [592, 778, 1262], "rle_id_a": [593, 778], "rle_id_ab": [593, 778], "rn": [129, 130, 143], "role": 132, "roll": [204, 313, 396, 415, 416, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 708, 754, 755, 778, 817, 889, 974, 997, 998, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1262], "rollback": [416, 998], "rolled_forward": 396, "rollforward": [415, 997], "rolling_map": [778, 1262], "rolling_max": [778, 1262], "rolling_max_bi": 778, "rolling_mean": [778, 1262], "rolling_mean_bi": 778, "rolling_median": [778, 1262], "rolling_median_bi": 778, "rolling_min": [778, 1262], "rolling_min_bi": 778, "rolling_quantil": [778, 1262], "rolling_quantile_bi": 778, "rolling_row_max": [597, 778], "rolling_row_mean": [599, 778], "rolling_row_median": [601, 778], "rolling_row_min": [603, 778], "rolling_row_quantil": [605, 778], "rolling_row_std": [608, 778], "rolling_row_sum": [610, 778], "rolling_row_var": [612, 778], "rolling_skew": [778, 1262], "rolling_std": [778, 1262], "rolling_std_bi": 778, "rolling_sum": [595, 778, 1151, 1262], "rolling_sum_bi": 778, "rolling_var": [778, 1262], "rolling_var_bi": 778, "rollinggroupbi": [245, 313], "rollinginterpolationmethod": [183, 240, 305, 313, 582, 604, 605, 751, 778, 804, 837, 879, 889, 969, 1140, 1156, 1262], "ronaldo": [638, 1189], "root": [133, 144, 376, 547, 557, 558, 560, 562, 564, 565, 628, 777, 778, 952, 1179, 1262, 1283], "round": [20, 36, 49, 123, 131, 313, 377, 381, 456, 614, 683, 778, 953, 1040, 1162, 1262, 1282], "round_sig_fig": [778, 1262], "round_str": 1004, "round_td": 1004, "rounded_corn": 20, "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 173, 175, 177, 187, 192, 195, 197, 198, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 229, 234, 238, 245, 248, 249, 258, 264, 267, 269, 270, 275, 276, 278, 280, 281, 282, 289, 290, 294, 296, 298, 299, 307, 313, 317, 338, 339, 347, 362, 373, 449, 457, 461, 467, 489, 500, 527, 574, 575, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 625, 627, 637, 645, 682, 687, 701, 704, 709, 711, 728, 732, 734, 735, 737, 752, 754, 755, 763, 768, 778, 794, 797, 799, 807, 813, 814, 815, 817, 818, 821, 822, 823, 824, 826, 827, 831, 848, 853, 854, 855, 857, 858, 864, 865, 868, 870, 872, 873, 881, 889, 899, 913, 922, 1033, 1034, 1042, 1049, 1072, 1083, 1134, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1177, 1188, 1196, 1234, 1262, 1271, 1278, 1280, 1290, 1292], "row_group": [141, 148], "row_group_s": [41, 45, 313, 889], "row_height": [36, 313], "row_index": [36, 313], "row_index_nam": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_nr": [289, 313, 864, 889], "row_tot": [36, 313], "rowname_col": [313, 317], "rows_by_kei": [216, 247, 313], "rowserror": [246, 313], "rowtotalsdefinit": [36, 313], "rpc": 131, "rstrip": 558, "rtol": [152, 153, 154, 155], "rtrim": 1282, "ru": 1284, "rule": [129, 141, 143, 148, 197, 313, 632, 653, 668, 1183, 1204, 1219], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 203, 221, 223, 252, 278, 288, 299, 313, 388, 499, 535, 536, 592, 593, 648, 756, 778, 799, 800, 809, 816, 827, 831, 836, 843, 847, 855, 862, 889, 895, 967, 1082, 1118, 1149, 1150, 1199, 1262, 1289, 1292], "runtimeerror": [271, 313, 1243, 1262], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 223, 299, 313, 640, 889, 893, 1118, 1191, 1262], "s1": [46, 84, 85, 154, 155, 197, 313, 937, 1025, 1026, 1044, 1068, 1077, 1110, 1130, 1142, 1253, 1262], "s2": [1, 46, 84, 85, 154, 155, 197, 313, 937, 954, 971, 1025, 1026, 1044, 1059, 1068, 1077, 1110, 1124, 1130, 1142, 1253, 1262], "s3": [1, 35, 133, 144, 145, 148, 149, 313, 937, 1110, 1262], "s_bar": 1280, "s_dt": [1284, 1285], "s_dt1": 1284, "s_dt2": 1284, "s_foo": 1280, "s_from_str_repr": [1240, 1262], "s_head_5": 643, "s_head_n": 643, "s_tail_5": 666, "s_tail_n": 666, "s_tm": [1284, 1285], "safe": [586, 778, 1143, 1262], "sam": 12, "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 195, 203, 223, 238, 247, 248, 259, 278, 287, 288, 292, 299, 313, 321, 328, 361, 394, 395, 453, 457, 459, 460, 463, 526, 540, 544, 574, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 620, 627, 637, 647, 678, 774, 778, 799, 800, 813, 816, 825, 827, 849, 855, 861, 862, 866, 889, 895, 900, 936, 972, 973, 978, 1109, 1118, 1145, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1188, 1198, 1253, 1262, 1276, 1278, 1285], "samoa": [397, 975], "sampl": [129, 130, 299, 313, 620, 624, 778, 873, 1176, 1262, 1279], "sample_s": [129, 130], "sampled_from": 1292, "sandwich": [200, 313], "sat": [313, 316], "satisfi": [473, 778, 1054, 1262], "saturdai": [204, 313, 817, 889], "save": [2, 3, 6, 204, 219, 245, 283, 313, 397, 405, 418, 422, 435, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 724, 765, 766, 774, 778, 790, 817, 822, 840, 889, 983, 1000, 1004, 1017], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [173, 214, 223, 246, 313, 535, 616, 643, 648, 655, 666, 738, 740, 778, 893, 899, 1068, 1165, 1194, 1199, 1206, 1217, 1262], "scale": [28, 63, 190, 313, 370, 536, 578, 669, 778, 895, 1027, 1220, 1262], "scale_negative_even": [578, 778], "scan": [119, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 313, 645, 818, 826, 889, 1196], "scan_csv": [42, 43, 44, 45, 129, 130, 889], "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "scatter": [313, 316, 1262], "scenario": 1262, "schedul": [54, 800, 889], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 177, 178, 179, 185, 188, 190, 217, 221, 223, 230, 234, 271, 275, 313, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 403, 526, 527, 536, 545, 559, 561, 563, 645, 695, 760, 778, 790, 797, 798, 801, 802, 806, 808, 827, 832, 860, 873, 889, 895, 957, 1196, 1262, 1271], "schema_mod": [35, 313], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 217, 271, 313, 889, 895], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 313, 889], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 146, 148, 313, 760, 827, 873, 889], "schindler": 1271, "scientif": [11, 33, 42, 313, 889], "scikit": [275, 313], "scipi": [485, 624, 778, 1069, 1176, 1262], "scope": [168, 789, 895, 1274, 1277, 1289], "score": [36, 238, 313], "script": [313, 316, 1262, 1267], "scroll": [36, 313], "sdiff": 518, "search": [219, 313, 527, 632, 641, 653, 822, 849, 889, 1183, 1192, 1204], "search_sort": [778, 1262], "searchsortedsid": [616, 778, 1165, 1262], "searchstrategi": [156, 158, 159, 160, 161, 163], "season": [651, 652], "sec": [1285, 1292], "second": [33, 42, 139, 143, 146, 147, 152, 153, 154, 155, 204, 219, 245, 283, 313, 407, 410, 412, 413, 417, 418, 422, 434, 435, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 651, 652, 665, 668, 721, 722, 723, 724, 764, 765, 766, 768, 778, 817, 822, 840, 889, 895, 1000, 1004, 1016, 1017, 1029, 1202, 1203, 1216, 1219, 1262, 1284, 1285, 1290, 1292], "second_part": [657, 658, 1208, 1209], "seconds_diff": 434, "secret": [145, 148], "section": [238, 313, 631, 638, 639, 642, 651, 652, 719, 720, 722, 723, 765, 766, 1182, 1189, 1190, 1193, 1202, 1203], "secur": [391, 778, 805, 889], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 159, 163, 170, 181, 195, 204, 218, 237, 238, 313, 317, 378, 452, 485, 535, 624, 631, 638, 639, 642, 643, 651, 652, 666, 719, 720, 722, 723, 752, 765, 766, 774, 778, 799, 800, 813, 817, 889, 893, 895, 897, 950, 956, 1069, 1176, 1182, 1189, 1190, 1193, 1194, 1202, 1203, 1217, 1262, 1292], "seed": [150, 205, 249, 313, 466, 515, 584, 615, 620, 778, 1048, 1098, 1141, 1163, 1172, 1262], "seed_1": [205, 313, 466, 778, 1048, 1262], "seed_2": [205, 313, 466, 778, 1048, 1262], "seed_3": [205, 313, 466, 778, 1048, 1262], "seen": [365, 458, 778], "seen_group": 130, "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 173, 174, 214, 215, 219, 223, 234, 237, 246, 252, 258, 260, 273, 279, 283, 290, 313, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 352, 353, 354, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 388, 390, 392, 393, 394, 395, 398, 400, 401, 409, 415, 416, 418, 421, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 443, 445, 446, 447, 448, 449, 450, 454, 456, 458, 461, 465, 466, 467, 468, 469, 470, 471, 474, 475, 478, 484, 485, 486, 488, 489, 499, 500, 527, 530, 531, 532, 533, 535, 536, 537, 538, 539, 542, 552, 554, 556, 557, 559, 561, 563, 566, 567, 571, 572, 573, 574, 576, 577, 580, 582, 583, 584, 585, 586, 587, 590, 591, 592, 595, 606, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 637, 638, 639, 640, 641, 642, 644, 665, 676, 678, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 696, 698, 700, 703, 704, 705, 708, 710, 711, 712, 713, 716, 723, 724, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 741, 743, 745, 746, 748, 749, 752, 753, 757, 758, 759, 760, 761, 763, 767, 774, 778, 793, 799, 802, 822, 835, 843, 848, 850, 856, 863, 865, 889, 895, 899, 1003, 1041, 1082, 1164, 1166, 1177, 1197, 1216, 1262, 1271, 1272, 1273, 1274, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291], "select_from": [158, 161, 163], "select_seq": [313, 889], "selector": [0, 36, 176, 185, 187, 191, 229, 236, 238, 259, 268, 270, 275, 278, 280, 281, 313, 317, 447, 453, 542, 778, 790, 796, 806, 807, 810, 831, 849, 855, 857, 889], "selectortyp": [36, 313, 895], "self": [1, 48, 49, 50, 51, 53, 54, 260, 291, 313, 757, 778, 799, 800, 809, 836, 847, 850, 863, 889, 904, 947, 957, 962, 1034, 1038, 1051, 1116, 1118, 1131, 1135, 1136, 1142, 1145, 1146, 1164, 1166, 1167, 1178, 1250, 1253, 1262, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289], "semi": [126, 218, 313, 821, 889, 1278], "semigraph": 20, "sens": [129, 135, 137, 230, 283, 313, 574, 778, 832, 889], "sensit": [631, 639, 642, 651, 652, 1182, 1190, 1193, 1202, 1203], "sep": 126, "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 236, 238, 268, 277, 279, 313, 347, 350, 500, 506, 536, 637, 709, 714, 715, 778, 856, 889, 922, 925, 1083, 1089, 1188, 1232, 1238, 1262, 1284], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [36, 41, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 175, 183, 191, 192, 218, 219, 229, 234, 236, 237, 238, 248, 259, 268, 270, 275, 276, 280, 281, 282, 283, 313, 362, 373, 389, 460, 477, 527, 535, 578, 581, 588, 589, 627, 653, 663, 664, 678, 687, 704, 714, 715, 728, 730, 739, 740, 749, 752, 758, 778, 794, 804, 810, 821, 822, 831, 835, 849, 854, 857, 858, 889, 895, 937, 968, 969, 1034, 1110, 1139, 1145, 1146, 1204, 1230, 1262], "sequenti": [53, 54, 252, 288, 313, 799, 800, 809, 836, 843, 847, 862, 889], "ser": [980, 981, 1007], "seri": [0, 1, 11, 25, 36, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 154, 155, 159, 173, 186, 195, 197, 199, 201, 204, 205, 208, 209, 211, 213, 215, 225, 227, 232, 243, 245, 249, 263, 266, 269, 271, 273, 274, 293, 313, 328, 339, 362, 366, 375, 377, 421, 450, 453, 456, 460, 461, 470, 475, 477, 478, 480, 481, 482, 483, 494, 500, 502, 527, 533, 535, 536, 584, 585, 586, 587, 588, 589, 594, 595, 606, 617, 619, 643, 653, 665, 666, 667, 668, 672, 676, 686, 691, 701, 705, 714, 715, 719, 720, 722, 723, 728, 730, 734, 735, 738, 739, 740, 750, 752, 753, 756, 757, 760, 765, 766, 769, 778, 790, 813, 817, 840, 867, 889, 893, 1254, 1256, 1258, 1261, 1263, 1266, 1267, 1268, 1269, 1270, 1272, 1274, 1289, 1292], "serial": [39, 40, 184, 313, 391, 551, 778, 805, 889], "serializ": [778, 893], "serializationformat": [184, 253, 313, 391, 548, 778, 805, 844, 889], "seriesplot": [1262, 1267], "server": [34, 131, 132, 313], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "session": 131, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 172, 180, 187, 196, 199, 203, 205, 216, 219, 227, 229, 247, 249, 251, 253, 258, 263, 268, 270, 271, 275, 277, 278, 280, 281, 282, 287, 313, 325, 327, 349, 350, 362, 378, 389, 421, 438, 466, 477, 502, 504, 506, 515, 516, 517, 518, 519, 521, 527, 535, 536, 542, 548, 578, 581, 588, 589, 595, 596, 598, 600, 602, 604, 607, 609, 611, 615, 620, 624, 625, 630, 644, 645, 651, 652, 655, 660, 661, 662, 663, 664, 665, 667, 668, 672, 692, 696, 698, 701, 705, 709, 719, 720, 721, 722, 723, 724, 734, 735, 738, 750, 753, 754, 755, 760, 765, 766, 768, 769, 778, 790, 799, 800, 807, 809, 816, 821, 822, 827, 831, 842, 844, 848, 855, 857, 858, 861, 873, 889, 893, 902, 903, 924, 925, 937, 941, 956, 968, 1003, 1020, 1039, 1048, 1059, 1066, 1085, 1087, 1089, 1098, 1099, 1100, 1101, 1102, 1104, 1110, 1118, 1139, 1145, 1146, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1163, 1164, 1165, 1172, 1176, 1177, 1181, 1195, 1196, 1202, 1203, 1206, 1211, 1212, 1213, 1216, 1218, 1219, 1223, 1243, 1251, 1262, 1288, 1292], "set_": 168, "set_ascii_t": 168, "set_auto_structifi": [251, 287, 313, 842, 861, 889], "set_decimal_separ": 27, "set_environ": 162, "set_except": [54, 800, 889], "set_fmt_float": 30, "set_fmt_str_length": [632, 641, 653, 1183, 1204], "set_index": [204, 313, 817, 889], "set_legend": [36, 313], "set_sort": [245, 283, 313, 594, 778, 840, 889, 1262], "set_stat": 30, "set_streaming_chunk_s": [799, 889], "set_styl": [36, 313], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 47, "set_tbl_row": 168, "set_tbl_width_char": 653, "set_thousands_separ": 9, "set_titl": [36, 313], "set_verbos": 168, "setosa": [313, 316], "setup": 1292, "sever": [116, 118, 119, 120, 122, 138, 139, 147, 313, 889, 1292], "sfu": 132, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 249, 251, 253, 256, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 552, 553, 554, 555, 556, 557, 558, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 778, 793, 794, 796, 797, 799, 800, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 895, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 952, 953, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1123, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1169, 1170, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1232, 1234, 1235, 1236, 1238, 1239, 1240, 1245, 1247, 1248, 1249, 1250, 1251, 1253, 1262, 1271, 1272, 1273, 1274, 1276, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1290], "share": [152, 153, 154, 155, 190, 313, 1027, 1262], "shawshank": 1271, "sheet": [36, 134, 140, 313], "sheet1": [36, 313], "sheet_id": [134, 140], "sheet_nam": [134, 140], "sheet_zoom": [36, 313], "sheetnam": [134, 140], "shift": [204, 313, 365, 392, 458, 497, 575, 708, 778, 817, 889, 970, 1080, 1134, 1262], "short": [152, 154], "shorten": [152, 154], "shorter": [129, 130, 143, 527, 734, 735], "shorthand": [313, 316, 1262, 1267], "should": [10, 34, 36, 41, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 185, 216, 219, 223, 246, 247, 248, 259, 267, 268, 279, 299, 313, 323, 388, 391, 438, 444, 447, 480, 481, 499, 536, 548, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 616, 624, 627, 692, 704, 724, 726, 738, 740, 754, 755, 768, 774, 778, 799, 805, 806, 821, 822, 827, 844, 849, 856, 889, 895, 967, 1020, 1029, 1082, 1118, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1165, 1176, 1251, 1262, 1272], "show": [30, 36, 183, 187, 202, 221, 235, 313, 468, 778, 804, 807, 836, 847, 889, 1050, 1262, 1276, 1288], "show_graph": [221, 313, 889], "show_plot": [836, 889], "shrink": [257, 313, 619, 778, 1170, 1171, 1262], "shrink_dtyp": [778, 1262], "shrink_to_fit": [313, 1262], "shuffl": [150, 249, 275, 299, 313, 515, 615, 778, 873, 1098, 1163, 1262], "side": [36, 204, 245, 313, 473, 516, 517, 518, 519, 594, 597, 599, 601, 603, 605, 608, 610, 612, 616, 719, 720, 722, 723, 765, 766, 778, 817, 840, 889, 893, 1054, 1099, 1100, 1101, 1102, 1165, 1262], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 418, 586, 651, 652, 675, 778, 895, 1000, 1143, 1202, 1203, 1226, 1262, 1282], "sign_x": 1283, "signed_integ": 895, "signific": [148, 216, 223, 313, 536, 614, 778, 1118, 1162, 1262], "significantli": [134, 223, 299, 313, 1118, 1262, 1292], "silenc": 91, "silent": [670, 1221], "similar": [32, 41, 128, 165, 197, 219, 256, 278, 280, 313, 357, 424, 427, 520, 574, 618, 679, 737, 768, 778, 822, 846, 855, 857, 889, 932, 1006, 1009, 1103, 1169, 1262], "similarli": [36, 119, 204, 219, 245, 283, 313, 418, 422, 435, 594, 597, 599, 601, 603, 605, 608, 610, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 1000, 1004, 1017], "simpl": [36, 234, 313], "simpler": 895, "simpli": [143, 714, 728], "simplifi": [42, 43, 44, 45, 53, 54, 799, 800, 809, 836, 847, 889], "simplify_express": [42, 43, 44, 45, 53, 54, 799, 800, 809, 836, 847, 889], "sin": [778, 1262, 1282], "sinc": [35, 61, 62, 77, 131, 133, 139, 143, 144, 146, 147, 156, 157, 158, 159, 163, 166, 174, 229, 271, 289, 294, 313, 403, 406, 438, 459, 535, 551, 588, 630, 637, 694, 703, 730, 778, 793, 809, 831, 849, 863, 864, 868, 889, 981, 984, 989, 990, 1020, 1047, 1145, 1181, 1188, 1243, 1262], "sind": 1282, "sine": [332, 333, 535, 622, 623, 778, 907, 908, 1174, 1175, 1262, 1286], "singl": [36, 41, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 146, 157, 176, 185, 186, 187, 192, 199, 205, 214, 223, 236, 246, 248, 259, 270, 271, 313, 346, 378, 396, 418, 460, 463, 466, 496, 502, 535, 536, 585, 588, 590, 592, 627, 630, 643, 644, 648, 655, 666, 694, 704, 708, 709, 735, 739, 740, 758, 766, 774, 778, 796, 799, 800, 806, 807, 849, 889, 895, 921, 956, 974, 1000, 1034, 1048, 1079, 1085, 1142, 1145, 1147, 1149, 1181, 1194, 1195, 1199, 1206, 1217, 1237, 1243, 1262, 1273], "singlecolselector": 173, "singleindexselector": [173, 899], "sinh": [778, 1262], "sink_csv": 889, "sink_ipc": 889, "sink_ndjson": 889, "sink_parquet": 889, "site_id": [313, 317], "six": [616, 778], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 190, 281, 313, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 701, 734, 735, 754, 755, 778, 799, 889, 1027, 1147, 1157, 1262, 1292], "sizeunit": [190, 313, 370, 944, 1027, 1262], "skew": [606, 778, 1157, 1262], "skewtest": [624, 778, 1176, 1262], "skip": [129, 130, 134, 141, 143, 148, 219, 281, 313, 822, 889, 1118, 1262, 1278], "skip_empty_lin": 134, "skip_nul": [536, 778, 1118, 1262], "skip_row": [129, 130, 143], "skip_rows_after_head": [129, 130, 143], "sklearn": [275, 313], "slice": [42, 43, 44, 45, 48, 53, 54, 190, 206, 217, 264, 313, 505, 525, 536, 545, 547, 595, 596, 598, 600, 602, 604, 607, 609, 611, 643, 666, 778, 799, 800, 809, 827, 836, 847, 889, 893, 1027, 1049, 1088, 1108, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1194, 1217, 1234, 1262, 1284], "slice_pushdown": [42, 43, 44, 45, 53, 54, 799, 800, 809, 827, 836, 847, 889], "slide": [388, 778, 967, 1262], "slightli": [42, 43, 44, 45, 87, 457, 778, 889, 1285], "slot": [388, 392, 497, 778, 967, 970, 1080, 1262], "slow": [103, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 148, 313, 388, 536, 595, 645, 778, 873, 889, 967, 1151, 1196, 1262], "slower": [120, 122, 134, 203, 223, 236, 283, 299, 313, 536, 740, 778, 816, 873, 889, 1118, 1262], "small": [11, 132, 422, 889, 1292], "smaller": [41, 45, 190, 313, 889, 1027, 1262], "smallest": [175, 276, 313, 372, 373, 687, 778, 794, 854, 889, 946, 1262, 1279, 1281], "smooth": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "snappi": [31, 41, 45, 313, 889], "snippet": [807, 889], "snowflak": [131, 132], "snowi": [651, 652], "so": [1, 36, 132, 143, 165, 202, 204, 238, 245, 313, 339, 349, 391, 457, 473, 504, 527, 536, 594, 651, 652, 653, 660, 661, 662, 676, 778, 805, 817, 840, 889, 895, 924, 1087, 1202, 1203, 1204, 1211, 1212, 1213], "softwar": [32, 128, 313], "solut": [34, 313], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 143, 172, 187, 238, 248, 271, 313, 317, 774, 807, 889, 1059, 1262, 1292], "some_account": [639, 1190], "some_t": 1291, "someth": [535, 778], "sometim": [724, 777], "somewher": [639, 1190], "sort": [47, 48, 175, 204, 219, 230, 237, 238, 245, 254, 276, 283, 296, 307, 313, 338, 372, 373, 444, 453, 536, 574, 594, 617, 627, 686, 687, 692, 694, 704, 719, 722, 740, 778, 794, 809, 817, 822, 832, 835, 836, 840, 845, 847, 854, 870, 881, 889, 895, 913, 946, 1029, 1066, 1167, 1247, 1248, 1251, 1262, 1278, 1290, 1292], "sort_bi": [574, 778], "sort_column": [238, 313], "sorted_asc": [1039, 1262], "sorted_desc": [1039, 1262], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 778, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 889, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1267, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1289], "source_ac": 123, "source_actor_id": 123, "source_alia": [35, 313], "source_cha": 123, "source_channel_id": 123, "space": [20, 204, 313, 817, 889, 895], "spam": [226, 313, 639, 1190], "span": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "spanner": [313, 317], "spark": [41, 313], "sparklin": [36, 313], "speak": [624, 778, 1176, 1262], "spearman": 710, "speci": [313, 316], "special": [34, 129, 130, 132, 143, 275, 290, 313, 595, 639, 651, 652, 778, 865, 889, 1118, 1151, 1190, 1202, 1203, 1262], "specif": [1, 30, 35, 36, 37, 38, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 147, 176, 216, 218, 265, 270, 313, 424, 427, 665, 667, 668, 672, 692, 778, 796, 821, 889, 894, 895, 1006, 1009, 1216, 1218, 1219, 1223, 1237, 1241, 1251, 1262, 1278, 1289, 1292], "specifi": [33, 35, 36, 41, 42, 47, 88, 91, 94, 109, 112, 129, 134, 140, 143, 160, 175, 176, 190, 191, 194, 199, 203, 204, 218, 236, 238, 245, 246, 248, 251, 252, 256, 259, 270, 276, 279, 287, 288, 292, 313, 373, 378, 443, 445, 446, 447, 452, 574, 587, 589, 596, 598, 600, 602, 604, 607, 609, 611, 618, 627, 679, 687, 704, 707, 708, 709, 719, 720, 722, 723, 724, 726, 756, 760, 765, 766, 774, 778, 794, 796, 810, 812, 816, 817, 821, 840, 842, 843, 846, 849, 854, 856, 861, 862, 866, 889, 895, 956, 1027, 1028, 1030, 1031, 1037, 1146, 1169, 1241, 1262, 1278, 1291], "speed": [45, 254, 313, 536, 778, 845, 889, 1292], "speedup": [47, 148, 216, 223, 313, 536, 778, 1118, 1262], "split": [1, 36, 41, 48, 217, 313, 637, 657, 658, 1188, 1208, 1209], "split_by_column_dtyp": 50, "split_inclus": 656, "splitfram": [1, 48], "spreadsheet": [32, 128, 134, 140, 238, 313], "spring": [651, 652], "sql": [0, 34, 106, 107, 115, 131, 132, 218, 256, 313, 357, 520, 618, 737, 758, 778, 790, 846, 889, 932, 1103, 1169, 1262, 1271, 1272, 1274, 1276, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1290, 1291], "sql_expr": 1289, "sqlalchemi": [34, 131, 151, 313], "sqlcontext": [260, 313, 757, 850, 889, 1288], "sqlite": [34, 131, 313], "sqrt": [536, 624, 679, 778, 1118, 1176, 1262, 1282], "sqrt_x": 1283, "squar": [1, 51, 299, 485, 590, 628, 778, 873, 1069, 1147, 1179, 1262, 1283], "st": 1292, "stabil": [205, 313, 466, 778, 1048, 1262], "stabl": [141, 170, 181, 183, 184, 205, 249, 253, 260, 313, 391, 466, 532, 548, 778, 804, 805, 831, 844, 849, 850, 889, 897, 1048, 1262], "stack": [55, 208, 285, 313, 1272], "stai": [535, 620, 778], "standalon": [157, 895], "standard": [10, 36, 261, 270, 275, 313, 409, 445, 607, 608, 624, 629, 646, 759, 774, 778, 851, 889, 987, 1025, 1030, 1130, 1176, 1180, 1197, 1262, 1279, 1292], "standardis": [36, 313], "start": [36, 127, 129, 130, 132, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 165, 198, 203, 204, 221, 258, 283, 289, 290, 313, 366, 369, 371, 396, 404, 414, 419, 422, 435, 436, 447, 461, 503, 521, 593, 597, 599, 601, 603, 605, 608, 610, 612, 625, 631, 636, 639, 650, 655, 659, 660, 662, 663, 666, 675, 701, 706, 714, 718, 719, 720, 721, 722, 723, 726, 728, 734, 735, 765, 766, 768, 774, 778, 815, 816, 817, 836, 848, 864, 865, 889, 895, 945, 974, 976, 979, 982, 984, 985, 991, 993, 995, 996, 999, 1001, 1004, 1008, 1017, 1018, 1042, 1086, 1104, 1150, 1177, 1187, 1190, 1201, 1206, 1210, 1211, 1213, 1217, 1226, 1262, 1278, 1284, 1292], "start_bi": [204, 313, 817, 889], "startbi": [204, 313, 817, 889], "starts_a": 1284, "starts_with": [48, 238, 313, 317, 366, 369, 542, 631, 636, 757, 850, 889, 895, 1187, 1282], "starts_with_expr": 371, "starts_with_lit": 371, "startup": [270, 313], "stat": [485, 624, 778, 1069, 1176, 1262], "state": [4, 5, 99, 714, 790, 809, 836, 847, 889, 1289], "statement": [768, 1276, 1290], "static": [82, 873], "statist": [41, 45, 129, 130, 141, 146, 148, 183, 313, 445, 446, 485, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 624, 778, 804, 889, 969, 1030, 1031, 1069, 1157, 1176, 1262], "std": [183, 313, 607, 608, 778, 804, 889, 969, 1158, 1262], "std_dev": [36, 313], "stddev": 1282, "stddev_samp": 1279, "stdev": [36, 313, 1279], "stdev_samp": 1279, "stdout": [168, 202, 313, 549], "step": [281, 313, 457, 701, 734, 735, 778], "steve": [230, 313, 832, 889], "still": [131, 132], "stock": [313, 316], "stop": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 597, 599, 601, 603, 605, 608, 610, 612, 778, 976, 979, 984, 985, 991, 993, 995, 999, 1004, 1008], "storag": [35, 129, 133, 135, 137, 144, 145, 313], "storage_opt": [35, 129, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 313], "store": [35, 129, 145, 192, 216, 247, 313, 375, 592, 778, 948, 1034, 1149, 1262], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 175, 176, 180, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 197, 199, 200, 202, 203, 204, 206, 208, 211, 213, 214, 216, 218, 219, 220, 222, 224, 226, 228, 229, 230, 231, 233, 234, 236, 238, 240, 242, 243, 244, 245, 246, 247, 249, 253, 254, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 322, 323, 324, 345, 350, 362, 366, 367, 368, 369, 371, 373, 375, 383, 389, 391, 393, 401, 418, 421, 422, 424, 427, 435, 444, 447, 453, 455, 459, 460, 463, 470, 473, 494, 495, 504, 505, 506, 521, 525, 527, 536, 545, 547, 548, 549, 551, 558, 559, 560, 561, 562, 563, 564, 565, 571, 574, 578, 581, 587, 588, 589, 591, 593, 594, 597, 599, 601, 603, 605, 608, 610, 612, 619, 626, 627, 676, 677, 678, 687, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 708, 709, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 774, 778, 785, 794, 796, 799, 800, 802, 804, 805, 806, 807, 809, 810, 813, 816, 817, 819, 821, 822, 823, 831, 832, 835, 836, 838, 839, 840, 844, 845, 847, 848, 849, 850, 854, 855, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 893, 894, 895, 901, 920, 925, 937, 942, 947, 948, 968, 969, 979, 1000, 1003, 1004, 1006, 1009, 1017, 1029, 1037, 1039, 1077, 1078, 1089, 1110, 1126, 1127, 1128, 1139, 1144, 1145, 1146, 1166, 1227, 1229, 1230, 1238, 1239, 1240, 1241, 1251, 1262, 1268, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1284, 1285, 1289, 1290, 1292], "str_date": 1284, "str_timestamp": 1284, "strategi": [33, 42, 47, 55, 129, 148, 156, 157, 158, 159, 160, 161, 163, 194, 204, 218, 219, 233, 282, 313, 452, 527, 536, 778, 812, 817, 821, 822, 858, 889, 1037, 1110, 1262], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 203, 218, 278, 313, 535, 778, 799, 800, 809, 816, 821, 827, 831, 836, 847, 849, 855, 889], "streamabl": [827, 831, 857, 889], "strftime": [87, 427, 1009, 1282, 1284], "strict": [118, 119, 122, 126, 176, 185, 313, 367, 374, 631, 634, 642, 665, 667, 668, 670, 672, 778, 796, 806, 889, 895, 941, 947, 1182, 1185, 1193, 1216, 1218, 1219, 1221, 1223, 1262], "strictli": [33, 42, 46, 85, 313, 889], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 175, 176, 179, 184, 188, 190, 197, 199, 202, 203, 204, 219, 236, 238, 245, 248, 250, 251, 252, 253, 259, 269, 270, 276, 277, 281, 283, 287, 288, 292, 313, 322, 345, 350, 367, 368, 369, 373, 391, 418, 422, 424, 427, 435, 444, 447, 455, 459, 473, 506, 548, 549, 574, 578, 588, 589, 594, 597, 599, 601, 603, 605, 608, 610, 612, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 687, 695, 697, 699, 704, 707, 708, 709, 717, 719, 720, 722, 723, 729, 742, 744, 747, 756, 760, 762, 765, 766, 768, 774, 778, 790, 794, 796, 801, 805, 808, 809, 816, 817, 822, 840, 841, 842, 843, 844, 849, 854, 861, 862, 866, 889, 894, 895, 925, 941, 942, 943, 949, 1000, 1004, 1006, 1009, 1017, 1029, 1054, 1089, 1145, 1146, 1181, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1229, 1240, 1241, 1262, 1271, 1272, 1280, 1282, 1285, 1288, 1292], "stringcach": [84, 85, 218, 313, 790, 949, 950], "stringio": [138, 139, 459, 778], "strings_hex": 635, "strip": [28, 660, 661, 662, 663, 664, 1211, 1212, 1213, 1284], "strip_chars_end": [662, 664], "strip_chars_start": [661, 663], "strip_prefix": [662, 664], "strip_suffix": [661, 663], "strongli": [36, 165, 223, 246, 299, 313, 536, 778, 1118, 1262], "strpo": 1282, "strpost": 1284, "strptime": [245, 313, 421, 594, 778, 840, 889, 1003, 1282], "struct": [8, 112, 123, 234, 251, 274, 279, 287, 313, 362, 389, 468, 527, 535, 536, 559, 561, 563, 581, 592, 593, 640, 645, 657, 658, 692, 714, 715, 717, 739, 778, 842, 856, 861, 873, 889, 937, 968, 1110, 1118, 1139, 1149, 1191, 1196, 1208, 1209, 1243, 1262], "struct_col": [676, 678], "struct_seri": 873, "structarrai": [190, 313, 1027, 1262], "structfieldnotfounderror": 678, "structur": [36, 37, 38, 93, 96, 110, 126, 192, 237, 248, 265, 271, 313, 578, 778, 835, 889, 1034, 1237, 1262, 1289], "student": [238, 313], "style": [7, 20, 36, 131, 238, 313], "sub": [299, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 364, 506, 513, 778, 918, 919, 920, 923, 924, 925, 926, 927, 928, 929, 930, 934, 935, 939, 1089, 1096], "subarrai": [341, 342, 916, 917], "subclass": [1, 313], "subexpress": [53, 54, 799, 800, 809, 836, 847, 889], "subject": [41, 238, 313], "sublist": [349, 492, 493, 495, 497, 501, 502, 503, 504, 505, 506, 507, 516, 521, 525, 527, 924, 1059, 1075, 1076, 1078, 1080, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099, 1104, 1108, 1110, 1262], "subplan": [53, 54, 799, 800, 809, 836, 847, 889], "subsequ": [36, 241, 272, 313, 527, 757, 768, 809, 889, 1244, 1262, 1277], "subset": [187, 234, 278, 313, 807, 855, 889], "substr": [366, 369, 371, 631, 636, 642, 651, 652, 655, 656, 657, 658, 659, 895, 940, 943, 945, 1182, 1187, 1193, 1202, 1203, 1206, 1207, 1208, 1209, 1210, 1282], "subtl": [36, 313], "subtli": [457, 778], "subtract": [485, 680, 778, 1069, 1262], "succe": [129, 130, 143], "success": [633, 639, 1184, 1190], "successfulli": [799, 889], "suffix": [218, 219, 220, 251, 287, 292, 313, 324, 369, 373, 480, 481, 482, 483, 541, 558, 560, 563, 564, 565, 574, 591, 636, 661, 664, 687, 778, 821, 822, 823, 842, 861, 863, 866, 889, 895, 943, 1187, 1215], "suffix_field": [559, 561], "sugar": [282, 313, 588, 589, 653, 696, 698, 700, 711, 713, 716, 726, 731, 732, 733, 741, 743, 745, 746, 748, 750, 751, 756, 759, 761, 763, 767, 769, 778, 858, 889, 1145, 1146, 1179, 1204, 1262], "suitabl": [47, 55, 131, 157, 223, 313, 536, 616, 778, 1118, 1165, 1262], "sum": [36, 190, 197, 203, 204, 214, 238, 245, 263, 292, 313, 386, 387, 391, 440, 453, 527, 536, 545, 547, 548, 549, 550, 588, 589, 594, 609, 610, 694, 696, 714, 716, 717, 728, 740, 752, 762, 778, 799, 800, 805, 809, 816, 817, 834, 836, 840, 844, 847, 866, 889, 893, 895, 965, 966, 1023, 1027, 1159, 1262, 1271, 1278, 1280, 1282, 1289], "sum_": [624, 778, 1176, 1262], "sum_a": [245, 313, 594, 778, 840, 889], "sum_horizont": [47, 313, 761], "summari": [183, 313, 804, 889, 969, 1262, 1278], "summer": [651, 652], "sun": [313, 316, 665, 1216], "sundai": [204, 313, 396, 424, 427, 437, 706, 817, 889, 974, 1006, 1009, 1019], "sunni": [651, 652, 1202, 1203], "supercast": [197, 313], "supertyp": [55, 194, 271, 275, 313, 328, 708, 778, 812, 889, 893, 1262], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 195, 246, 270, 313, 453, 578, 778, 813, 889, 1241, 1262], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 156, 160, 163, 168, 216, 217, 218, 219, 247, 248, 258, 259, 267, 272, 275, 313, 444, 521, 574, 588, 589, 625, 627, 632, 641, 643, 651, 652, 653, 655, 666, 774, 778, 784, 799, 821, 822, 848, 849, 889, 895, 1029, 1104, 1145, 1146, 1177, 1183, 1192, 1194, 1202, 1203, 1204, 1206, 1217, 1244, 1246, 1262, 1266, 1280, 1284, 1285, 1287, 1288, 1289], "supportsinterchang": 117, "suppos": [173, 238, 313, 536, 778, 1118, 1262], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 241, 313, 778, 893], "surreal": 131, "surreal_query_to_fram": 131, "surrealdb": 131, "surrealhttp": 131, "surrealql": 131, "suscept": 889, "swap": [838, 889], "swim": 709, "switch": [397, 799, 889, 975], "sy": 168, "sydnei": 721, "symbol": [32, 33, 42, 313, 778, 889], "symmetr": [518, 895, 1101], "symmetri": [802, 808, 841, 860, 889], "synchron": 884, "syntact": [282, 313, 588, 589, 653, 696, 698, 700, 711, 713, 716, 726, 731, 732, 733, 741, 743, 745, 746, 748, 750, 751, 756, 759, 761, 763, 767, 769, 778, 858, 889, 1145, 1146, 1179, 1204, 1262], "syntax": [36, 107, 195, 223, 234, 313, 631, 638, 639, 642, 651, 652, 734, 735, 774, 813, 847, 889, 1182, 1189, 1190, 1193, 1202, 1203, 1262, 1285, 1287], "system": [32, 129, 130, 313, 401, 799, 889, 979], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 204, 219, 223, 237, 278, 281, 313, 388, 397, 405, 421, 440, 443, 445, 446, 499, 536, 578, 638, 642, 651, 652, 662, 665, 668, 673, 768, 778, 817, 822, 835, 855, 889, 895, 967, 1003, 1023, 1028, 1030, 1031, 1082, 1118, 1189, 1193, 1202, 1203, 1212, 1213, 1216, 1219, 1224, 1262, 1274, 1275, 1284], "t_": [279, 313, 444, 778, 856, 889, 1029, 1262], "t_0": [245, 313, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 778, 840, 889, 1029, 1262], "t_1": [245, 313, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 778, 840, 889, 1029, 1262], "t_a": [279, 313, 856, 889], "t_b": [279, 313, 856, 889], "t_c": [279, 313, 856, 889], "t_d": [279, 313, 856, 889], "t_i": [444, 778, 1029, 1262], "t_id": [220, 313, 823, 889], "t_n": [245, 313, 594, 597, 599, 601, 603, 605, 608, 610, 612, 778, 840, 889], "t_struct": [279, 313, 856, 889], "tab_spann": [313, 317], "tab_stub": [313, 317], "tab_styl": [313, 317], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 140, 144, 145, 218, 220, 238, 260, 265, 272, 281, 282, 313, 317, 757, 790, 821, 823, 850, 858, 889, 1272, 1273, 1274, 1275, 1277, 1278, 1288, 1289], "table_nam": [34, 36, 260, 313, 850, 889], "table_path": [35, 133, 144, 145, 313], "table_styl": [36, 313], "tablemerg": [35, 313], "tablenotfounderror": [35, 313], "tables_scale_100": [125, 130], "tail": [202, 206, 313, 328, 624, 778, 889, 1049, 1176, 1262], "take": [36, 126, 134, 140, 159, 160, 168, 197, 198, 204, 227, 230, 237, 238, 242, 313, 338, 396, 418, 453, 460, 461, 502, 503, 535, 559, 561, 563, 627, 704, 706, 725, 727, 736, 778, 815, 817, 832, 838, 889, 913, 974, 1000, 1041, 1042, 1085, 1086, 1253, 1262, 1280], "taken": [521, 655, 1104, 1206], "talkin": [673, 1224], "tan": [778, 1262, 1282], "tand": 1282, "tangent": [334, 335, 683, 684, 778, 909, 910, 1235, 1236, 1262, 1286], "tanh": [238, 313, 778, 1262], "target": [1, 34, 35, 36, 52, 134, 275, 313, 638, 665, 667, 668, 895, 1189, 1216, 1218, 1219, 1284], "target_alia": [35, 313], "target_t": [34, 313], "task": [54, 800, 889], "tau": [443, 444, 778, 1028, 1029, 1262], "tb": [152, 154, 190, 313, 370, 1027, 1262], "tbl": [125, 130, 1291], "tbl0": 1277, "tbl1": [1275, 1277], "tbl2": [1275, 1277], "tbl3": 1275, "tbl4": 1275, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 183, 313, 804, 889], "tbl_width_char": 724, "td1": 895, "td2": 895, "td3": 895, "tdf": [237, 313], "technic": 774, "tell": [632, 653, 1183, 1204], "tempor": [87, 176, 204, 216, 245, 247, 248, 267, 313, 378, 473, 594, 597, 599, 601, 603, 605, 608, 610, 612, 778, 790, 796, 817, 840, 889, 895, 956, 1054, 1262, 1282, 1288], "temporalliter": [378, 778, 956, 989, 990, 1262], "temporari": [34, 313], "temporarili": [165, 168, 204, 245, 313, 594, 778, 817, 840, 889], "tend": [152, 154], "tensor": [275, 313, 1246, 1262], "tensordataset": [275, 313], "term": [443, 445, 446, 643, 655, 666, 778, 1028, 1030, 1031, 1194, 1206, 1217, 1262], "termin": [33, 42, 313, 889], "test": [0, 34, 131, 132, 134, 140, 189, 238, 313, 790, 818, 826, 889, 1026, 1262], "test1": 1277, "test2": 1277, "test3": 1277, "test_1": [238, 313], "test_1_math": [238, 313], "test_1_phys": [238, 313], "test_2": [238, 313], "test_2_math": [238, 313], "test_2_phys": [238, 313], "test_data": 131, "test_df_height": 159, "test_func": 739, "test_lf": [863, 889], "test_miscellan": 1292, "test_numer": 1292, "test_price_calcul": 1292, "test_series_len": 163, "test_tabl": 132, "test_unique_xyz": 157, "testdb": 132, "testing1234": 1277, "text": [128, 131, 643, 647, 648, 651, 652, 654, 655, 666, 758, 1194, 1198, 1199, 1205, 1206, 1217, 1277, 1292], "texttt": [624, 778, 1176, 1262], "th": [198, 313, 461, 503, 516, 624, 643, 666, 778, 815, 889, 1042, 1086, 1099, 1176, 1194, 1217, 1262], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 177, 203, 216, 218, 219, 223, 236, 246, 247, 249, 281, 299, 313, 457, 459, 462, 464, 473, 487, 515, 534, 535, 536, 549, 581, 593, 615, 624, 643, 647, 649, 650, 658, 666, 675, 710, 740, 778, 799, 800, 816, 821, 822, 873, 889, 1054, 1098, 1118, 1139, 1150, 1163, 1176, 1194, 1198, 1200, 1201, 1209, 1217, 1226, 1243, 1262, 1292], "the_aws_access_key_id": [35, 133, 144, 145, 313], "the_aws_region": [35, 313], "the_aws_secret_access_kei": [35, 133, 144, 145, 313], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 219, 221, 248, 313, 653, 661, 662, 778, 799, 822, 889, 893, 895, 1204], "them": [54, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 191, 192, 204, 219, 230, 238, 245, 275, 283, 313, 350, 444, 473, 506, 566, 567, 574, 594, 708, 719, 720, 722, 723, 765, 766, 778, 800, 810, 817, 822, 832, 840, 889, 895, 925, 1029, 1034, 1089, 1127, 1128, 1262, 1280, 1289], "therebi": [143, 146, 147], "therefor": [190, 313, 536, 768, 778, 1027, 1262], "theta": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "thi": [1, 4, 5, 10, 12, 14, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 178, 179, 181, 183, 184, 187, 190, 192, 196, 197, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 258, 260, 261, 262, 265, 267, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 294, 299, 312, 313, 316, 317, 325, 328, 329, 338, 350, 356, 357, 358, 363, 372, 373, 375, 378, 388, 389, 391, 397, 398, 409, 415, 416, 418, 421, 422, 424, 427, 438, 442, 449, 459, 466, 468, 470, 471, 473, 477, 499, 500, 506, 515, 516, 517, 518, 519, 520, 522, 527, 528, 532, 533, 535, 536, 540, 541, 542, 543, 544, 545, 546, 548, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 574, 581, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 618, 619, 620, 625, 626, 627, 630, 632, 638, 641, 644, 645, 649, 650, 653, 660, 661, 662, 663, 664, 669, 673, 675, 677, 679, 686, 687, 689, 690, 691, 692, 696, 700, 708, 711, 713, 714, 727, 728, 730, 732, 733, 736, 737, 740, 743, 745, 748, 750, 754, 755, 756, 759, 763, 767, 768, 769, 774, 778, 790, 793, 794, 795, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 816, 817, 819, 821, 822, 823, 825, 827, 831, 832, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 868, 873, 887, 888, 889, 893, 895, 897, 904, 913, 925, 931, 932, 933, 938, 946, 948, 950, 951, 956, 957, 967, 968, 975, 976, 978, 987, 997, 998, 1000, 1003, 1004, 1006, 1009, 1020, 1022, 1025, 1027, 1033, 1034, 1042, 1044, 1048, 1050, 1059, 1068, 1082, 1083, 1089, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1111, 1116, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1130, 1133, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1177, 1178, 1180, 1181, 1183, 1189, 1192, 1195, 1196, 1200, 1201, 1204, 1211, 1212, 1213, 1220, 1224, 1226, 1227, 1229, 1232, 1233, 1237, 1239, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1262, 1267, 1271, 1272, 1273, 1277, 1284, 1287, 1288, 1289, 1290, 1292], "thing": [143, 150], "think": [415, 416, 997, 998], "third": [535, 778], "thoma": [230, 313, 832, 889], "those": [5, 30, 36, 129, 248, 272, 282, 313, 457, 584, 638, 740, 778, 858, 889, 895, 1141, 1189, 1244, 1262], "though": [34, 131, 204, 313, 774, 817, 889], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 259, 313, 499, 536, 627, 704, 778, 800, 849, 889, 933, 1082, 1105, 1178, 1262], "thread_loc": [536, 778], "thread_pool_s": 166, "threadpool": 53, "three": [36, 173, 245, 274, 313, 389, 581, 594, 616, 643, 666, 778, 840, 889, 937, 968, 1110, 1139, 1194, 1217, 1262], "threshold": [251, 313, 842, 889], "through": [117, 131, 774, 895, 1262, 1277], "throw": [35, 118, 119, 122, 176, 185, 313, 645, 646, 796, 806, 889, 1196, 1197, 1262], "thu": [36, 192, 313, 316, 710, 1034, 1262], "thursdai": [204, 313, 396, 706, 817, 889, 974], "ti": [584, 778, 1141, 1262], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 139, 143, 144, 146, 147, 159, 160, 163, 183, 192, 204, 219, 220, 245, 283, 313, 345, 372, 373, 397, 398, 400, 401, 402, 405, 406, 415, 416, 418, 421, 422, 424, 426, 427, 435, 438, 444, 494, 495, 527, 593, 594, 597, 599, 601, 603, 605, 608, 610, 612, 620, 665, 668, 672, 685, 686, 687, 708, 709, 719, 720, 721, 722, 723, 724, 730, 765, 766, 778, 799, 800, 804, 817, 822, 823, 836, 840, 889, 895, 920, 946, 975, 976, 978, 979, 983, 984, 1000, 1003, 1004, 1006, 1008, 1009, 1017, 1020, 1029, 1034, 1077, 1078, 1150, 1172, 1216, 1219, 1223, 1245, 1247, 1262, 1271, 1277, 1285, 1292], "time_column": [283, 313], "time_format": [33, 42, 313, 889], "time_unit": [62, 64, 398, 400, 406, 426, 438, 668, 721, 722, 723, 724, 730, 895, 976, 978, 984, 1008, 1020, 1219], "time_unit_m": [398, 976], "time_unit_n": [398, 976], "time_unit_u": 438, "time_zon": [62, 401, 403, 421, 668, 721, 722, 723, 895, 975, 979, 983, 1003, 1219], "timedelta": [204, 219, 245, 283, 313, 418, 422, 435, 444, 594, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 719, 720, 722, 723, 765, 766, 778, 817, 822, 840, 889, 894, 895, 988, 994, 1000, 1004, 1017, 1029, 1127, 1128, 1180, 1252, 1262], "timeout": [54, 800, 889], "timestamp": [123, 133, 144, 204, 313, 421, 422, 435, 730, 817, 889, 1003, 1004, 1017, 1282], "timestamp_m": 426, "timestamp_n": 1008, "timestamp_u": [426, 1008], "timestep": 730, "timeunit": [33, 42, 62, 64, 313, 398, 400, 426, 438, 668, 721, 722, 723, 724, 889, 895, 976, 978, 1008, 1020, 1219], "timezon": [62, 133, 144, 403, 895, 1285], "tip": [536, 778], "titl": [36, 313, 1271], "titlecas": [673, 1224], "tm": [400, 895, 1285], "to_arrow": [217, 313, 1243, 1262, 1289], "to_batch": [217, 313], "to_dict": [176, 313, 796, 889, 895], "to_dummi": [270, 275, 313, 1262], "to_fram": [375, 406, 422, 426, 435, 665, 968, 1139, 1164, 1166, 1208, 1209, 1216, 1262, 1267], "to_init_repr": [123, 313, 1262], "to_jax": [275, 313, 1262], "to_list": [123, 245, 313, 1182, 1193, 1262], "to_lowercas": 565, "to_numpi": [270, 275, 313, 535, 778, 1262], "to_panda": [313, 1262], "to_phys": [778, 950, 1262], "to_python": 894, "to_seri": [48, 199, 313, 665, 705, 753, 1216], "to_sql": [34, 313], "to_str": [424, 1006], "to_struct": [313, 639], "to_torch": [270, 313, 1262], "to_uppercas": [324, 564, 640, 778], "togeth": 1284, "token": [139, 141, 143, 145, 146, 147, 148], "tokyo": [123, 895], "tokyo_tz": 895, "toler": [152, 153, 154, 155, 219, 313, 822, 889], "tone": [36, 313], "tonight": [632, 653, 1183, 1204], "too": [14, 238, 313, 889], "toomanyrowsreturnederror": [246, 313], "top": [36, 260, 276, 313, 316, 687, 778, 850, 854, 889, 1262, 1267, 1289], "top_col": [36, 313], "top_k": [175, 313, 372, 373, 687, 778, 794, 889, 946, 1262], "top_k_bi": [372, 373, 686, 778], "top_row": [36, 313], "tor_id": 123, "torch": [151, 275, 313, 1246, 1262], "torchexporttyp": [275, 313], "tostructstrategi": [527, 1110], "total": [36, 190, 294, 313, 428, 429, 430, 431, 432, 433, 434, 488, 508, 778, 868, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1027, 1071, 1091, 1262], "total_gross": 1271, "toward": [294, 488, 508, 778, 868, 1071, 1091, 1262], "tp": [1, 50], "tpu": [270, 313, 1241, 1262], "traceback": [152, 153, 154, 155, 271, 313, 589, 778, 1146, 1243, 1262], "tracebacktyp": 1289, "track": [133, 144, 145, 223, 313, 527, 1289], "trail": [28, 202, 313, 660, 661, 1211, 1212], "train": [275, 313], "train_lf": [863, 889], "transfer": 132, "transferencod": [367, 368, 634, 635, 941, 942, 1185, 1186], "transform": [223, 260, 313, 535, 673, 757, 778, 850, 889, 1224], "transform_dens": [1262, 1267], "transit": [195, 313, 813, 889], "translat": 131, "transpar": [799, 889], "transpos": [238, 313], "travel": [133, 144], "travers": [596, 598, 600, 602, 604, 607, 609, 611, 778, 1152, 1153, 1155, 1158, 1159, 1160, 1262], "treat": [129, 130, 143, 170, 444, 631, 633, 642, 651, 652, 768, 778, 897, 1029, 1182, 1184, 1193, 1202, 1203, 1262], "tree": [549, 809, 889], "tree_format": [809, 889], "trend": [36, 313], "tri": [223, 313], "triangl": [299, 873], "trigger": [35, 221, 272, 313, 778, 893, 1244, 1262], "trigonometri": [1282, 1288], "trim": [123, 1284], "trim_decimal_zero": 28, "trip": 131, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 172, 176, 177, 178, 183, 185, 189, 194, 195, 197, 199, 201, 202, 203, 204, 209, 211, 212, 213, 216, 218, 219, 221, 226, 227, 233, 234, 236, 238, 239, 246, 247, 248, 249, 251, 259, 260, 263, 266, 268, 270, 271, 272, 275, 277, 278, 279, 281, 282, 283, 287, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 323, 324, 325, 326, 327, 328, 339, 341, 342, 345, 349, 350, 358, 362, 366, 367, 369, 371, 373, 374, 383, 384, 385, 386, 387, 389, 396, 398, 401, 404, 406, 408, 415, 416, 418, 419, 421, 422, 423, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 445, 446, 453, 460, 462, 463, 464, 465, 468, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 490, 491, 495, 502, 504, 506, 522, 527, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 549, 550, 568, 569, 571, 573, 576, 577, 581, 586, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 619, 620, 624, 626, 627, 630, 631, 632, 633, 634, 636, 641, 642, 644, 645, 646, 651, 652, 656, 657, 659, 665, 667, 668, 670, 672, 676, 678, 687, 689, 692, 695, 696, 697, 698, 699, 701, 704, 705, 706, 710, 719, 722, 728, 734, 740, 750, 753, 757, 760, 765, 768, 769, 778, 796, 797, 798, 799, 800, 804, 806, 809, 812, 813, 816, 817, 821, 822, 825, 827, 831, 836, 842, 847, 849, 850, 855, 856, 857, 858, 861, 867, 869, 871, 874, 875, 876, 877, 878, 879, 880, 888, 889, 893, 895, 902, 903, 914, 916, 917, 920, 924, 925, 933, 940, 941, 943, 945, 947, 949, 951, 954, 955, 968, 974, 975, 976, 979, 982, 983, 984, 985, 986, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1025, 1026, 1028, 1030, 1031, 1038, 1046, 1050, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1073, 1074, 1078, 1085, 1087, 1089, 1105, 1118, 1124, 1130, 1132, 1135, 1136, 1139, 1142, 1143, 1157, 1176, 1178, 1181, 1182, 1183, 1184, 1185, 1187, 1192, 1193, 1195, 1196, 1197, 1202, 1203, 1207, 1208, 1210, 1216, 1218, 1219, 1221, 1223, 1238, 1243, 1244, 1251, 1253, 1262, 1267, 1271, 1272, 1274, 1276, 1280, 1281, 1284, 1289, 1292], "truediv": [457, 778], "truncat": [123, 129, 130, 143, 202, 204, 216, 247, 248, 267, 313, 817, 836, 889, 1288], "truncate_nod": [836, 889], "truncate_ragged_lin": [129, 130, 143], "truncate_str": 435, "truncate_td": 435, "trust": [391, 778, 805, 889], "try": [53, 54, 110, 129, 130, 135, 139, 141, 143, 146, 147, 148, 799, 800, 809, 836, 847, 889], "try_cast": 1282, "try_parse_d": [125, 129, 130, 143], "try_parse_hive_d": [141, 146, 148], "ts_local": [421, 1003], "tseri": [415, 416, 997, 998], "tstamp": 895, "tstamp_tokyo": 895, "tstamp_utc": 895, "tue": [313, 316], "tuesdai": [204, 313, 817, 889], "tupl": [36, 56, 132, 134, 140, 173, 216, 223, 236, 246, 247, 248, 255, 275, 291, 313, 590, 778, 836, 847, 889, 894, 895, 1147, 1168, 1262], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 313, 799, 800, 809, 821, 822, 827, 836, 889], "twice": [36, 313], "two": [36, 46, 84, 85, 118, 120, 122, 132, 173, 195, 197, 219, 220, 229, 230, 247, 274, 280, 293, 299, 313, 317, 323, 393, 400, 457, 460, 463, 527, 581, 626, 702, 703, 708, 710, 712, 719, 722, 754, 755, 757, 778, 813, 822, 823, 831, 832, 857, 867, 873, 889, 895, 937, 971, 978, 1110, 1139, 1262, 1277, 1278, 1281, 1290], "two_a": 1289, "tworld": [662, 1211, 1213], "txt": [1, 12, 143, 631, 642, 1193], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 170, 173, 179, 188, 191, 197, 202, 204, 205, 217, 218, 223, 245, 250, 265, 270, 271, 274, 275, 278, 290, 313, 325, 327, 330, 331, 332, 333, 334, 335, 338, 343, 344, 345, 347, 350, 361, 362, 366, 367, 368, 369, 370, 371, 374, 375, 378, 379, 380, 381, 382, 389, 390, 396, 397, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 447, 449, 460, 463, 466, 473, 474, 475, 476, 477, 478, 479, 488, 492, 493, 495, 500, 506, 508, 526, 527, 535, 536, 581, 583, 587, 588, 589, 590, 592, 593, 594, 621, 622, 623, 630, 633, 634, 635, 637, 638, 639, 640, 643, 644, 646, 647, 648, 655, 656, 657, 658, 665, 666, 670, 683, 684, 685, 692, 701, 708, 711, 718, 719, 720, 721, 722, 723, 724, 726, 734, 735, 737, 738, 739, 740, 750, 753, 764, 765, 766, 769, 774, 778, 790, 799, 800, 808, 809, 810, 817, 821, 836, 840, 841, 847, 855, 865, 889, 894, 897, 902, 903, 914, 916, 917, 918, 919, 920, 922, 924, 925, 936, 937, 938, 940, 941, 942, 944, 947, 948, 956, 968, 969, 974, 975, 977, 979, 980, 981, 982, 983, 985, 986, 987, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1029, 1033, 1048, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1073, 1074, 1075, 1076, 1078, 1083, 1089, 1091, 1109, 1110, 1132, 1139, 1145, 1146, 1147, 1149, 1150, 1171, 1173, 1181, 1182, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1197, 1198, 1199, 1206, 1207, 1208, 1209, 1216, 1217, 1221, 1242, 1243, 1245, 1253, 1262, 1271, 1278, 1282, 1284, 1288, 1289], "type_coercion": [42, 43, 44, 45, 53, 54, 799, 800, 809, 836, 847, 889], "typeerror": [35, 313], "typenam": [36, 313], "typic": [119, 131, 148, 223, 313, 405, 621, 778, 895, 983, 1118, 1173, 1262], "tz": [668, 1219], "tzinfo": [133, 144, 895], "u": [36, 62, 64, 148, 161, 219, 313, 398, 400, 406, 426, 438, 665, 668, 697, 699, 721, 722, 723, 724, 730, 822, 889, 895, 976, 978, 984, 1008, 1020, 1216, 1219, 1275, 1285], "u1": [271, 313], "u16": [143, 1287, 1292], "u32": [12, 131, 174, 176, 182, 235, 289, 290, 294, 298, 304, 306, 313, 323, 329, 336, 337, 338, 339, 340, 343, 344, 346, 355, 370, 382, 383, 468, 488, 492, 493, 496, 508, 513, 556, 572, 584, 592, 593, 597, 599, 601, 603, 605, 608, 610, 612, 616, 633, 642, 647, 648, 685, 690, 692, 696, 700, 704, 705, 711, 713, 734, 737, 748, 778, 793, 796, 803, 834, 864, 865, 868, 872, 878, 880, 889, 895, 913, 914, 915, 918, 919, 921, 930, 947, 950, 962, 1050, 1075, 1076, 1079, 1091, 1096, 1141, 1149, 1150, 1165, 1184, 1193, 1198, 1199, 1245, 1249, 1251, 1262, 1271, 1279, 1280, 1284, 1289], "u64": [205, 290, 313, 466, 586, 778, 836, 865, 889, 895, 1048, 1143, 1262], "u8": [176, 268, 269, 281, 313, 589, 695, 778, 796, 889, 895, 1146, 1238, 1262, 1292], "udf": [165, 223, 237, 299, 313, 391, 536, 578, 740, 778, 805, 835, 873, 889, 1118, 1262], "ufunc": 90, "uid": 131, "uint": 1292, "uint16": [143, 386, 387, 681, 778, 895, 965, 966, 1233, 1243, 1246, 1262], "uint2": 1287, "uint32": [124, 151, 176, 190, 245, 290, 313, 338, 343, 344, 370, 382, 444, 460, 463, 488, 492, 493, 508, 587, 592, 593, 594, 633, 647, 648, 685, 711, 734, 737, 778, 796, 840, 865, 889, 895, 914, 918, 919, 944, 947, 1027, 1029, 1075, 1076, 1091, 1149, 1150, 1184, 1198, 1199, 1245, 1246, 1262], "uint4": 1289, "uint64": [124, 205, 245, 290, 313, 343, 344, 444, 466, 492, 493, 586, 594, 778, 840, 865, 889, 895, 918, 919, 1029, 1048, 1075, 1076, 1143, 1246, 1262], "uint8": [131, 176, 269, 270, 271, 281, 313, 386, 387, 589, 681, 695, 778, 796, 889, 895, 965, 966, 1146, 1233, 1246, 1262, 1292], "uint8_pair": 1292, "uit": [655, 1206], "uk": [639, 1190], "unabl": [92, 134], "unari": [570, 778], "unbias": [445, 446, 778, 1030, 1031, 1262], "unchang": [190, 313, 588, 685, 778, 827, 873, 889, 1027, 1145, 1245, 1262], "uncompress": [31, 37, 38, 41, 45, 135, 146, 313, 889], "undefin": [688, 778], "under": [46, 48, 49, 50, 51, 84, 85, 139, 141, 143, 146, 147, 148, 238, 260, 313, 770, 771, 773, 774, 779, 780, 783, 785, 786, 787, 850, 889, 1254, 1256, 1258, 1263, 1268, 1269, 1270], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 191, 192, 216, 217, 247, 265, 271, 313, 367, 398, 399, 400, 404, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 420, 421, 423, 436, 437, 438, 439, 586, 613, 631, 634, 642, 778, 810, 889, 895, 941, 950, 976, 977, 978, 982, 985, 986, 987, 991, 992, 993, 995, 996, 999, 1001, 1002, 1003, 1005, 1018, 1019, 1020, 1021, 1034, 1143, 1161, 1171, 1182, 1185, 1193, 1237, 1243, 1262, 1289], "understood": 740, "undo": [550, 557, 558, 560, 562, 564, 565], "unexpect": [99, 108, 131, 535, 536, 778, 1118, 1262], "unhelpfulli": [152, 154], "unicod": [20, 643, 648, 655, 666, 895, 1194, 1199, 1206, 1217], "unifi": [36, 270, 275, 313, 895], "uniform": [36, 313, 581, 778, 1139, 1262], "unimod": [624, 778, 1176, 1262], "unintend": [195, 313, 813, 889], "union": [53, 54, 55, 519, 799, 800, 809, 836, 847, 889, 895, 1102, 1288, 1289], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 174, 213, 218, 234, 238, 248, 304, 313, 329, 340, 355, 389, 484, 513, 556, 581, 665, 667, 668, 672, 690, 692, 700, 748, 778, 793, 821, 878, 889, 893, 915, 930, 968, 1067, 1096, 1125, 1139, 1216, 1218, 1219, 1223, 1249, 1251, 1262, 1278, 1280], "unique_column_valu": [238, 313], "unique_count": [778, 1262], "uniquekeepstrategi": [278, 313, 855, 889], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 190, 313, 370, 398, 400, 406, 426, 438, 444, 450, 533, 546, 665, 668, 691, 721, 722, 723, 724, 730, 778, 836, 889, 893, 895, 944, 976, 978, 984, 1008, 1020, 1027, 1029, 1035, 1116, 1216, 1219, 1250, 1262, 1292], "univers": [170, 897], "unix": [61, 62, 406, 730, 984], "unknown": [638, 738, 1189], "unless": [36, 47, 118, 270, 275, 313, 660, 661, 753, 889, 1211, 1284], "unlik": [126, 204, 313, 817, 889], "unnam": [640, 1191], "unnest": [126, 313, 389, 581, 592, 639, 640, 657, 658, 678, 679, 692, 778, 889, 937, 968, 1110, 1139, 1149, 1208, 1209, 1262, 1282, 1288], "unpivot": [229, 313, 831, 889], "unregist": [1273, 1274, 1275, 1289, 1291], "unsaf": [778, 893], "unset": [34, 141, 146, 158, 298, 313, 421, 527, 872, 1003, 1271], "unsign": [78, 79, 80, 81, 586, 778, 895, 1143, 1262], "unsigned_integ": 895, "unstabl": [41, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 260, 270, 275, 281, 282, 313, 316, 317, 388, 389, 422, 468, 536, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 754, 755, 778, 799, 800, 809, 850, 858, 889, 951, 967, 968, 1004, 1050, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1241, 1246, 1262, 1267], "unstack": 313, "unstackdirect": [281, 313], "unsuit": 115, "unsupport": [35, 313], "until": [84, 204, 221, 313, 649, 650, 675, 817, 889, 1200, 1201, 1226], "up": [10, 36, 76, 132, 216, 219, 238, 247, 248, 254, 267, 313, 377, 536, 643, 666, 778, 821, 822, 827, 845, 889, 895, 953, 1194, 1217, 1262], "upcast": [328, 778], "upcast_integer_typ": [1, 50], "updat": [35, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 183, 313, 804, 889], "upgrad": 95, "upheld": [827, 889], "upon": 130, "upper": [129, 130, 131, 190, 204, 313, 378, 468, 473, 527, 559, 691, 701, 719, 720, 722, 723, 765, 766, 778, 817, 889, 956, 1027, 1050, 1054, 1116, 1250, 1262, 1280, 1282], "upper_bound": [204, 313, 378, 473, 527, 778, 817, 889, 956, 1054, 1116, 1262], "uppercas": [565, 674, 1225, 1284], "upsampl": [204, 313, 817, 889], "urandom": [370, 944], "uri": [34, 35, 131, 132, 133, 144, 145, 313], "url": [131, 132, 141, 146, 148, 638, 640, 1189, 1191], "urllib": 132, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 174, 175, 176, 179, 183, 185, 187, 193, 194, 195, 197, 203, 204, 211, 213, 215, 216, 217, 219, 223, 229, 233, 234, 236, 237, 238, 245, 246, 247, 248, 249, 251, 252, 254, 259, 260, 261, 265, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 292, 299, 313, 323, 325, 327, 329, 338, 339, 362, 367, 368, 373, 388, 391, 394, 395, 403, 421, 422, 424, 427, 435, 438, 440, 443, 444, 445, 446, 447, 451, 452, 453, 457, 468, 471, 472, 473, 485, 499, 515, 523, 527, 529, 535, 536, 539, 557, 560, 562, 564, 565, 574, 581, 584, 586, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 617, 619, 620, 624, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 647, 648, 651, 652, 653, 655, 657, 659, 661, 662, 663, 664, 665, 667, 668, 672, 675, 676, 679, 687, 693, 694, 696, 697, 698, 699, 700, 703, 704, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 730, 734, 735, 737, 738, 740, 741, 742, 744, 746, 747, 750, 753, 754, 755, 756, 757, 759, 760, 761, 762, 765, 766, 767, 768, 769, 774, 777, 778, 789, 790, 793, 794, 795, 796, 799, 800, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 816, 817, 818, 822, 825, 826, 831, 840, 841, 842, 843, 845, 849, 850, 851, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 873, 889, 894, 895, 902, 903, 933, 937, 941, 942, 951, 967, 969, 972, 973, 981, 989, 990, 1003, 1004, 1006, 1009, 1017, 1020, 1023, 1028, 1029, 1030, 1031, 1036, 1037, 1041, 1047, 1050, 1052, 1053, 1054, 1069, 1082, 1098, 1105, 1110, 1118, 1139, 1141, 1143, 1145, 1147, 1149, 1150, 1151, 1163, 1164, 1166, 1167, 1170, 1176, 1178, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1189, 1190, 1192, 1193, 1198, 1199, 1202, 1203, 1204, 1206, 1208, 1216, 1218, 1219, 1223, 1226, 1237, 1238, 1240, 1243, 1244, 1252, 1262, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1284, 1285, 1289, 1292], "usag": [159, 163, 257, 313, 895, 1171, 1262], "usd": [202, 313, 1292], "use_pyarrow": [41, 45, 129, 135, 137, 141, 271, 313, 889, 1243, 1262], "use_pyarrow_extension_arrai": [272, 313, 1244, 1262], "use_pyarrow_write_to_dataset": [41, 313], "use_statist": [141, 148], "user": [34, 131, 132, 170, 223, 237, 299, 313, 535, 536, 578, 617, 740, 778, 835, 873, 889, 893, 897, 1118, 1167, 1262], "user_conn": 131, "usernam": [129, 132, 135, 137], "userwarn": 1, "usr": 131, "usual": [91, 132, 275, 313, 397, 975], "utc": [133, 144, 397, 401, 403, 405, 421, 665, 668, 895, 975, 979, 983, 1003, 1216, 1219], "utc_tz": 895, "utf": [33, 42, 75, 313, 889], "utf8": [20, 129, 130, 143, 643, 655, 666, 1194, 1206, 1217], "utf8_borders_onli": 20, "utf8_ful": [20, 47, 123], "utf8_full_condens": [7, 20, 123], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [275, 313, 730, 889, 893], "uvw": [639, 1190], "v": [8, 9, 41, 190, 313, 616, 697, 699, 778, 1165, 1262, 1274, 1275], "v2": [8, 135, 146], "val": [36, 244, 313, 536, 578, 685, 768, 778, 839, 889], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 185, 190, 218, 313, 388, 631, 633, 638, 639, 640, 642, 646, 651, 652, 768, 778, 806, 821, 889, 895, 967, 1027, 1182, 1184, 1189, 1190, 1191, 1193, 1197, 1202, 1203, 1262, 1271, 1272], "validate_output_schema": [827, 889], "vals_phys": [685, 778], "valu": [4, 5, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 172, 174, 175, 183, 187, 189, 192, 193, 194, 195, 199, 202, 204, 205, 206, 210, 214, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 238, 239, 240, 242, 245, 246, 247, 248, 249, 256, 259, 261, 262, 263, 264, 266, 267, 271, 272, 276, 277, 280, 281, 282, 283, 284, 291, 294, 295, 297, 300, 301, 303, 304, 313, 316, 317, 321, 322, 323, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 389, 392, 394, 395, 400, 404, 414, 419, 436, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 522, 523, 524, 525, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 552, 553, 554, 555, 556, 566, 567, 568, 569, 572, 574, 575, 578, 579, 581, 582, 584, 587, 588, 589, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 621, 622, 623, 624, 626, 627, 628, 630, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 666, 675, 677, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 704, 707, 708, 709, 711, 713, 714, 715, 716, 717, 727, 728, 733, 734, 735, 736, 738, 741, 742, 743, 744, 745, 746, 747, 748, 752, 753, 754, 755, 761, 762, 768, 778, 793, 794, 804, 807, 811, 812, 813, 817, 819, 820, 821, 822, 828, 829, 830, 831, 833, 834, 837, 838, 840, 846, 849, 851, 852, 854, 857, 858, 859, 868, 869, 871, 874, 875, 877, 878, 889, 895, 900, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 938, 939, 941, 942, 943, 944, 945, 947, 953, 956, 958, 959, 960, 962, 967, 968, 969, 970, 972, 973, 978, 982, 996, 1001, 1018, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1081, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1103, 1105, 1106, 1107, 1108, 1111, 1112, 1118, 1119, 1120, 1122, 1123, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1138, 1139, 1140, 1141, 1145, 1146, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1169, 1173, 1174, 1175, 1176, 1178, 1181, 1182, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1217, 1226, 1229, 1233, 1234, 1235, 1236, 1243, 1244, 1245, 1249, 1251, 1253, 1262, 1271, 1276, 1278, 1280, 1281, 1283, 1284, 1285, 1287, 1289, 1291, 1292], "value1": [627, 778], "value2": [627, 778], "value_a": 1289, "value_b": 1289, "value_count": [690, 778, 1262], "value_cum_sum": [387, 778], "value_cum_sum_all_fil": [387, 778], "value_nam": [229, 280, 313, 831, 857, 889], "value_var": [229, 280, 313, 831, 857, 889], "valueerror": [15, 20], "valueexcept": 738, "var": [36, 164, 313, 611, 612, 778, 889, 1262, 1279], "var_samp": 1279, "vari": [397, 975, 1292], "variabl": [30, 72, 139, 141, 143, 146, 147, 148, 162, 165, 229, 268, 280, 313, 831, 857, 889, 1238, 1262, 1272, 1274, 1289], "variable_nam": [229, 280, 313, 831, 857, 889], "variad": 131, "varianc": [284, 313, 446, 485, 611, 612, 693, 767, 778, 859, 889, 1031, 1069, 1160, 1252, 1262, 1282], "variou": [131, 173, 179, 313, 778, 801, 889, 894, 895, 1262], "vector": [596, 598, 600, 602, 604, 607, 609, 611, 778, 1152, 1153, 1155, 1158, 1159, 1160, 1262], "vectoris": [415, 416, 997, 998], "vein": 168, "verbos": [29, 152, 154, 168, 639, 1190], "veri": [131, 216, 277, 313, 536, 778, 873, 1283], "verifi": [219, 313, 822, 889], "versicolor": [313, 316], "version": [34, 35, 52, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 172, 174, 184, 205, 229, 253, 260, 270, 271, 275, 289, 294, 313, 316, 391, 403, 415, 416, 438, 459, 466, 542, 548, 551, 588, 630, 637, 679, 694, 703, 752, 757, 778, 793, 805, 809, 831, 844, 850, 863, 864, 868, 889, 895, 981, 989, 990, 997, 998, 1020, 1047, 1048, 1145, 1181, 1188, 1241, 1243, 1246, 1262, 1267], "versu": [183, 313, 804, 889], "vertic": [55, 192, 281, 285, 313, 630, 644, 1181, 1195], "vertical_relax": 55, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 171, 173, 184, 216, 247, 313, 391, 536, 640, 778, 805, 889, 898, 1191], "view": [536, 778], "visibl": [17, 190, 313, 1027, 1262], "visit": [388, 778, 967, 1262], "visual": [211, 213, 313, 847, 889], "volk": 126, "vote": [638, 640, 1189, 1191], "vowel": [651, 652, 1202, 1203], "vstack": [55, 192, 313], "w": [36, 131, 204, 248, 313, 633, 638, 640, 697, 699, 817, 889, 895, 1184, 1189, 1191, 1212, 1274, 1275, 1278], "w_i": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "wa": [34, 52, 91, 134, 184, 270, 271, 313, 316, 391, 589, 653, 724, 778, 805, 889, 895, 1146, 1204, 1243, 1262, 1267], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 203, 217, 237, 259, 292, 313, 422, 574, 578, 627, 638, 711, 774, 778, 802, 808, 816, 835, 841, 849, 860, 866, 873, 889, 1004, 1189], "walk": 709, "want": [54, 119, 121, 134, 192, 223, 234, 245, 260, 313, 396, 453, 535, 536, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 620, 632, 647, 653, 706, 714, 719, 722, 728, 750, 753, 769, 778, 800, 818, 826, 850, 889, 895, 974, 1034, 1118, 1183, 1198, 1204, 1262, 1277], "warehous": 132, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 574, 778, 1262], "watermark": [41, 313], "wb": [36, 313], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 183, 184, 204, 219, 238, 245, 283, 313, 391, 418, 422, 435, 468, 499, 527, 535, 536, 594, 597, 599, 601, 603, 605, 608, 610, 612, 640, 670, 718, 719, 720, 721, 722, 723, 738, 765, 766, 768, 778, 804, 805, 817, 822, 827, 840, 889, 1000, 1004, 1017, 1050, 1082, 1118, 1191, 1221, 1262, 1274], "weather": [651, 652, 1202, 1203], "wed": [313, 316], "wednesdai": [204, 313, 424, 427, 817, 889, 1006, 1009], "week": [204, 219, 245, 283, 313, 396, 418, 422, 435, 437, 444, 594, 597, 599, 601, 603, 605, 608, 610, 612, 706, 719, 720, 722, 723, 724, 765, 766, 778, 817, 822, 840, 889, 895, 974, 1000, 1004, 1017, 1019, 1029, 1262, 1285], "week_mask": [396, 706, 974], "weekdai": [404, 419], "weekend": [396, 706, 974], "weekli": [204, 313, 435, 817, 889, 1017], "weghorst": [640, 1191], "weight": [126, 443, 444, 445, 446, 595, 596, 598, 600, 602, 604, 607, 609, 611, 624, 778, 1028, 1029, 1030, 1031, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1176, 1262], "wei\u00df": 1284, "well": [36, 129, 130, 131, 143, 313, 473, 757, 778, 1054, 1262, 1289], "were": [168, 588, 589, 774, 778, 1145, 1146, 1262], "west": [220, 313, 823, 889], "what": [173, 234, 313, 396, 535, 632, 653, 778, 974, 1183, 1204], "whatev": 168, "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 175, 183, 188, 190, 192, 194, 197, 204, 218, 220, 223, 237, 246, 248, 251, 252, 256, 259, 265, 268, 270, 271, 275, 276, 278, 282, 288, 313, 357, 378, 396, 443, 445, 446, 452, 520, 527, 546, 578, 588, 589, 618, 626, 627, 632, 637, 641, 643, 647, 648, 653, 655, 660, 661, 662, 665, 666, 704, 706, 714, 728, 778, 794, 804, 812, 817, 821, 823, 827, 842, 843, 846, 849, 854, 855, 858, 862, 889, 932, 956, 969, 974, 1027, 1028, 1030, 1031, 1034, 1037, 1103, 1145, 1146, 1164, 1166, 1169, 1183, 1188, 1192, 1194, 1198, 1199, 1204, 1206, 1211, 1212, 1213, 1216, 1217, 1237, 1238, 1243, 1262, 1277, 1289], "when_matched_update_al": [35, 313], "when_not_matched_insert_al": [35, 313], "where": [36, 47, 91, 131, 132, 134, 187, 192, 195, 204, 216, 229, 238, 247, 260, 261, 270, 275, 280, 282, 284, 313, 339, 437, 440, 442, 444, 453, 523, 529, 535, 569, 587, 616, 624, 627, 629, 653, 673, 693, 705, 710, 712, 754, 755, 757, 759, 767, 768, 778, 807, 813, 817, 831, 850, 851, 857, 858, 859, 889, 914, 1019, 1023, 1025, 1029, 1034, 1038, 1130, 1165, 1176, 1180, 1204, 1224, 1252, 1253, 1262, 1271, 1288, 1289, 1291], "wherea": [129, 143, 245, 313, 422, 435, 566, 567, 594, 778, 818, 826, 840, 889, 1004, 1017, 1127, 1128, 1262], "wherev": [36, 223, 299, 313, 536, 778, 1118, 1262], "whether": [33, 42, 120, 122, 126, 141, 146, 148, 163, 167, 189, 215, 219, 254, 259, 313, 325, 327, 341, 342, 408, 423, 465, 490, 491, 617, 627, 641, 704, 778, 822, 827, 845, 849, 889, 895, 902, 903, 916, 917, 949, 951, 986, 1005, 1026, 1046, 1047, 1073, 1074, 1192, 1262, 1274, 1289], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 159, 162, 164, 175, 176, 183, 184, 187, 192, 193, 203, 204, 209, 219, 238, 245, 253, 270, 271, 276, 278, 283, 313, 325, 362, 391, 396, 418, 422, 424, 435, 444, 450, 473, 475, 478, 480, 481, 482, 483, 527, 535, 536, 546, 548, 594, 597, 599, 601, 603, 605, 608, 610, 612, 670, 706, 719, 720, 722, 723, 724, 765, 766, 768, 778, 794, 796, 799, 802, 804, 805, 807, 808, 809, 817, 822, 840, 844, 854, 855, 860, 889, 895, 937, 974, 1000, 1004, 1006, 1017, 1029, 1034, 1035, 1054, 1057, 1060, 1062, 1063, 1064, 1065, 1110, 1166, 1221, 1241, 1243, 1262, 1272, 1278, 1289, 1292], "while": [35, 54, 130, 133, 134, 144, 148, 159, 163, 168, 216, 229, 277, 280, 282, 313, 588, 648, 778, 800, 831, 857, 858, 889, 1145, 1199, 1262], "white": [36, 313], "whitespac": [123, 660, 661, 662, 1211, 1212, 1213, 1284], "whole": [535, 626, 627, 638, 778, 873, 889, 1189], "whose": [47, 219, 238, 313, 447, 726, 778, 822, 889, 895], "why": [799, 889], "wide": [131, 202, 229, 238, 280, 281, 313, 831, 857, 889], "width": [26, 36, 56, 129, 130, 143, 313, 316, 526, 889, 1109], "wiki": 20, "wikipedia": 20, "wildcard": [447, 676, 714, 715, 728, 752, 774, 778, 893], "win_loss": [36, 313], "window": [129, 130, 143, 204, 245, 313, 388, 443, 445, 446, 536, 574, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 708, 754, 755, 778, 817, 840, 889, 967, 1028, 1030, 1031, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1262], "window_s": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 754, 755, 778, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1262], "windowmappingstrategi": [574, 778], "winter": [641, 651, 652, 1192], "wise": [36, 47, 131, 197, 313, 330, 331, 332, 333, 334, 335, 379, 380, 381, 448, 531, 621, 622, 623, 683, 684, 728, 752, 778, 905, 906, 907, 908, 909, 910, 958, 959, 960, 1032, 1114, 1115, 1173, 1174, 1175, 1235, 1236, 1262], "wish": [175, 276, 313, 372, 373, 686, 687, 778, 794, 854, 889, 946, 1247, 1262], "with_column": [1, 12, 50, 53, 54, 204, 237, 245, 275, 281, 288, 313, 322, 324, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 355, 356, 357, 358, 362, 367, 368, 370, 374, 378, 383, 384, 385, 386, 387, 389, 392, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 439, 441, 442, 444, 451, 452, 457, 462, 464, 466, 471, 472, 473, 476, 477, 479, 480, 481, 482, 483, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 553, 555, 557, 558, 560, 562, 564, 565, 568, 569, 570, 574, 575, 578, 579, 581, 584, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 614, 618, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 669, 670, 671, 673, 674, 675, 677, 679, 680, 685, 688, 695, 697, 699, 702, 706, 707, 708, 709, 714, 715, 717, 718, 720, 721, 725, 735, 739, 742, 744, 747, 758, 762, 764, 766, 768, 774, 778, 799, 800, 809, 817, 819, 835, 836, 840, 847, 862, 889, 895, 968, 1003, 1139, 1262, 1289], "with_column_nam": 143, "with_columns_seq": [313, 889], "with_context": 889, "with_field": [536, 778], "with_replac": [249, 313, 515, 615, 778, 1098, 1163, 1262], "with_row_count": [313, 889], "with_row_index": [1, 245, 289, 313, 597, 599, 601, 603, 605, 608, 610, 612, 778, 864, 889, 1164, 1262, 1267], "within": [41, 56, 72, 152, 153, 154, 155, 203, 204, 205, 219, 245, 283, 313, 466, 584, 627, 778, 817, 822, 840, 889, 1048, 1262, 1289], "without": [1, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 271, 275, 281, 282, 313, 316, 317, 388, 389, 422, 468, 536, 581, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 632, 641, 653, 711, 754, 755, 756, 778, 799, 800, 809, 823, 850, 858, 889, 949, 951, 967, 968, 1004, 1050, 1139, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1183, 1192, 1204, 1241, 1243, 1246, 1262, 1267, 1291], "without_fil": [133, 144, 145], "wod": [662, 1213], "womp": [279, 313, 856, 889], "word": [132, 651, 652, 661, 662, 673, 1224], "work": [36, 63, 65, 130, 149, 252, 288, 313, 325, 327, 363, 377, 378, 447, 456, 499, 528, 535, 536, 557, 558, 560, 562, 564, 565, 574, 643, 647, 648, 655, 666, 689, 778, 843, 862, 889, 895, 902, 903, 938, 953, 956, 1040, 1082, 1111, 1194, 1198, 1199, 1206, 1217, 1248, 1262], "workaround": 313, "workbook": [36, 134, 140, 313], "working_with_conditional_format": [36, 313], "working_with_sparklin": [36, 313], "worksheet": [36, 134, 140, 313], "world": [1, 20, 632, 653, 660, 661, 662, 895, 1089, 1183, 1204, 1211, 1212, 1213, 1273, 1276], "wors": [849, 889], "worth": [499, 1082], "worthwhil": [152, 154], "would": [90, 129, 130, 143, 173, 271, 275, 313, 316, 338, 349, 396, 504, 535, 536, 545, 574, 584, 704, 706, 778, 913, 924, 974, 1087, 1141, 1243, 1262, 1267, 1287], "wrap": [74, 123, 374, 473, 535, 778, 947, 1262], "wrap_numer": [374, 778, 947, 1262], "wrapper": [54, 800, 889], "writabl": [31, 33, 37, 38, 39, 40, 41, 253, 271, 313, 1243, 1262], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 179, 313, 378, 551, 778, 825, 847, 889, 895, 956, 1262], "write_ascii_frame_to_stdout": 168, "write_avro": 313, "write_clipboard": [128, 313], "write_csv": [32, 130, 143, 313], "write_databas": 313, "write_delta": 313, "write_excel": 313, "write_ipc": [135, 313], "write_ipc_stream": 313, "write_json": 313, "write_ndjson": [39, 313], "write_parquet": 313, "write_t": [41, 313], "write_to_dataset": [41, 313], "writeabl": [271, 313, 1243, 1262], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 253, 313, 548, 844, 889], "ww": [1284, 1291], "www": 678, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 134, 140, 143, 156, 157, 159, 172, 190, 208, 211, 213, 218, 238, 247, 248, 277, 280, 281, 313, 316, 322, 324, 326, 345, 350, 370, 383, 390, 441, 442, 457, 462, 464, 466, 487, 494, 506, 532, 534, 535, 536, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 573, 579, 587, 588, 589, 593, 621, 624, 657, 679, 680, 685, 688, 695, 697, 699, 702, 703, 708, 714, 715, 717, 728, 738, 739, 742, 744, 747, 752, 757, 762, 768, 778, 821, 827, 848, 850, 857, 889, 894, 895, 925, 950, 962, 1037, 1118, 1145, 1146, 1173, 1176, 1208, 1241, 1245, 1246, 1262, 1267, 1274, 1275, 1278, 1283, 1289, 1291], "x00": [366, 367, 368, 369, 371, 634, 940, 941, 942, 943, 945, 1185], "x00fvalu": [253, 313], "x07": 370, "x1": 370, "x80": 370, "x81": [548, 844, 889], "x82": [253, 313], "x83": [253, 313, 370], "x88": 370, "x8e": 370, "x99": 370, "x_": [444, 778, 1029, 1262], "x_0": [281, 313, 443, 444, 445, 446, 778, 1028, 1029, 1030, 1031, 1262], "x_1": [281, 313, 444, 778, 1029, 1262], "x_2": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "x_i": [444, 778, 1029, 1262], "x_invers": [579, 778], "x_pow_8": 1283, "x_round": 1283, "x_round_1": 1283, "x_squar": [579, 778], "x_t": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "x_uniqu": [556, 778], "x_y": [350, 506], "xa1cagg": 548, "xa1csum": 548, "xa1fcolumncfoolpartition_bi": 548, "xa1fwindow": 548, "xa1gcolumn": [253, 313, 844, 889], "xa1kmapfunct": [844, 889], "xa1mdataframescan": [844, 889], "xa2einput": [844, 889], "xa4bdf": [844, 889], "xa4d": [844, 889], "xa4dnamecfoohdatatypeeint64lbit_set": [253, 313], "xa4hfunct": 548, "xb": 370, "xb9neq": 370, "xbd": 370, "xc14": 370, "xd3": 370, "xdist": 1292, "xee": 370, "xf4v": 370, "xf9": 370, "xfb": 370, "xff": [366, 367, 368, 369, 371, 634, 940, 941, 942, 943, 945, 1185], "xi": [639, 1190], "xl": 134, "xlog2": [555, 579, 778], "xlsb": 134, "xlsx": [36, 134, 313], "xlsx2csv": [134, 151], "xlsxwriter": [36, 151, 313], "xor": 778, "xor_xi": [695, 778], "xx": [10, 48, 50, 163, 183, 260, 313, 804, 889, 895, 1278, 1284, 1291], "xxx": 678, "xy": [48, 50], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 322, 633, 639, 778, 1184, 1190, 1239, 1262], "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 172, 190, 211, 213, 218, 238, 247, 248, 277, 280, 281, 313, 316, 322, 324, 326, 345, 350, 370, 424, 427, 441, 442, 462, 464, 487, 494, 506, 534, 536, 556, 558, 560, 562, 564, 565, 568, 569, 573, 587, 588, 589, 593, 665, 667, 668, 679, 688, 695, 697, 699, 702, 703, 717, 724, 738, 742, 744, 747, 757, 762, 778, 821, 848, 850, 857, 889, 894, 895, 925, 950, 1006, 1009, 1145, 1146, 1216, 1218, 1219, 1262, 1267, 1278, 1284, 1285, 1291], "y_": [443, 444, 445, 446, 778, 1028, 1029, 1030, 1031, 1262], "y_0": [281, 313, 443, 444, 445, 446, 778, 1028, 1029, 1030, 1031, 1262], "y_1": [281, 313], "y_i": [444, 778, 1029, 1262], "y_mul": 679, "y_t": [443, 445, 446, 778, 1028, 1030, 1031, 1262], "y_uniqu": [556, 778], "ya": [655, 1206], "ya29": 145, "year": [133, 144, 204, 219, 245, 260, 283, 313, 396, 408, 409, 418, 419, 422, 435, 436, 594, 597, 599, 601, 603, 605, 608, 610, 612, 706, 718, 719, 720, 721, 722, 723, 765, 766, 778, 817, 822, 840, 889, 895, 974, 986, 987, 1000, 1001, 1004, 1017, 1018, 1285], "yellow": [313, 317, 366, 367, 368, 369, 371], "yield": [120, 122, 129, 130, 131, 143, 190, 192, 215, 277, 313, 457, 535, 574, 778, 889, 1027, 1034, 1262], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 175, 192, 195, 204, 215, 216, 219, 223, 234, 238, 245, 246, 247, 248, 260, 267, 270, 276, 277, 278, 280, 299, 313, 316, 372, 373, 396, 415, 416, 418, 421, 424, 427, 447, 453, 473, 499, 527, 535, 536, 579, 586, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 620, 632, 647, 651, 652, 653, 673, 676, 686, 687, 706, 714, 719, 722, 724, 728, 740, 750, 753, 757, 769, 778, 794, 800, 807, 813, 817, 818, 822, 826, 840, 847, 850, 854, 855, 857, 873, 889, 893, 895, 946, 974, 997, 998, 1003, 1006, 1009, 1034, 1054, 1082, 1118, 1137, 1143, 1183, 1198, 1202, 1203, 1204, 1224, 1241, 1247, 1262, 1267, 1272, 1277, 1292], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 216, 223, 247, 248, 251, 267, 287, 292, 299, 313, 316, 401, 444, 459, 536, 640, 665, 667, 668, 675, 740, 778, 818, 826, 827, 842, 861, 866, 873, 889, 979, 1029, 1118, 1191, 1216, 1218, 1219, 1226, 1262, 1267, 1292], "yy": [10, 48, 50, 163, 183, 260, 313, 804, 889, 895, 1278, 1284, 1291], "yyi": 678, "yyyi": [36, 313], "yz": [48, 50], "z": [36, 55, 76, 123, 157, 190, 211, 213, 218, 247, 248, 277, 280, 281, 313, 322, 324, 326, 466, 494, 536, 558, 560, 562, 564, 565, 573, 587, 588, 589, 632, 639, 641, 653, 665, 668, 697, 699, 717, 742, 744, 747, 753, 757, 762, 778, 821, 848, 850, 857, 889, 894, 895, 1037, 1145, 1146, 1183, 1190, 1192, 1204, 1216, 1219, 1262, 1274, 1278, 1289, 1291], "z_0": [281, 313], "z_1": [281, 313], "zap": 895, "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 172, 194, 204, 216, 220, 246, 260, 265, 271, 272, 313, 452, 527, 532, 616, 624, 675, 688, 778, 797, 812, 817, 823, 889, 955, 1037, 1110, 1176, 1226, 1237, 1243, 1244, 1262, 1283, 1289], "zero_copy_onli": [1243, 1262], "zfill": [650, 695, 778, 1201], "zip": 1292, "zip_with": [197, 313, 1262], "zone": [62, 159, 160, 163, 397, 401, 421, 444, 668, 721, 722, 723, 778, 895, 975, 979, 1003, 1029, 1219, 1262], "zoneinfo": [62, 895], "zoom": [36, 313], "zstd": [37, 38, 41, 43, 45, 313, 889], "zz": [163, 183, 260, 313, 804, 889, 1278, 1284, 1291], "zzz": 678, "\u03bc": [123, 176, 204, 216, 245, 247, 248, 267, 283, 313, 397, 398, 400, 401, 402, 403, 405, 407, 410, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 594, 597, 599, 601, 603, 605, 608, 610, 612, 665, 668, 721, 722, 723, 724, 730, 778, 796, 817, 840, 889, 895, 975, 976, 978, 979, 980, 981, 983, 984, 985, 990, 991, 995, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1216, 1219, 1284], "\u0441\u0438\u043d\u0438\u0439": 1284, "\u0967\u096f\u096f\u096f": 895, "\u0968\u0966\u096d\u096d": 895, "\u4eac\u90fd": 895, "\u5927\u962a": 895, "\u6771\u4eac": [647, 648, 895, 1198, 1199], "\u90fd\u5e02": 895, "\ud835\udf0b": 1283}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1278, 1290], "IF": 1281, "__array__": [170, 897], "__arrow_c_stream__": [171, 898], "__dataframe__": 172, "__getitem__": [173, 899], "__iter__": 291, "ab": [321, 900, 1283], "aco": 1286, "acosd": 1286, "add": 322, "add_business_dai": [396, 974], "agg": [292, 866], "agg_group": 323, "aggreg": [169, 320, 792, 896, 1279], "alia": [324, 901], "alias": [1279, 1283, 1284], "align_fram": 47, "all": [293, 325, 341, 490, 696, 867, 902, 916, 1073, 1290], "all_horizont": 697, "and_": 326, "ani": [327, 342, 491, 698, 903, 917, 1074], "any_horizont": 699, "api": [1, 48, 49, 50, 51, 790, 1289], "append": [328, 904], "approx_n_uniqu": [174, 329, 700, 793], "arang": 701, "arcco": [330, 905], "arccosh": [331, 906], "arcsin": [332, 907], "arcsinh": [333, 908], "arctan": [334, 909], "arctan2": 702, "arctan2d": 703, "arctanh": [335, 910], "arg_max": [336, 343, 492, 911, 918, 1075], "arg_min": [337, 344, 493, 912, 919, 1076], "arg_sort": [338, 913], "arg_sort_bi": 704, "arg_tru": [339, 914], "arg_uniqu": [340, 915], "arg_wher": 705, "arr": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939], "arrai": [56, 770, 1254, 1280], "array_agg": 1280, "array_contain": 1280, "array_get": 1280, "array_length": 1280, "array_low": 1280, "array_mean": 1280, "array_revers": 1280, "array_sum": 1280, "array_to_str": 1280, "array_uniqu": 1280, "array_upp": 1280, "asin": 1286, "asind": 1286, "assert": 1292, "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "atan": 1286, "atan2": 1286, "atan2d": 1286, "atand": 1286, "attribut": [308, 885, 1255], "avail": 1, "avg": 1279, "avro": 791, "backward_fil": 365, "base_utc_offset": [397, 975], "batched_read": 125, "batchedcsvread": 125, "bin": [366, 367, 368, 369, 370, 371, 940, 941, 942, 943, 944, 945], "binari": [57, 771, 784, 1256], "bit_length": 1284, "boolean": [58, 772, 1257], "bottom_k": [175, 372, 794, 946], "bottom_k_bi": 373, "build_info": 52, "business_day_count": 706, "cach": 795, "cancel": 882, "cast": [176, 374, 796, 947, 1287], "cast_time_unit": [398, 976], "cat": [375, 948, 949, 950, 951], "categor": 59, "categori": [773, 1258], "categoricalremappingwarn": 86, "cbrt": [376, 952, 1283], "ceil": [377, 953, 1283], "centuri": [399, 977], "chronoformatwarn": 87, "chunk_length": 954, "claus": 1278, "clear": [177, 797, 955], "clip": [378, 956], "clipboard": 791, "clone": [178, 798, 957], "co": [379, 958, 1286], "coalesc": [707, 1281], "col": 774, "collect": 799, "collect_al": 53, "collect_all_async": 54, "collect_async": 800, "collect_schema": [179, 801], "column": [156, 157, 180, 775, 802], "columnnotfounderror": 88, "combin": [400, 978], "comparison": [784, 1266], "comput": [309, 776, 1259], "computeerror": 89, "concat": [55, 494, 630, 1077, 1181, 1284], "concat_list": 708, "concat_str": 709, "concat_w": 1284, "condit": 1281, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "conjunct": 784, "contain": [345, 366, 495, 631, 920, 940, 1078, 1182], "contains_ani": [632, 1183], "context": 168, "convers": 789, "convert_time_zon": [401, 979], "corr": [181, 710], "cosd": 1286, "cosh": [380, 959], "cot": [381, 960, 1286], "cotd": 1286, "count": [182, 294, 382, 711, 803, 868, 961, 1279], "count_match": [346, 496, 633, 921, 1079, 1184], "cov": 712, "creat": 1291, "create_list_strategi": 158, "csv": [125, 791], "cum_count": [383, 713, 962], "cum_fold": 714, "cum_max": [384, 963], "cum_min": [385, 964], "cum_prod": [386, 965], "cum_reduc": 715, "cum_sum": [387, 716, 966], "cum_sum_horizont": 717, "cumulative_ev": [388, 967], "customufuncwarn": 90, "cut": [389, 968], "dai": [404, 982], "data": 318, "databas": 791, "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313], "dataorientationwarn": 91, "dataset": 791, "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 318], "date": [61, 402, 718, 980, 1284], "date_part": 1285, "date_rang": [719, 720], "datetim": [62, 403, 721, 981], "datetime_rang": [722, 723], "decim": 63, "decod": [367, 634, 941, 1185], "decor": 168, "degre": [390, 1286], "delta": 791, "describ": [183, 804, 969], "descript": [310, 886, 1260], "deseri": [184, 391, 805], "diff": [392, 497, 970, 1080], "disable_string_cach": 84, "distinct": 1278, "div": 1283, "document": 1289, "dot": [393, 971], "drop": [185, 806, 1291], "drop_in_plac": 186, "drop_nan": [394, 972], "drop_nul": [187, 395, 498, 807, 973, 1081], "dst_offset": [405, 983], "dt": [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "dtype": [160, 188, 808, 1022], "duplicateerror": 92, "durat": [64, 724], "element": 725, "enable_string_cach": 85, "encod": [368, 635, 942, 1186], "ends_with": [369, 636, 943, 1187, 1284], "entropi": [440, 1023], "enum": 65, "epoch": [406, 984], "eq": [441, 540, 1024], "eq_miss": [442, 1025], "equal": [189, 1026], "error": 319, "estimated_s": [190, 1027], "eval": [499, 1082], "ewm_mean": [443, 1028], "ewm_mean_bi": [444, 1029], "ewm_std": [445, 1030], "ewm_var": [446, 1031], "exampl": [1, 895, 1292], "excel": 791, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 319, 1290], "exclud": [447, 726], "execut": 1271, "execute_glob": 1272, "exp": [448, 1032, 1283], "explain": [809, 1291], "explod": [191, 347, 449, 500, 637, 810, 922, 1033, 1083, 1188], "export": [311, 1261], "expr": [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695], "express": [778, 1289], "extend": [1, 192, 1034], "extend_const": [450, 1035], "extract": [638, 1189, 1285], "extract_al": [639, 1190], "extract_group": [640, 1191], "extract_mani": [641, 1192], "feather": 791, "fetch": 883, "fetch_block": 884, "field": [676, 1227, 1228], "fill_nan": [193, 451, 811, 1036], "fill_nul": [194, 452, 812, 1037], "filter": [195, 453, 813, 1038], "find": [642, 1193], "first": [295, 348, 454, 501, 727, 814, 869, 923, 1084, 1279], "flag": [196, 1039], "flatten": 455, "float32": 66, "float64": 67, "floor": [456, 1040, 1283], "floordiv": 457, "fold": [197, 728], "format": 729, "forward_fil": 458, "frame": 1289, "from": 1278, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_epoch": 730, "from_json": 459, "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "function": [1, 777, 789, 895, 1282], "gather": [460, 502, 1041, 1085], "gather_everi": [198, 461, 503, 815, 1042, 1086], "ge": [462, 1043], "get": [349, 463, 504, 924, 1087], "get_categori": [375, 948], "get_chunk": 1044, "get_column": [199, 201], "get_column_index": 200, "get_index_typ": 124, "glimps": 202, "global": 1289, "greatest": 1281, "group": [731, 1278], "group_bi": [203, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 816, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881], "group_by_dynam": [204, 817], "groupbi": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 887], "gt": [464, 1045], "has_multiple_output": 541, "has_nul": [465, 1046], "has_valid": 1047, "hash": [466, 1048], "hash_row": 205, "have": 1278, "head": [206, 296, 467, 505, 643, 732, 818, 870, 1049, 1088, 1194], "height": 207, "helper": 1292, "hist": [468, 1050], "hour": [407, 985], "hstack": 208, "iceberg": 791, "ifnul": 1281, "implod": [469, 733, 1051], "import": 895, "in_process": [882, 883, 884], "index": 0, "initcap": 1284, "inprocessqueri": [882, 883, 884, 888], "input": 791, "insert_column": 209, "inspect": [470, 819], "int16": 68, "int32": 69, "int64": 70, "int8": 71, "int_rang": [734, 735], "interfac": 1288, "interpol": [210, 471, 820, 1052], "interpolate_bi": [472, 1053], "intersect": 1290, "introduct": 1289, "invalidoperationerror": 93, "io": 125, "ipc": 791, "is_between": [473, 1054], "is_column_select": 542, "is_dupl": [211, 474, 1055], "is_empti": [212, 1056], "is_finit": [475, 1057], "is_first_distinct": [476, 1058], "is_in": [477, 1059], "is_infinit": [478, 1060], "is_last_distinct": [479, 1061], "is_leap_year": [408, 986], "is_loc": 949, "is_nan": [480, 1062], "is_not_nan": [481, 1063], "is_not_nul": [482, 1064], "is_nul": [483, 1065], "is_regex_project": 543, "is_sort": 1066, "is_uniqu": [213, 484, 1067], "iso_year": [409, 987], "item": [214, 1068], "iter_column": 215, "iter_row": 216, "iter_slic": 217, "join": [218, 350, 506, 644, 821, 925, 1089, 1195, 1278], "join_asof": [219, 822], "join_wher": [220, 823], "json": 791, "json_decod": [645, 1196], "json_encod": [677, 1229], "json_norm": 126, "json_path_match": [646, 1197], "keep": 557, "kurtosi": [485, 1069], "lake": 791, "last": [297, 351, 486, 507, 736, 824, 871, 926, 1090, 1279], "lazi": [221, 825], "lazyfram": [42, 43, 44, 45, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 889], "lazygroupbi": [866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881], "le": [487, 1070], "least": 1281, "left": 1284, "len": [298, 488, 508, 737, 872, 1071, 1091], "len_byt": [647, 1198], "len_char": [648, 1199], "length": 1284, "limit": [222, 489, 826, 1072, 1278], "list": [72, 161, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 779, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1263], "lit": 738, "ln": 1283, "load": [2, 168], "load_from_fil": 3, "load_profil": 162, "log": [530, 1113, 1283], "log10": [531, 1114, 1283], "log1p": [532, 1115, 1283], "log2": 1283, "lower": 1284, "lower_bound": [533, 1116], "lt": [534, 1117], "ltrim": 1284, "manag": 168, "manipul": [315, 782, 891, 1265], "map": 558, "map_batch": [535, 739, 827], "map_el": [536, 1118], "map_field": 559, "map_group": [299, 740, 873], "map_row": 223, "mapwithoutreturndtypewarn": 94, "math": 1283, "max": [224, 300, 352, 509, 537, 741, 828, 874, 927, 988, 1092, 1119, 1279], "max_horizont": [225, 742], "mean": [226, 301, 510, 538, 743, 829, 875, 989, 1093, 1120], "mean_horizont": [227, 744], "median": [228, 302, 353, 511, 539, 745, 830, 876, 928, 990, 1094, 1121, 1279], "melt": [229, 831], "merge_sort": [230, 832], "meta": [540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 780], "metadata": 892, "method": 1289, "microsecond": [410, 991], "millennium": [411, 992], "millisecond": [412, 993], "min": [231, 303, 354, 512, 552, 746, 833, 877, 929, 994, 1095, 1122, 1279], "min_horizont": [232, 747], "minut": [413, 995], "miscellan": [314, 781, 789, 890, 1264], "mod": [553, 1283], "mode": [554, 1123], "moduleupgraderequirederror": 95, "month": [414, 996], "month_end": [415, 997], "month_start": [416, 998], "mul": 555, "n_chunk": [233, 1124], "n_uniqu": [234, 304, 355, 513, 556, 748, 878, 930, 1096, 1125], "name": [557, 558, 559, 560, 561, 562, 563, 564, 565, 775, 783, 1126, 1290], "nan_max": [566, 1127], "nan_min": [567, 1128], "nanosecond": [417, 999], "ne": [544, 568, 1129], "ne_miss": [569, 1130], "neg": 570, "nest": 318, "new": 1, "new_from_index": 1131, "next_batch": 125, "nodataerror": 96, "norowsreturnederror": 97, "not_": [571, 1132], "nth": 749, "null": 73, "null_count": [235, 572, 834, 1133], "nullif": 1281, "numer": [318, 784, 1266], "object": 74, "octet_length": 1284, "od": 791, "offset": 1278, "offset_bi": [418, 1000], "ones": 750, "oper": [784, 895, 1266, 1290, 1291], "option": 168, "or_": 573, "order": 1278, "ordinal_dai": [419, 1001], "other": 318, "outofboundserror": 98, "output": 791, "output_nam": 545, "over": 574, "pad_end": [649, 1200], "pad_start": [650, 1201], "panic": 319, "panicexcept": 99, "parallel": 789, "parametercollisionerror": 100, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1292], "parquet": 791, "partition_bi": 236, "pct_chang": [575, 1134], "peak_max": [576, 1135], "peak_min": [577, 1136], "performancewarn": 101, "pi": 1283, "pipe": [237, 578, 835], "pivot": 238, "plot": [316, 1267], "plugin": 893, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1292], "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "pop": 546, "pow": [579, 1137, 1283], "prefix": 560, "prefix_field": 561, "product": [239, 580, 1138], "profil": [836, 1292], "provid": 1, "pyarrow": 791, "python": [790, 1289], "qcut": [581, 1139], "quantil": [240, 305, 582, 751, 837, 879, 1140], "quarter": [420, 1002], "queri": 1289, "radian": [583, 1286], "random": 789, "rank": [584, 1141], "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "rechunk": [241, 585, 1142], "reduc": 752, "refer": 790, "regexp_lik": 1284, "regist": 1273, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_glob": 1274, "register_lazyframe_namespac": 50, "register_mani": 1275, "register_series_namespac": 51, "registr": 1, "reinterpret": [586, 1143], "renam": [242, 838, 1144], "rename_field": [678, 1230], "repeat": 753, "repeat_bi": 587, "replac": [588, 651, 1145, 1202, 1284], "replace_al": [652, 1203], "replace_column": 243, "replace_mani": [653, 1204], "replace_strict": [589, 1146], "replace_time_zon": [421, 1003], "reshap": [590, 1147], "restore_default": 4, "revers": [244, 356, 514, 591, 654, 839, 931, 1097, 1148, 1205, 1284], "right": 1284, "rle": [592, 1149], "rle_id": [593, 1150], "roll": [245, 594, 840], "rolling_corr": 754, "rolling_cov": 755, "rolling_map": [595, 1151], "rolling_max": [596, 1152], "rolling_max_bi": 597, "rolling_mean": [598, 1153], "rolling_mean_bi": 599, "rolling_median": [600, 1154], "rolling_median_bi": 601, "rolling_min": [602, 1155], "rolling_min_bi": 603, "rolling_quantil": [604, 1156], "rolling_quantile_bi": 605, "rolling_skew": [606, 1157], "rolling_std": [607, 1158], "rolling_std_bi": 608, "rolling_sum": [609, 1159], "rolling_sum_bi": 610, "rolling_var": [611, 1160], "rolling_var_bi": 612, "root_nam": 547, "round": [422, 613, 1004, 1161, 1283], "round_sig_fig": [614, 1162], "row": [246, 247], "rows_by_kei": 248, "rowserror": 105, "rtrim": 1284, "sampl": [249, 515, 615, 1098, 1163], "save": [5, 168], "save_to_fil": 6, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "scatter": 1164, "schema": [250, 841, 894, 1231], "schemaerror": 108, "schemafieldnotfounderror": 109, "search_sort": [616, 1165], "second": [423, 1005], "select": [251, 315, 756, 782, 842, 891, 1265, 1278], "select_seq": [252, 843], "selector": 895, "seri": [163, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262], "serial": [253, 314, 548, 844, 890], "set": [895, 1166, 1290], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [516, 1099], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [517, 1100], "set_profil": 164, "set_random_se": 150, "set_sort": [254, 617, 845, 1167], "set_streaming_chunk_s": 14, "set_symmetric_differ": [518, 1101], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [519, 1102], "set_verbos": 29, "shape": [255, 1168], "shapeerror": 110, "shift": [256, 357, 520, 618, 846, 932, 1103, 1169], "show": 1291, "show_graph": 847, "show_vers": 151, "shrink_dtyp": [619, 1170], "shrink_to_fit": [257, 1171], "shuffl": [620, 1172], "sign": [621, 1173, 1283], "sin": [622, 1174, 1286], "sind": 1286, "sinh": [623, 1175], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "size": [370, 944], "skew": [624, 1176], "slice": [258, 521, 625, 655, 848, 1104, 1177, 1206], "sort": [259, 358, 522, 626, 849, 933, 1105, 1178], "sort_bi": 627, "split": [656, 1207], "split_exact": [657, 1208], "splitn": [658, 1209], "sql": [260, 757, 850, 1278, 1282, 1288, 1289], "sql_expr": 758, "sqlcontext": [1271, 1272, 1273, 1274, 1275, 1276, 1277, 1289], "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "sqrt": [628, 1179, 1283], "starts_with": [371, 659, 945, 1210, 1284], "state": [30, 168], "std": [261, 359, 523, 629, 759, 851, 934, 1106, 1180], "stddev": 1279, "str": [630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226], "strategi": 1292, "strftime": [424, 1006, 1285], "string": [75, 318, 785, 1268, 1284], "stringcach": [46, 789], "stringcachemismatcherror": 111, "strip_char": [660, 1211], "strip_chars_end": [661, 1212], "strip_chars_start": [662, 1213], "strip_prefix": [663, 1214], "strip_suffix": [664, 1215], "strpo": 1284, "strptime": [665, 1216, 1284], "struct": [76, 676, 677, 678, 679, 760, 786, 1227, 1228, 1229, 1230, 1231, 1232, 1269], "structfieldnotfounderror": 112, "style": 317, "sub": 680, "substr": 1284, "suffix": 562, "suffix_field": 563, "sum": [262, 306, 360, 524, 681, 761, 852, 880, 935, 1107, 1233, 1279], "sum_horizont": [263, 762], "tabl": [1276, 1291], "tail": [264, 307, 525, 666, 682, 763, 853, 881, 1108, 1217, 1234], "tan": [683, 1235, 1286], "tand": 1286, "tanh": [684, 1236], "tempor": [318, 787, 1270, 1285], "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1292], "thread_pool_s": 165, "threadpool_s": 166, "time": [77, 425, 764, 1007], "time_rang": [765, 766], "timestamp": [426, 1008, 1284], "to_arrai": [526, 1109], "to_arrow": [265, 1237], "to_dat": [667, 1218], "to_datetim": [668, 1219], "to_decim": [669, 1220], "to_dict": [266, 267], "to_dummi": [268, 1238], "to_fram": 1239, "to_init_repr": [269, 1240], "to_integ": [670, 1221], "to_jax": [270, 1241], "to_list": [361, 936, 1242], "to_loc": 950, "to_lowercas": [564, 671, 1222], "to_numpi": [271, 1243], "to_panda": [272, 1244], "to_phys": [685, 1245], "to_seri": 273, "to_str": [427, 1009], "to_struct": [274, 362, 527, 937, 1110], "to_tim": [672, 1223], "to_titlecas": [673, 1224], "to_torch": [275, 1246], "to_uppercas": [565, 674, 1225], "toomanyrowsreturnederror": 113, "top_k": [276, 686, 854, 1247], "top_k_bi": 687, "total_dai": [428, 1010], "total_hour": [429, 1011], "total_microsecond": [430, 1012], "total_millisecond": [431, 1013], "total_minut": [432, 1014], "total_nanosecond": [433, 1015], "total_second": [434, 1016], "transpos": 277, "tree_format": 549, "trigonometri": 1286, "truediv": 688, "truncat": [435, 1017, 1291], "try_cast": 1287, "type": [318, 1287], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "undo_alias": 550, "union": 1290, "uniqu": [278, 363, 528, 689, 855, 938, 1111, 1248], "unique_count": [690, 1249], "unknown": 82, "unnest": [279, 856, 1232, 1280, 1291], "unpivot": [280, 857], "unregist": 1277, "unstablewarn": 114, "unstack": 281, "unsuitablesqlerror": 115, "updat": [282, 858], "upper": 1284, "upper_bound": [691, 1250], "upsampl": 283, "us": 168, "uses_lexical_ord": 951, "using_string_cach": 167, "utf8": 83, "value_count": [692, 1251], "var": [284, 364, 529, 693, 767, 859, 939, 1112, 1252], "varianc": 1279, "vstack": 285, "warn": 319, "week": [436, 1018], "weekdai": [437, 1019], "when": 768, "where": [694, 1278], "width": [286, 860], "window": 788, "with_column": [287, 861], "with_columns_seq": [288, 862], "with_context": 863, "with_field": 679, "with_row_count": [289, 864], "with_row_index": [290, 865], "with_time_unit": [438, 1020], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 551], "write_ndjson": 40, "write_parquet": 41, "xor": 695, "year": [439, 1021], "zero": 769, "zfill": [675, 1226], "zip_with": 1253}})