Search.setIndex({"alltitles": {"ABS": [[1281, "abs"]], "ACOS": [[1284, "acos"]], "ACOSD": [[1284, "acosd"]], "ARRAY_AGG": [[1278, "array-agg"]], "ARRAY_CONTAINS": [[1278, "array-contains"]], "ARRAY_GET": [[1278, "array-get"]], "ARRAY_LENGTH": [[1278, "array-length"]], "ARRAY_LOWER": [[1278, "array-lower"]], "ARRAY_MEAN": [[1278, "array-mean"]], "ARRAY_REVERSE": [[1278, "array-reverse"]], "ARRAY_SUM": [[1278, "array-sum"]], "ARRAY_TO_STRING": [[1278, "array-to-string"]], "ARRAY_UNIQUE": [[1278, "array-unique"]], "ARRAY_UPPER": [[1278, "array-upper"]], "ASIN": [[1284, "asin"]], "ASIND": [[1284, "asind"]], "ATAN": [[1284, "atan"]], "ATAN2": [[1284, "atan2"]], "ATAN2D": [[1284, "atan2d"]], "ATAND": [[1284, "atand"]], "AVG": [[1277, "avg"]], "Aggregate": [[1277, "aggregate"]], "Aggregation": [[169, "aggregation"], [319, "aggregation"], [791, "aggregation"], [894, "aggregation"]], "Aliases": [[1277, null], [1277, null], [1281, null], [1281, null], [1282, null], [1282, null]], "Array": [[769, "array"], [1252, "array"], [1278, "array"]], "Asserts": [[1290, "asserts"]], "Attributes": [[307, "attributes"], [883, "attributes"], [1253, "attributes"]], "Available registrations": [[1, "available-registrations"]], "Avro": [[790, "avro"]], "BIT_LENGTH": [[1282, "bit-length"]], "Binary": [[770, "binary"], [783, "binary"], [1254, "binary"]], "Boolean": [[771, "boolean"], [1255, "boolean"]], "CAST": [[1285, "cast"]], "CBRT": [[1281, "cbrt"]], "CEIL": [[1281, "ceil"]], "COALESCE": [[1279, "coalesce"]], "CONCAT": [[1282, "concat"]], "CONCAT_WS": [[1282, "concat-ws"]], "COS": [[1284, "cos"]], "COSD": [[1284, "cosd"]], "COT": [[1284, "cot"]], "COTD": [[1284, "cotd"]], "COUNT": [[1277, "count"]], "CREATE TABLE": [[1289, "create-table"]], "CSV": [[790, "csv"]], "Categories": [[772, "categories"], [1256, "categories"]], "Clipboard": [[790, "clipboard"]], "Columns / names": [[774, "columns-names"]], "Comparison": [[783, "comparison"], [1264, "comparison"]], "Computation": [[308, "computation"], [775, "computation"], [1257, "computation"]], "Conditional": [[1279, "conditional"]], "Config": [[168, "config"]], "Config load, save, state": [[168, "config-load-save-state"]], "Config options": [[168, "config-options"]], "Conjunction": [[783, "conjunction"]], "Conversion": [[788, "conversion"]], "DATE": [[1282, "date"]], "DATE_PART": [[1283, "date-part"]], "DEGREES": [[1284, "degrees"]], "DISTINCT": [[1276, "distinct"]], "DIV": [[1281, "div"]], "DROP TABLES": [[1289, "drop-tables"]], "Data types": [[317, "data-types"]], "DataFrame": [[312, "dataframe"]], "DataType": [[317, "datatype"]], "Database": [[790, "database"]], "Delta Lake": [[790, "delta-lake"]], "Descriptive": [[309, "descriptive"], [884, "descriptive"], [1258, "descriptive"]], "Documentation": [[1287, null], [1287, null], [1287, null]], "ENDS_WITH": [[1282, "ends-with"]], "EXCEPT": [[1288, "except"]], "EXP": [[1281, "exp"]], "EXPLAIN": [[1289, "explain"]], "EXTRACT": [[1283, "extract"]], "Errors": [[318, "errors"]], "Examples": [[1, "examples"], [893, "examples"], [1290, "examples"]], "Excel / ODS": [[790, "excel-ods"]], "Exceptions": [[318, "exceptions"]], "Export": [[310, "export"], [1259, "export"]], "Expression SQL": [[1287, "expression-sql"]], "Expressions": [[777, "expressions"]], "Extending the API": [[1, "extending-the-api"]], "FIRST": [[1277, "first"]], "FLOOR": [[1281, "floor"]], "FROM": [[1276, "from"]], "Feather / IPC": [[790, "feather-ipc"]], "Frame SQL": [[1287, "frame-sql"]], "Functions": [[776, "functions"], [788, "functions"], [893, "functions"]], "GREATEST": [[1279, "greatest"]], "GROUP BY": [[1276, "group-by"]], "Global SQL": [[1287, "global-sql"]], "GroupBy": [[311, "groupby"], [885, "groupby"]], "HAVING": [[1276, "having"]], "IF": [[1279, "if"]], "IFNULL": [[1279, "ifnull"]], "INITCAP": [[1282, "initcap"]], "INTERSECT": [[1288, "intersect"]], "Iceberg": [[790, "iceberg"]], "Importing": [[893, "importing"]], "InProcessQuery": [[886, "inprocessquery"]], "Index": [[0, "index"]], "Input/output": [[790, "input-output"]], "Introduction": [[1287, "introduction"]], "JOIN": [[1276, "join"]], "JSON": [[790, "json"]], "LAST": [[1277, "last"]], "LEAST": [[1279, "least"]], "LEFT": [[1282, "left"]], "LENGTH": [[1282, "length"]], "LIMIT": [[1276, "limit"]], "LN": [[1281, "ln"]], "LOG": [[1281, "log"]], "LOG10": [[1281, "log10"]], "LOG1P": [[1281, "log1p"]], "LOG2": [[1281, "log2"]], "LOWER": [[1282, "lower"]], "LTRIM": [[1282, "ltrim"]], "LazyFrame": [[887, "lazyframe"]], "List": [[778, "list"], [1261, "list"]], "MAX": [[1277, "max"]], "MEDIAN": [[1277, "median"]], "MIN": [[1277, "min"]], "MOD": [[1281, "mod"]], "Manipulation/selection": [[314, "manipulation-selection"], [781, "manipulation-selection"], [889, "manipulation-selection"], [1263, "manipulation-selection"]], "Math": [[1281, "math"]], "Meta": [[779, "meta"]], "Metadata": [[890, "metadata"]], "Methods": [[1287, "methods"]], "Miscellaneous": [[313, "miscellaneous"], [780, "miscellaneous"], [788, "miscellaneous"], [888, "miscellaneous"], [1262, "miscellaneous"]], "NULLIF": [[1279, "nullif"]], "Name": [[782, "name"]], "Nested": [[317, "nested"]], "Numeric": [[317, "numeric"], [783, "numeric"], [1264, "numeric"]], "OCTET_LENGTH": [[1282, "octet-length"]], "OFFSET": [[1276, "offset"]], "ORDER BY": [[1276, "order-by"]], "Operators": [[783, "operators"], [1264, "operators"]], "Other": [[317, "other"]], "PI": [[1281, "pi"]], "POW": [[1281, "pow"]], "Panic": [[318, "panic"]], "Parallelization": [[788, "parallelization"]], "Parametric testing": [[1290, "parametric-testing"]], "Parquet": [[790, "parquet"]], "Plot": [[315, "plot"], [1265, "plot"]], "Plugins": [[891, "plugins"]], "Polars strategies": [[1290, "polars-strategies"]], "Profiles": [[1290, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[790, "pyarrow-datasets"]], "Python API": [[1287, "python-api"]], "Python API reference": [[789, "python-api-reference"]], "Querying": [[1287, "querying"]], "RADIANS": [[1284, "radians"]], "REGEXP_LIKE": [[1282, "regexp-like"]], "REPLACE": [[1282, "replace"]], "REVERSE": [[1282, "reverse"]], "RIGHT": [[1282, "right"]], "ROUND": [[1281, "round"]], "RTRIM": [[1282, "rtrim"]], "Random": [[788, "random"]], "SELECT": [[1276, "select"]], "SHOW TABLES": [[1289, "show-tables"]], "SIGN": [[1281, "sign"]], "SIN": [[1284, "sin"]], "SIND": [[1284, "sind"]], "SQL Clauses": [[1276, "sql-clauses"]], "SQL Functions": [[1280, "sql-functions"]], "SQL Interface": [[1286, "sql-interface"]], "SQLContext": [[1287, "sqlcontext"]], "SQRT": [[1281, "sqrt"]], "STARTS_WITH": [[1282, "starts-with"]], "STDDEV": [[1277, "stddev"]], "STRFTIME": [[1283, "strftime"]], "STRPOS": [[1282, "strpos"]], "STRPTIME": [[1282, "strptime"]], "SUBSTRING": [[1282, "substring"]], "SUM": [[1277, "sum"]], "Schema": [[892, "schema"]], "Selectors": [[893, "selectors"]], "Serialization": [[313, "serialization"], [888, "serialization"]], "Series": [[1260, "series"]], "Set Operations": [[1288, "set-operations"]], "Set operations": [[893, "set-operations"]], "Strategy helpers": [[1290, "strategy-helpers"]], "String": [[317, "string"], [784, "string"], [1266, "string"], [1282, "string"]], "StringCache": [[788, "stringcache"]], "Struct": [[785, "struct"], [1267, "struct"]], "Style": [[316, "style"]], "TAN": [[1284, "tan"]], "TAND": [[1284, "tand"]], "TIMESTAMP": [[1282, "timestamp"]], "TRUNCATE": [[1289, "truncate"]], "TRY_CAST": [[1285, "try-cast"]], "Table Operations": [[1289, "table-operations"]], "Temporal": [[317, "temporal"], [786, "temporal"], [1268, "temporal"], [1283, "temporal"]], "Testing": [[1290, "testing"]], "Trigonometry": [[1284, "trigonometry"]], "Types": [[1285, "types"]], "UNION": [[1288, "union"]], "UNION ALL": [[1288, "union-all"]], "UNION BY NAME": [[1288, "union-by-name"]], "UNNEST": [[1278, "unnest"], [1289, "unnest"]], "UPPER": [[1282, "upper"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "VARIANCE": [[1277, "variance"]], "WHERE": [[1276, "where"]], "Warnings": [[318, "warnings"]], "Window": [[787, "window"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.__array__": [[170, "polars-dataframe-array"]], "polars.DataFrame.__arrow_c_stream__": [[171, "polars-dataframe-arrow-c-stream"]], "polars.DataFrame.__dataframe__": [[172, "polars-dataframe-dataframe"]], "polars.DataFrame.__getitem__": [[173, "polars-dataframe-getitem"]], "polars.DataFrame.approx_n_unique": [[174, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.bottom_k": [[175, "polars-dataframe-bottom-k"]], "polars.DataFrame.cast": [[176, "polars-dataframe-cast"]], "polars.DataFrame.clear": [[177, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[178, "polars-dataframe-clone"]], "polars.DataFrame.collect_schema": [[179, "polars-dataframe-collect-schema"]], "polars.DataFrame.columns": [[180, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[181, "polars-dataframe-corr"]], "polars.DataFrame.count": [[182, "polars-dataframe-count"]], "polars.DataFrame.describe": [[183, "polars-dataframe-describe"]], "polars.DataFrame.deserialize": [[184, "polars-dataframe-deserialize"]], "polars.DataFrame.drop": [[185, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[186, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[187, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[188, "polars-dataframe-dtypes"]], "polars.DataFrame.equals": [[189, "polars-dataframe-equals"]], "polars.DataFrame.estimated_size": [[190, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[191, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[192, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[193, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[194, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[195, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[196, "polars-dataframe-flags"]], "polars.DataFrame.fold": [[197, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[198, "polars-dataframe-gather-every"]], "polars.DataFrame.get_column": [[199, "polars-dataframe-get-column"]], "polars.DataFrame.get_column_index": [[200, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[201, "polars-dataframe-get-columns"]], "polars.DataFrame.glimpse": [[202, "polars-dataframe-glimpse"]], "polars.DataFrame.group_by": [[203, "polars-dataframe-group-by"]], "polars.DataFrame.group_by_dynamic": [[204, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[205, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[206, "polars-dataframe-head"]], "polars.DataFrame.height": [[207, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[208, "polars-dataframe-hstack"]], "polars.DataFrame.insert_column": [[209, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[210, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[211, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[212, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[213, "polars-dataframe-is-unique"]], "polars.DataFrame.item": [[214, "polars-dataframe-item"]], "polars.DataFrame.iter_columns": [[215, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[216, "polars-dataframe-iter-rows"]], "polars.DataFrame.iter_slices": [[217, "polars-dataframe-iter-slices"]], "polars.DataFrame.join": [[218, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[219, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[220, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[221, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[222, "polars-dataframe-map-rows"]], "polars.DataFrame.max": [[223, "polars-dataframe-max"]], "polars.DataFrame.max_horizontal": [[224, "polars-dataframe-max-horizontal"]], "polars.DataFrame.mean": [[225, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[226, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.median": [[227, "polars-dataframe-median"]], "polars.DataFrame.melt": [[228, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[229, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[230, "polars-dataframe-min"]], "polars.DataFrame.min_horizontal": [[231, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_chunks": [[232, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[233, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[234, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[235, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[236, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[237, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[238, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[239, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[240, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[241, "polars-dataframe-rename"]], "polars.DataFrame.replace_column": [[242, "polars-dataframe-replace-column"]], "polars.DataFrame.reverse": [[243, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[244, "polars-dataframe-rolling"]], "polars.DataFrame.row": [[245, "polars-dataframe-row"]], "polars.DataFrame.rows": [[246, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[247, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sample": [[248, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[249, "polars-dataframe-schema"]], "polars.DataFrame.select": [[250, "polars-dataframe-select"]], "polars.DataFrame.select_seq": [[251, "polars-dataframe-select-seq"]], "polars.DataFrame.serialize": [[252, "polars-dataframe-serialize"]], "polars.DataFrame.set_sorted": [[253, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[254, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[255, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[256, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[257, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[258, "polars-dataframe-sort"]], "polars.DataFrame.sql": [[259, "polars-dataframe-sql"]], "polars.DataFrame.std": [[260, "polars-dataframe-std"]], "polars.DataFrame.sum": [[261, "polars-dataframe-sum"]], "polars.DataFrame.sum_horizontal": [[262, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.tail": [[263, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[264, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[265, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[266, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[267, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[268, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_jax": [[269, "polars-dataframe-to-jax"]], "polars.DataFrame.to_numpy": [[270, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[271, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[272, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[273, "polars-dataframe-to-struct"]], "polars.DataFrame.to_torch": [[274, "polars-dataframe-to-torch"]], "polars.DataFrame.top_k": [[275, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[276, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[277, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[278, "polars-dataframe-unnest"]], "polars.DataFrame.unpivot": [[279, "polars-dataframe-unpivot"]], "polars.DataFrame.unstack": [[280, "polars-dataframe-unstack"]], "polars.DataFrame.update": [[281, "polars-dataframe-update"]], "polars.DataFrame.upsample": [[282, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[283, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[284, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[285, "polars-dataframe-width"]], "polars.DataFrame.with_columns": [[286, "polars-dataframe-with-columns"]], "polars.DataFrame.with_columns_seq": [[287, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_row_count": [[288, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_row_index": [[289, "polars-dataframe-with-row-index"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Expr.abs": [[320, "polars-expr-abs"]], "polars.Expr.add": [[321, "polars-expr-add"]], "polars.Expr.agg_groups": [[322, "polars-expr-agg-groups"]], "polars.Expr.alias": [[323, "polars-expr-alias"]], "polars.Expr.all": [[324, "polars-expr-all"]], "polars.Expr.and_": [[325, "polars-expr-and"]], "polars.Expr.any": [[326, "polars-expr-any"]], "polars.Expr.append": [[327, "polars-expr-append"]], "polars.Expr.approx_n_unique": [[328, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[329, "polars-expr-arccos"]], "polars.Expr.arccosh": [[330, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[331, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[332, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[333, "polars-expr-arctan"]], "polars.Expr.arctanh": [[334, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[335, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[336, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[337, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[338, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[339, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[340, "polars-expr-arr-all"]], "polars.Expr.arr.any": [[341, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[342, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[343, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[344, "polars-expr-arr-contains"]], "polars.Expr.arr.count_matches": [[345, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[346, "polars-expr-arr-explode"]], "polars.Expr.arr.first": [[347, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[348, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[349, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[350, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[351, "polars-expr-arr-max"]], "polars.Expr.arr.median": [[352, "polars-expr-arr-median"]], "polars.Expr.arr.min": [[353, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[354, "polars-expr-arr-n-unique"]], "polars.Expr.arr.reverse": [[355, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[356, "polars-expr-arr-shift"]], "polars.Expr.arr.sort": [[357, "polars-expr-arr-sort"]], "polars.Expr.arr.std": [[358, "polars-expr-arr-std"]], "polars.Expr.arr.sum": [[359, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[360, "polars-expr-arr-to-list"]], "polars.Expr.arr.to_struct": [[361, "polars-expr-arr-to-struct"]], "polars.Expr.arr.unique": [[362, "polars-expr-arr-unique"]], "polars.Expr.arr.var": [[363, "polars-expr-arr-var"]], "polars.Expr.backward_fill": [[364, "polars-expr-backward-fill"]], "polars.Expr.bin.contains": [[365, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[366, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[367, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[368, "polars-expr-bin-ends-with"]], "polars.Expr.bin.size": [[369, "polars-expr-bin-size"]], "polars.Expr.bin.starts_with": [[370, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[371, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[372, "polars-expr-bottom-k-by"]], "polars.Expr.cast": [[373, "polars-expr-cast"]], "polars.Expr.cat.get_categories": [[374, "polars-expr-cat-get-categories"]], "polars.Expr.cbrt": [[375, "polars-expr-cbrt"]], "polars.Expr.ceil": [[376, "polars-expr-ceil"]], "polars.Expr.clip": [[377, "polars-expr-clip"]], "polars.Expr.cos": [[378, "polars-expr-cos"]], "polars.Expr.cosh": [[379, "polars-expr-cosh"]], "polars.Expr.cot": [[380, "polars-expr-cot"]], "polars.Expr.count": [[381, "polars-expr-count"]], "polars.Expr.cum_count": [[382, "polars-expr-cum-count"]], "polars.Expr.cum_max": [[383, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[384, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[385, "polars-expr-cum-prod"]], "polars.Expr.cum_sum": [[386, "polars-expr-cum-sum"]], "polars.Expr.cumulative_eval": [[387, "polars-expr-cumulative-eval"]], "polars.Expr.cut": [[388, "polars-expr-cut"]], "polars.Expr.degrees": [[389, "polars-expr-degrees"]], "polars.Expr.deserialize": [[390, "polars-expr-deserialize"]], "polars.Expr.diff": [[391, "polars-expr-diff"]], "polars.Expr.dot": [[392, "polars-expr-dot"]], "polars.Expr.drop_nans": [[393, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[394, "polars-expr-drop-nulls"]], "polars.Expr.dt.add_business_days": [[395, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[396, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.cast_time_unit": [[397, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.century": [[398, "polars-expr-dt-century"]], "polars.Expr.dt.combine": [[399, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[400, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.date": [[401, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[402, "polars-expr-dt-datetime"]], "polars.Expr.dt.day": [[403, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[404, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[405, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[406, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[407, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.iso_year": [[408, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[409, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millennium": [[410, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[411, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[412, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[413, "polars-expr-dt-month"]], "polars.Expr.dt.month_end": [[414, "polars-expr-dt-month-end"]], "polars.Expr.dt.month_start": [[415, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanosecond": [[416, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[417, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[418, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[419, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[420, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[421, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[422, "polars-expr-dt-second"]], "polars.Expr.dt.strftime": [[423, "polars-expr-dt-strftime"]], "polars.Expr.dt.time": [[424, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[425, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[426, "polars-expr-dt-to-string"]], "polars.Expr.dt.total_days": [[427, "polars-expr-dt-total-days"]], "polars.Expr.dt.total_hours": [[428, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[429, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_milliseconds": [[430, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[431, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_nanoseconds": [[432, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_seconds": [[433, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.truncate": [[434, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[435, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[436, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[437, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[438, "polars-expr-dt-year"]], "polars.Expr.entropy": [[439, "polars-expr-entropy"]], "polars.Expr.eq": [[440, "polars-expr-eq"]], "polars.Expr.eq_missing": [[441, "polars-expr-eq-missing"]], "polars.Expr.ewm_mean": [[442, "polars-expr-ewm-mean"]], "polars.Expr.ewm_mean_by": [[443, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_std": [[444, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[445, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[446, "polars-expr-exclude"]], "polars.Expr.exp": [[447, "polars-expr-exp"]], "polars.Expr.explode": [[448, "polars-expr-explode"]], "polars.Expr.extend_constant": [[449, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[450, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[451, "polars-expr-fill-null"]], "polars.Expr.filter": [[452, "polars-expr-filter"]], "polars.Expr.first": [[453, "polars-expr-first"]], "polars.Expr.flatten": [[454, "polars-expr-flatten"]], "polars.Expr.floor": [[455, "polars-expr-floor"]], "polars.Expr.floordiv": [[456, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[457, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[458, "polars-expr-from-json"]], "polars.Expr.gather": [[459, "polars-expr-gather"]], "polars.Expr.gather_every": [[460, "polars-expr-gather-every"]], "polars.Expr.ge": [[461, "polars-expr-ge"]], "polars.Expr.get": [[462, "polars-expr-get"]], "polars.Expr.gt": [[463, "polars-expr-gt"]], "polars.Expr.has_nulls": [[464, "polars-expr-has-nulls"]], "polars.Expr.hash": [[465, "polars-expr-hash"]], "polars.Expr.head": [[466, "polars-expr-head"]], "polars.Expr.hist": [[467, "polars-expr-hist"]], "polars.Expr.implode": [[468, "polars-expr-implode"]], "polars.Expr.inspect": [[469, "polars-expr-inspect"]], "polars.Expr.interpolate": [[470, "polars-expr-interpolate"]], "polars.Expr.interpolate_by": [[471, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[472, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[473, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[474, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[475, "polars-expr-is-first-distinct"]], "polars.Expr.is_in": [[476, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[477, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[478, "polars-expr-is-last-distinct"]], "polars.Expr.is_nan": [[479, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[480, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[481, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[482, "polars-expr-is-null"]], "polars.Expr.is_unique": [[483, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[484, "polars-expr-kurtosis"]], "polars.Expr.last": [[485, "polars-expr-last"]], "polars.Expr.le": [[486, "polars-expr-le"]], "polars.Expr.len": [[487, "polars-expr-len"]], "polars.Expr.limit": [[488, "polars-expr-limit"]], "polars.Expr.list.all": [[489, "polars-expr-list-all"]], "polars.Expr.list.any": [[490, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[491, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[492, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[493, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[494, "polars-expr-list-contains"]], "polars.Expr.list.count_matches": [[495, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[496, "polars-expr-list-diff"]], "polars.Expr.list.drop_nulls": [[497, "polars-expr-list-drop-nulls"]], "polars.Expr.list.eval": [[498, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[499, "polars-expr-list-explode"]], "polars.Expr.list.first": [[500, "polars-expr-list-first"]], "polars.Expr.list.gather": [[501, "polars-expr-list-gather"]], "polars.Expr.list.gather_every": [[502, "polars-expr-list-gather-every"]], "polars.Expr.list.get": [[503, "polars-expr-list-get"]], "polars.Expr.list.head": [[504, "polars-expr-list-head"]], "polars.Expr.list.join": [[505, "polars-expr-list-join"]], "polars.Expr.list.last": [[506, "polars-expr-list-last"]], "polars.Expr.list.len": [[507, "polars-expr-list-len"]], "polars.Expr.list.max": [[508, "polars-expr-list-max"]], "polars.Expr.list.mean": [[509, "polars-expr-list-mean"]], "polars.Expr.list.median": [[510, "polars-expr-list-median"]], "polars.Expr.list.min": [[511, "polars-expr-list-min"]], "polars.Expr.list.n_unique": [[512, "polars-expr-list-n-unique"]], "polars.Expr.list.reverse": [[513, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[514, "polars-expr-list-sample"]], "polars.Expr.list.set_difference": [[515, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[516, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_symmetric_difference": [[517, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[518, "polars-expr-list-set-union"]], "polars.Expr.list.shift": [[519, "polars-expr-list-shift"]], "polars.Expr.list.slice": [[520, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[521, "polars-expr-list-sort"]], "polars.Expr.list.std": [[522, "polars-expr-list-std"]], "polars.Expr.list.sum": [[523, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[524, "polars-expr-list-tail"]], "polars.Expr.list.to_array": [[525, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[526, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[527, "polars-expr-list-unique"]], "polars.Expr.list.var": [[528, "polars-expr-list-var"]], "polars.Expr.log": [[529, "polars-expr-log"]], "polars.Expr.log10": [[530, "polars-expr-log10"]], "polars.Expr.log1p": [[531, "polars-expr-log1p"]], "polars.Expr.lower_bound": [[532, "polars-expr-lower-bound"]], "polars.Expr.lt": [[533, "polars-expr-lt"]], "polars.Expr.map_batches": [[534, "polars-expr-map-batches"]], "polars.Expr.map_elements": [[535, "polars-expr-map-elements"]], "polars.Expr.max": [[536, "polars-expr-max"]], "polars.Expr.mean": [[537, "polars-expr-mean"]], "polars.Expr.median": [[538, "polars-expr-median"]], "polars.Expr.meta.eq": [[539, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[540, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.is_column_selection": [[541, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.is_regex_projection": [[542, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[543, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[544, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[545, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[546, "polars-expr-meta-root-names"]], "polars.Expr.meta.serialize": [[547, "polars-expr-meta-serialize"]], "polars.Expr.meta.tree_format": [[548, "polars-expr-meta-tree-format"]], "polars.Expr.meta.undo_aliases": [[549, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[550, "polars-expr-meta-write-json"]], "polars.Expr.min": [[551, "polars-expr-min"]], "polars.Expr.mod": [[552, "polars-expr-mod"]], "polars.Expr.mode": [[553, "polars-expr-mode"]], "polars.Expr.mul": [[554, "polars-expr-mul"]], "polars.Expr.n_unique": [[555, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[556, "polars-expr-name-keep"]], "polars.Expr.name.map": [[557, "polars-expr-name-map"]], "polars.Expr.name.map_fields": [[558, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix": [[559, "polars-expr-name-prefix"]], "polars.Expr.name.prefix_fields": [[560, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[561, "polars-expr-name-suffix"]], "polars.Expr.name.suffix_fields": [[562, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_lowercase": [[563, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[564, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_max": [[565, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[566, "polars-expr-nan-min"]], "polars.Expr.ne": [[567, "polars-expr-ne"]], "polars.Expr.ne_missing": [[568, "polars-expr-ne-missing"]], "polars.Expr.neg": [[569, "polars-expr-neg"]], "polars.Expr.not_": [[570, "polars-expr-not"]], "polars.Expr.null_count": [[571, "polars-expr-null-count"]], "polars.Expr.or_": [[572, "polars-expr-or"]], "polars.Expr.over": [[573, "polars-expr-over"]], "polars.Expr.pct_change": [[574, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[575, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[576, "polars-expr-peak-min"]], "polars.Expr.pipe": [[577, "polars-expr-pipe"]], "polars.Expr.pow": [[578, "polars-expr-pow"]], "polars.Expr.product": [[579, "polars-expr-product"]], "polars.Expr.qcut": [[580, "polars-expr-qcut"]], "polars.Expr.quantile": [[581, "polars-expr-quantile"]], "polars.Expr.radians": [[582, "polars-expr-radians"]], "polars.Expr.rank": [[583, "polars-expr-rank"]], "polars.Expr.rechunk": [[584, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[585, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[586, "polars-expr-repeat-by"]], "polars.Expr.replace": [[587, "polars-expr-replace"]], "polars.Expr.replace_strict": [[588, "polars-expr-replace-strict"]], "polars.Expr.reshape": [[589, "polars-expr-reshape"]], "polars.Expr.reverse": [[590, "polars-expr-reverse"]], "polars.Expr.rle": [[591, "polars-expr-rle"]], "polars.Expr.rle_id": [[592, "polars-expr-rle-id"]], "polars.Expr.rolling": [[593, "polars-expr-rolling"]], "polars.Expr.rolling_map": [[594, "polars-expr-rolling-map"]], "polars.Expr.rolling_max": [[595, "polars-expr-rolling-max"]], "polars.Expr.rolling_max_by": [[596, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_mean": [[597, "polars-expr-rolling-mean"]], "polars.Expr.rolling_mean_by": [[598, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[599, "polars-expr-rolling-median"]], "polars.Expr.rolling_median_by": [[600, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_min": [[601, "polars-expr-rolling-min"]], "polars.Expr.rolling_min_by": [[602, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_quantile": [[603, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_quantile_by": [[604, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_skew": [[605, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[606, "polars-expr-rolling-std"]], "polars.Expr.rolling_std_by": [[607, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_sum": [[608, "polars-expr-rolling-sum"]], "polars.Expr.rolling_sum_by": [[609, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_var": [[610, "polars-expr-rolling-var"]], "polars.Expr.rolling_var_by": [[611, "polars-expr-rolling-var-by"]], "polars.Expr.round": [[612, "polars-expr-round"]], "polars.Expr.round_sig_figs": [[613, "polars-expr-round-sig-figs"]], "polars.Expr.sample": [[614, "polars-expr-sample"]], "polars.Expr.search_sorted": [[615, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[616, "polars-expr-set-sorted"]], "polars.Expr.shift": [[617, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[618, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[619, "polars-expr-shuffle"]], "polars.Expr.sign": [[620, "polars-expr-sign"]], "polars.Expr.sin": [[621, "polars-expr-sin"]], "polars.Expr.sinh": [[622, "polars-expr-sinh"]], "polars.Expr.skew": [[623, "polars-expr-skew"]], "polars.Expr.slice": [[624, "polars-expr-slice"]], "polars.Expr.sort": [[625, "polars-expr-sort"]], "polars.Expr.sort_by": [[626, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[627, "polars-expr-sqrt"]], "polars.Expr.std": [[628, "polars-expr-std"]], "polars.Expr.str.concat": [[629, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[630, "polars-expr-str-contains"]], "polars.Expr.str.contains_any": [[631, "polars-expr-str-contains-any"]], "polars.Expr.str.count_matches": [[632, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[633, "polars-expr-str-decode"]], "polars.Expr.str.encode": [[634, "polars-expr-str-encode"]], "polars.Expr.str.ends_with": [[635, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[636, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[637, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[638, "polars-expr-str-extract-all"]], "polars.Expr.str.extract_groups": [[639, "polars-expr-str-extract-groups"]], "polars.Expr.str.extract_many": [[640, "polars-expr-str-extract-many"]], "polars.Expr.str.find": [[641, "polars-expr-str-find"]], "polars.Expr.str.head": [[642, "polars-expr-str-head"]], "polars.Expr.str.join": [[643, "polars-expr-str-join"]], "polars.Expr.str.json_decode": [[644, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[645, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_bytes": [[646, "polars-expr-str-len-bytes"]], "polars.Expr.str.len_chars": [[647, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_end": [[648, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[649, "polars-expr-str-pad-start"]], "polars.Expr.str.replace": [[650, "polars-expr-str-replace"]], "polars.Expr.str.replace_all": [[651, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[652, "polars-expr-str-replace-many"]], "polars.Expr.str.reverse": [[653, "polars-expr-str-reverse"]], "polars.Expr.str.slice": [[654, "polars-expr-str-slice"]], "polars.Expr.str.split": [[655, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[656, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[657, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[658, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_chars": [[659, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_chars_end": [[660, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars_start": [[661, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[662, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_suffix": [[663, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[664, "polars-expr-str-strptime"]], "polars.Expr.str.tail": [[665, "polars-expr-str-tail"]], "polars.Expr.str.to_date": [[666, "polars-expr-str-to-date"]], "polars.Expr.str.to_datetime": [[667, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[668, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[669, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[670, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[671, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[672, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_uppercase": [[673, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[674, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[675, "polars-expr-struct-field"]], "polars.Expr.struct.json_encode": [[676, "polars-expr-struct-json-encode"]], "polars.Expr.struct.rename_fields": [[677, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.with_fields": [[678, "polars-expr-struct-with-fields"]], "polars.Expr.sub": [[679, "polars-expr-sub"]], "polars.Expr.sum": [[680, "polars-expr-sum"]], "polars.Expr.tail": [[681, "polars-expr-tail"]], "polars.Expr.tan": [[682, "polars-expr-tan"]], "polars.Expr.tanh": [[683, "polars-expr-tanh"]], "polars.Expr.to_physical": [[684, "polars-expr-to-physical"]], "polars.Expr.top_k": [[685, "polars-expr-top-k"]], "polars.Expr.top_k_by": [[686, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[687, "polars-expr-truediv"]], "polars.Expr.unique": [[688, "polars-expr-unique"]], "polars.Expr.unique_counts": [[689, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[690, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[691, "polars-expr-value-counts"]], "polars.Expr.var": [[692, "polars-expr-var"]], "polars.Expr.where": [[693, "polars-expr-where"]], "polars.Expr.xor": [[694, "polars-expr-xor"]], "polars.LazyFrame.approx_n_unique": [[792, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[793, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[794, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[795, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[796, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[797, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[798, "polars-lazyframe-collect"]], "polars.LazyFrame.collect_async": [[799, "polars-lazyframe-collect-async"]], "polars.LazyFrame.collect_schema": [[800, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.columns": [[801, "polars-lazyframe-columns"]], "polars.LazyFrame.count": [[802, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[803, "polars-lazyframe-describe"]], "polars.LazyFrame.deserialize": [[804, "polars-lazyframe-deserialize"]], "polars.LazyFrame.drop": [[805, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[806, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[807, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explain": [[808, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[809, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[810, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[811, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[812, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[813, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[814, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[815, "polars-lazyframe-group-by"]], "polars.LazyFrame.group_by_dynamic": [[816, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.head": [[817, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[818, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[819, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[820, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[821, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[822, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[823, "polars-lazyframe-lazy"]], "polars.LazyFrame.limit": [[824, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[825, "polars-lazyframe-map-batches"]], "polars.LazyFrame.max": [[826, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[827, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[828, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[829, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[830, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.min": [[831, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[832, "polars-lazyframe-null-count"]], "polars.LazyFrame.pipe": [[833, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[834, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[835, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[836, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[837, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[838, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[839, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[840, "polars-lazyframe-select"]], "polars.LazyFrame.select_seq": [[841, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[842, "polars-lazyframe-serialize"]], "polars.LazyFrame.set_sorted": [[843, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[844, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[845, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.slice": [[846, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[847, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[848, "polars-lazyframe-sql"]], "polars.LazyFrame.std": [[849, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[850, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[851, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[852, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[853, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[854, "polars-lazyframe-unnest"]], "polars.LazyFrame.unpivot": [[855, "polars-lazyframe-unpivot"]], "polars.LazyFrame.update": [[856, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[857, "polars-lazyframe-var"]], "polars.LazyFrame.width": [[858, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[859, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_columns_seq": [[860, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_context": [[861, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[862, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[863, "polars-lazyframe-with-row-index"]], "polars.SQLContext.execute": [[1269, "polars-sqlcontext-execute"]], "polars.SQLContext.execute_global": [[1270, "polars-sqlcontext-execute-global"]], "polars.SQLContext.register": [[1271, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[1272, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[1273, "polars-sqlcontext-register-many"]], "polars.SQLContext.tables": [[1274, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[1275, "polars-sqlcontext-unregister"]], "polars.Series.__array__": [[895, "polars-series-array"]], "polars.Series.__arrow_c_stream__": [[896, "polars-series-arrow-c-stream"]], "polars.Series.__getitem__": [[897, "polars-series-getitem"]], "polars.Series.abs": [[898, "polars-series-abs"]], "polars.Series.alias": [[899, "polars-series-alias"]], "polars.Series.all": [[900, "polars-series-all"]], "polars.Series.any": [[901, "polars-series-any"]], "polars.Series.append": [[902, "polars-series-append"]], "polars.Series.arccos": [[903, "polars-series-arccos"]], "polars.Series.arccosh": [[904, "polars-series-arccosh"]], "polars.Series.arcsin": [[905, "polars-series-arcsin"]], "polars.Series.arcsinh": [[906, "polars-series-arcsinh"]], "polars.Series.arctan": [[907, "polars-series-arctan"]], "polars.Series.arctanh": [[908, "polars-series-arctanh"]], "polars.Series.arg_max": [[909, "polars-series-arg-max"]], "polars.Series.arg_min": [[910, "polars-series-arg-min"]], "polars.Series.arg_sort": [[911, "polars-series-arg-sort"]], "polars.Series.arg_true": [[912, "polars-series-arg-true"]], "polars.Series.arg_unique": [[913, "polars-series-arg-unique"]], "polars.Series.arr.all": [[914, "polars-series-arr-all"]], "polars.Series.arr.any": [[915, "polars-series-arr-any"]], "polars.Series.arr.arg_max": [[916, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[917, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[918, "polars-series-arr-contains"]], "polars.Series.arr.count_matches": [[919, "polars-series-arr-count-matches"]], "polars.Series.arr.explode": [[920, "polars-series-arr-explode"]], "polars.Series.arr.first": [[921, "polars-series-arr-first"]], "polars.Series.arr.get": [[922, "polars-series-arr-get"]], "polars.Series.arr.join": [[923, "polars-series-arr-join"]], "polars.Series.arr.last": [[924, "polars-series-arr-last"]], "polars.Series.arr.max": [[925, "polars-series-arr-max"]], "polars.Series.arr.median": [[926, "polars-series-arr-median"]], "polars.Series.arr.min": [[927, "polars-series-arr-min"]], "polars.Series.arr.n_unique": [[928, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[929, "polars-series-arr-reverse"]], "polars.Series.arr.shift": [[930, "polars-series-arr-shift"]], "polars.Series.arr.sort": [[931, "polars-series-arr-sort"]], "polars.Series.arr.std": [[932, "polars-series-arr-std"]], "polars.Series.arr.sum": [[933, "polars-series-arr-sum"]], "polars.Series.arr.to_list": [[934, "polars-series-arr-to-list"]], "polars.Series.arr.to_struct": [[935, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[936, "polars-series-arr-unique"]], "polars.Series.arr.var": [[937, "polars-series-arr-var"]], "polars.Series.bin.contains": [[938, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[939, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[940, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[941, "polars-series-bin-ends-with"]], "polars.Series.bin.size": [[942, "polars-series-bin-size"]], "polars.Series.bin.starts_with": [[943, "polars-series-bin-starts-with"]], "polars.Series.bottom_k": [[944, "polars-series-bottom-k"]], "polars.Series.cast": [[945, "polars-series-cast"]], "polars.Series.cat.get_categories": [[946, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[947, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[948, "polars-series-cat-to-local"]], "polars.Series.cat.uses_lexical_ordering": [[949, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cbrt": [[950, "polars-series-cbrt"]], "polars.Series.ceil": [[951, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[952, "polars-series-chunk-lengths"]], "polars.Series.clear": [[953, "polars-series-clear"]], "polars.Series.clip": [[954, "polars-series-clip"]], "polars.Series.clone": [[955, "polars-series-clone"]], "polars.Series.cos": [[956, "polars-series-cos"]], "polars.Series.cosh": [[957, "polars-series-cosh"]], "polars.Series.cot": [[958, "polars-series-cot"]], "polars.Series.count": [[959, "polars-series-count"]], "polars.Series.cum_count": [[960, "polars-series-cum-count"]], "polars.Series.cum_max": [[961, "polars-series-cum-max"]], "polars.Series.cum_min": [[962, "polars-series-cum-min"]], "polars.Series.cum_prod": [[963, "polars-series-cum-prod"]], "polars.Series.cum_sum": [[964, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[965, "polars-series-cumulative-eval"]], "polars.Series.cut": [[966, "polars-series-cut"]], "polars.Series.describe": [[967, "polars-series-describe"]], "polars.Series.diff": [[968, "polars-series-diff"]], "polars.Series.dot": [[969, "polars-series-dot"]], "polars.Series.drop_nans": [[970, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[971, "polars-series-drop-nulls"]], "polars.Series.dt.add_business_days": [[972, "polars-series-dt-add-business-days"]], "polars.Series.dt.base_utc_offset": [[973, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[974, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.century": [[975, "polars-series-dt-century"]], "polars.Series.dt.combine": [[976, "polars-series-dt-combine"]], "polars.Series.dt.convert_time_zone": [[977, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.date": [[978, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[979, "polars-series-dt-datetime"]], "polars.Series.dt.day": [[980, "polars-series-dt-day"]], "polars.Series.dt.dst_offset": [[981, "polars-series-dt-dst-offset"]], "polars.Series.dt.epoch": [[982, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[983, "polars-series-dt-hour"]], "polars.Series.dt.is_leap_year": [[984, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[985, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[986, "polars-series-dt-max"]], "polars.Series.dt.mean": [[987, "polars-series-dt-mean"]], "polars.Series.dt.median": [[988, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[989, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[990, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[991, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[992, "polars-series-dt-min"]], "polars.Series.dt.minute": [[993, "polars-series-dt-minute"]], "polars.Series.dt.month": [[994, "polars-series-dt-month"]], "polars.Series.dt.month_end": [[995, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[996, "polars-series-dt-month-start"]], "polars.Series.dt.nanosecond": [[997, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[998, "polars-series-dt-offset-by"]], "polars.Series.dt.ordinal_day": [[999, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[1000, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[1001, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.round": [[1002, "polars-series-dt-round"]], "polars.Series.dt.second": [[1003, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[1004, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[1005, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[1006, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[1007, "polars-series-dt-to-string"]], "polars.Series.dt.total_days": [[1008, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[1009, "polars-series-dt-total-hours"]], "polars.Series.dt.total_microseconds": [[1010, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[1011, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1012, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[1013, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.total_seconds": [[1014, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[1015, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[1016, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[1017, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1018, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1019, "polars-series-dt-year"]], "polars.Series.dtype": [[1020, "polars-series-dtype"]], "polars.Series.entropy": [[1021, "polars-series-entropy"]], "polars.Series.eq": [[1022, "polars-series-eq"]], "polars.Series.eq_missing": [[1023, "polars-series-eq-missing"]], "polars.Series.equals": [[1024, "polars-series-equals"]], "polars.Series.estimated_size": [[1025, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[1026, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1027, "polars-series-ewm-mean-by"]], "polars.Series.ewm_std": [[1028, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[1029, "polars-series-ewm-var"]], "polars.Series.exp": [[1030, "polars-series-exp"]], "polars.Series.explode": [[1031, "polars-series-explode"]], "polars.Series.extend": [[1032, "polars-series-extend"]], "polars.Series.extend_constant": [[1033, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[1034, "polars-series-fill-nan"]], "polars.Series.fill_null": [[1035, "polars-series-fill-null"]], "polars.Series.filter": [[1036, "polars-series-filter"]], "polars.Series.flags": [[1037, "polars-series-flags"]], "polars.Series.floor": [[1038, "polars-series-floor"]], "polars.Series.gather": [[1039, "polars-series-gather"]], "polars.Series.gather_every": [[1040, "polars-series-gather-every"]], "polars.Series.ge": [[1041, "polars-series-ge"]], "polars.Series.get_chunks": [[1042, "polars-series-get-chunks"]], "polars.Series.gt": [[1043, "polars-series-gt"]], "polars.Series.has_nulls": [[1044, "polars-series-has-nulls"]], "polars.Series.has_validity": [[1045, "polars-series-has-validity"]], "polars.Series.hash": [[1046, "polars-series-hash"]], "polars.Series.head": [[1047, "polars-series-head"]], "polars.Series.hist": [[1048, "polars-series-hist"]], "polars.Series.implode": [[1049, "polars-series-implode"]], "polars.Series.interpolate": [[1050, "polars-series-interpolate"]], "polars.Series.interpolate_by": [[1051, "polars-series-interpolate-by"]], "polars.Series.is_between": [[1052, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1053, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1054, "polars-series-is-empty"]], "polars.Series.is_finite": [[1055, "polars-series-is-finite"]], "polars.Series.is_first_distinct": [[1056, "polars-series-is-first-distinct"]], "polars.Series.is_in": [[1057, "polars-series-is-in"]], "polars.Series.is_infinite": [[1058, "polars-series-is-infinite"]], "polars.Series.is_last_distinct": [[1059, "polars-series-is-last-distinct"]], "polars.Series.is_nan": [[1060, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[1061, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1062, "polars-series-is-not-null"]], "polars.Series.is_null": [[1063, "polars-series-is-null"]], "polars.Series.is_sorted": [[1064, "polars-series-is-sorted"]], "polars.Series.is_unique": [[1065, "polars-series-is-unique"]], "polars.Series.item": [[1066, "polars-series-item"]], "polars.Series.kurtosis": [[1067, "polars-series-kurtosis"]], "polars.Series.le": [[1068, "polars-series-le"]], "polars.Series.len": [[1069, "polars-series-len"]], "polars.Series.limit": [[1070, "polars-series-limit"]], "polars.Series.list.all": [[1071, "polars-series-list-all"]], "polars.Series.list.any": [[1072, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1073, "polars-series-list-arg-max"]], "polars.Series.list.arg_min": [[1074, "polars-series-list-arg-min"]], "polars.Series.list.concat": [[1075, "polars-series-list-concat"]], "polars.Series.list.contains": [[1076, "polars-series-list-contains"]], "polars.Series.list.count_matches": [[1077, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1078, "polars-series-list-diff"]], "polars.Series.list.drop_nulls": [[1079, "polars-series-list-drop-nulls"]], "polars.Series.list.eval": [[1080, "polars-series-list-eval"]], "polars.Series.list.explode": [[1081, "polars-series-list-explode"]], "polars.Series.list.first": [[1082, "polars-series-list-first"]], "polars.Series.list.gather": [[1083, "polars-series-list-gather"]], "polars.Series.list.gather_every": [[1084, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1085, "polars-series-list-get"]], "polars.Series.list.head": [[1086, "polars-series-list-head"]], "polars.Series.list.join": [[1087, "polars-series-list-join"]], "polars.Series.list.last": [[1088, "polars-series-list-last"]], "polars.Series.list.len": [[1089, "polars-series-list-len"]], "polars.Series.list.max": [[1090, "polars-series-list-max"]], "polars.Series.list.mean": [[1091, "polars-series-list-mean"]], "polars.Series.list.median": [[1092, "polars-series-list-median"]], "polars.Series.list.min": [[1093, "polars-series-list-min"]], "polars.Series.list.n_unique": [[1094, "polars-series-list-n-unique"]], "polars.Series.list.reverse": [[1095, "polars-series-list-reverse"]], "polars.Series.list.sample": [[1096, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1097, "polars-series-list-set-difference"]], "polars.Series.list.set_intersection": [[1098, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1099, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[1100, "polars-series-list-set-union"]], "polars.Series.list.shift": [[1101, "polars-series-list-shift"]], "polars.Series.list.slice": [[1102, "polars-series-list-slice"]], "polars.Series.list.sort": [[1103, "polars-series-list-sort"]], "polars.Series.list.std": [[1104, "polars-series-list-std"]], "polars.Series.list.sum": [[1105, "polars-series-list-sum"]], "polars.Series.list.tail": [[1106, "polars-series-list-tail"]], "polars.Series.list.to_array": [[1107, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1108, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1109, "polars-series-list-unique"]], "polars.Series.list.var": [[1110, "polars-series-list-var"]], "polars.Series.log": [[1111, "polars-series-log"]], "polars.Series.log10": [[1112, "polars-series-log10"]], "polars.Series.log1p": [[1113, "polars-series-log1p"]], "polars.Series.lower_bound": [[1114, "polars-series-lower-bound"]], "polars.Series.lt": [[1115, "polars-series-lt"]], "polars.Series.map_elements": [[1116, "polars-series-map-elements"]], "polars.Series.max": [[1117, "polars-series-max"]], "polars.Series.mean": [[1118, "polars-series-mean"]], "polars.Series.median": [[1119, "polars-series-median"]], "polars.Series.min": [[1120, "polars-series-min"]], "polars.Series.mode": [[1121, "polars-series-mode"]], "polars.Series.n_chunks": [[1122, "polars-series-n-chunks"]], "polars.Series.n_unique": [[1123, "polars-series-n-unique"]], "polars.Series.name": [[1124, "polars-series-name"]], "polars.Series.nan_max": [[1125, "polars-series-nan-max"]], "polars.Series.nan_min": [[1126, "polars-series-nan-min"]], "polars.Series.ne": [[1127, "polars-series-ne"]], "polars.Series.ne_missing": [[1128, "polars-series-ne-missing"]], "polars.Series.new_from_index": [[1129, "polars-series-new-from-index"]], "polars.Series.not_": [[1130, "polars-series-not"]], "polars.Series.null_count": [[1131, "polars-series-null-count"]], "polars.Series.pct_change": [[1132, "polars-series-pct-change"]], "polars.Series.peak_max": [[1133, "polars-series-peak-max"]], "polars.Series.peak_min": [[1134, "polars-series-peak-min"]], "polars.Series.pow": [[1135, "polars-series-pow"]], "polars.Series.product": [[1136, "polars-series-product"]], "polars.Series.qcut": [[1137, "polars-series-qcut"]], "polars.Series.quantile": [[1138, "polars-series-quantile"]], "polars.Series.rank": [[1139, "polars-series-rank"]], "polars.Series.rechunk": [[1140, "polars-series-rechunk"]], "polars.Series.reinterpret": [[1141, "polars-series-reinterpret"]], "polars.Series.rename": [[1142, "polars-series-rename"]], "polars.Series.replace": [[1143, "polars-series-replace"]], "polars.Series.replace_strict": [[1144, "polars-series-replace-strict"]], "polars.Series.reshape": [[1145, "polars-series-reshape"]], "polars.Series.reverse": [[1146, "polars-series-reverse"]], "polars.Series.rle": [[1147, "polars-series-rle"]], "polars.Series.rle_id": [[1148, "polars-series-rle-id"]], "polars.Series.rolling_map": [[1149, "polars-series-rolling-map"]], "polars.Series.rolling_max": [[1150, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1151, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[1152, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[1153, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[1154, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[1155, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[1156, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1157, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[1158, "polars-series-rolling-var"]], "polars.Series.round": [[1159, "polars-series-round"]], "polars.Series.round_sig_figs": [[1160, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1161, "polars-series-sample"]], "polars.Series.scatter": [[1162, "polars-series-scatter"]], "polars.Series.search_sorted": [[1163, "polars-series-search-sorted"]], "polars.Series.set": [[1164, "polars-series-set"]], "polars.Series.set_sorted": [[1165, "polars-series-set-sorted"]], "polars.Series.shape": [[1166, "polars-series-shape"]], "polars.Series.shift": [[1167, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1168, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1169, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[1170, "polars-series-shuffle"]], "polars.Series.sign": [[1171, "polars-series-sign"]], "polars.Series.sin": [[1172, "polars-series-sin"]], "polars.Series.sinh": [[1173, "polars-series-sinh"]], "polars.Series.skew": [[1174, "polars-series-skew"]], "polars.Series.slice": [[1175, "polars-series-slice"]], "polars.Series.sort": [[1176, "polars-series-sort"]], "polars.Series.sqrt": [[1177, "polars-series-sqrt"]], "polars.Series.std": [[1178, "polars-series-std"]], "polars.Series.str.concat": [[1179, "polars-series-str-concat"]], "polars.Series.str.contains": [[1180, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1181, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1182, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1183, "polars-series-str-decode"]], "polars.Series.str.encode": [[1184, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1185, "polars-series-str-ends-with"]], "polars.Series.str.explode": [[1186, "polars-series-str-explode"]], "polars.Series.str.extract": [[1187, "polars-series-str-extract"]], "polars.Series.str.extract_all": [[1188, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1189, "polars-series-str-extract-groups"]], "polars.Series.str.extract_many": [[1190, "polars-series-str-extract-many"]], "polars.Series.str.find": [[1191, "polars-series-str-find"]], "polars.Series.str.head": [[1192, "polars-series-str-head"]], "polars.Series.str.join": [[1193, "polars-series-str-join"]], "polars.Series.str.json_decode": [[1194, "polars-series-str-json-decode"]], "polars.Series.str.json_path_match": [[1195, "polars-series-str-json-path-match"]], "polars.Series.str.len_bytes": [[1196, "polars-series-str-len-bytes"]], "polars.Series.str.len_chars": [[1197, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1198, "polars-series-str-pad-end"]], "polars.Series.str.pad_start": [[1199, "polars-series-str-pad-start"]], "polars.Series.str.replace": [[1200, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[1201, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1202, "polars-series-str-replace-many"]], "polars.Series.str.reverse": [[1203, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1204, "polars-series-str-slice"]], "polars.Series.str.split": [[1205, "polars-series-str-split"]], "polars.Series.str.split_exact": [[1206, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1207, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1208, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars": [[1209, "polars-series-str-strip-chars"]], "polars.Series.str.strip_chars_end": [[1210, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1211, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip_prefix": [[1212, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1213, "polars-series-str-strip-suffix"]], "polars.Series.str.strptime": [[1214, "polars-series-str-strptime"]], "polars.Series.str.tail": [[1215, "polars-series-str-tail"]], "polars.Series.str.to_date": [[1216, "polars-series-str-to-date"]], "polars.Series.str.to_datetime": [[1217, "polars-series-str-to-datetime"]], "polars.Series.str.to_decimal": [[1218, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1219, "polars-series-str-to-integer"]], "polars.Series.str.to_lowercase": [[1220, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1221, "polars-series-str-to-time"]], "polars.Series.str.to_titlecase": [[1222, "polars-series-str-to-titlecase"]], "polars.Series.str.to_uppercase": [[1223, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1224, "polars-series-str-zfill"]], "polars.Series.struct.field": [[1225, "polars-series-struct-field"]], "polars.Series.struct.fields": [[1226, "polars-series-struct-fields"]], "polars.Series.struct.json_encode": [[1227, "polars-series-struct-json-encode"]], "polars.Series.struct.rename_fields": [[1228, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1229, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1230, "polars-series-struct-unnest"]], "polars.Series.sum": [[1231, "polars-series-sum"]], "polars.Series.tail": [[1232, "polars-series-tail"]], "polars.Series.tan": [[1233, "polars-series-tan"]], "polars.Series.tanh": [[1234, "polars-series-tanh"]], "polars.Series.to_arrow": [[1235, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[1236, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1237, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1238, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1239, "polars-series-to-jax"]], "polars.Series.to_list": [[1240, "polars-series-to-list"]], "polars.Series.to_numpy": [[1241, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[1242, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1243, "polars-series-to-physical"]], "polars.Series.to_torch": [[1244, "polars-series-to-torch"]], "polars.Series.top_k": [[1245, "polars-series-top-k"]], "polars.Series.unique": [[1246, "polars-series-unique"]], "polars.Series.unique_counts": [[1247, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1248, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1249, "polars-series-value-counts"]], "polars.Series.var": [[1250, "polars-series-var"]], "polars.Series.zip_with": [[1251, "polars-series-zip-with"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.all": [[695, "polars-all"]], "polars.all_horizontal": [[696, "polars-all-horizontal"]], "polars.any": [[697, "polars-any"]], "polars.any_horizontal": [[698, "polars-any-horizontal"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.approx_n_unique": [[699, "polars-approx-n-unique"]], "polars.arange": [[700, "polars-arange"]], "polars.arctan2": [[701, "polars-arctan2"]], "polars.arctan2d": [[702, "polars-arctan2d"]], "polars.arg_sort_by": [[703, "polars-arg-sort-by"]], "polars.arg_where": [[704, "polars-arg-where"]], "polars.build_info": [[52, "polars-build-info"]], "polars.business_day_count": [[705, "polars-business-day-count"]], "polars.coalesce": [[706, "polars-coalesce"]], "polars.col": [[773, "polars-col"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.concat": [[55, "polars-concat"]], "polars.concat_list": [[707, "polars-concat-list"]], "polars.concat_str": [[708, "polars-concat-str"]], "polars.corr": [[709, "polars-corr"]], "polars.count": [[710, "polars-count"]], "polars.cov": [[711, "polars-cov"]], "polars.cum_count": [[712, "polars-cum-count"]], "polars.cum_fold": [[713, "polars-cum-fold"]], "polars.cum_reduce": [[714, "polars-cum-reduce"]], "polars.cum_sum": [[715, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[716, "polars-cum-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.__iter__": [[290, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[291, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.all": [[292, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.count": [[293, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[294, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[295, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.last": [[296, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.len": [[297, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.map_groups": [[298, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[299, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[300, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.median": [[301, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[302, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[303, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[304, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[305, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[306, "polars-dataframe-group-by-groupby-tail"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.date": [[717, "polars-date"]], "polars.date_range": [[718, "polars-date-range"]], "polars.date_ranges": [[719, "polars-date-ranges"]], "polars.datetime": [[720, "polars-datetime"]], "polars.datetime_range": [[721, "polars-datetime-range"]], "polars.datetime_ranges": [[722, "polars-datetime-ranges"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.duration": [[723, "polars-duration"]], "polars.element": [[724, "polars-element"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.exclude": [[725, "polars-exclude"]], "polars.first": [[726, "polars-first"]], "polars.fold": [[727, "polars-fold"]], "polars.format": [[728, "polars-format"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_epoch": [[729, "polars-from-epoch"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.from_records": [[122, "polars-from-records"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.groups": [[730, "polars-groups"]], "polars.head": [[731, "polars-head"]], "polars.implode": [[732, "polars-implode"]], "polars.int_range": [[733, "polars-int-range"]], "polars.int_ranges": [[734, "polars-int-ranges"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.last": [[735, "polars-last"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[864, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[865, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[866, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[867, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[868, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[869, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[870, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[871, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[872, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[873, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[874, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[875, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[876, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[877, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[878, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[879, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[880, "polars-lazyframe-in-process-inprocessquery-cancel"]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[881, "polars-lazyframe-in-process-inprocessquery-fetch"]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[882, "polars-lazyframe-in-process-inprocessquery-fetch-blocking"]], "polars.len": [[736, "polars-len"]], "polars.lit": [[737, "polars-lit"]], "polars.map_batches": [[738, "polars-map-batches"]], "polars.map_groups": [[739, "polars-map-groups"]], "polars.max": [[740, "polars-max"]], "polars.max_horizontal": [[741, "polars-max-horizontal"]], "polars.mean": [[742, "polars-mean"]], "polars.mean_horizontal": [[743, "polars-mean-horizontal"]], "polars.median": [[744, "polars-median"]], "polars.min": [[745, "polars-min"]], "polars.min_horizontal": [[746, "polars-min-horizontal"]], "polars.n_unique": [[747, "polars-n-unique"]], "polars.nth": [[748, "polars-nth"]], "polars.ones": [[749, "polars-ones"]], "polars.quantile": [[750, "polars-quantile"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.read_database": [[131, "polars-read-database"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_json": [[138, "polars-read-json"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.reduce": [[751, "polars-reduce"]], "polars.repeat": [[752, "polars-repeat"]], "polars.rolling_corr": [[753, "polars-rolling-corr"]], "polars.rolling_cov": [[754, "polars-rolling-cov"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.select": [[755, "polars-select"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.sql": [[756, "polars-sql"]], "polars.sql_expr": [[757, "polars-sql-expr"]], "polars.std": [[758, "polars-std"]], "polars.struct": [[759, "polars-struct"]], "polars.sum": [[760, "polars-sum"]], "polars.sum_horizontal": [[761, "polars-sum-horizontal"]], "polars.tail": [[762, "polars-tail"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.time": [[763, "polars-time"]], "polars.time_range": [[764, "polars-time-range"]], "polars.time_ranges": [[765, "polars-time-ranges"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.var": [[766, "polars-var"]], "polars.when": [[767, "polars-when"]], "polars.zeros": [[768, "polars-zeros"]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[170, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[895, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[171, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[896, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[172, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1287, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1287, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[173, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[897, "polars.Series.__getitem__", false]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.sqlcontext method)": [[1287, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[320, "polars.Expr.abs", false]], "abs() (polars.series method)": [[898, "polars.Series.abs", false]], "add() (polars.expr method)": [[321, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[395, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[972, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[322, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[323, "polars.Expr.alias", false]], "alias() (polars.series method)": [[899, "polars.Series.alias", false]], "align_frames() (in module polars)": [[47, "polars.align_frames", false]], "all() (in module polars)": [[695, "polars.all", false]], "all() (in module polars.selectors)": [[893, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[324, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[340, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[489, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[900, "polars.Series.all", false]], "all() (polars.series.arr method)": [[914, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1071, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[696, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[893, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[893, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[325, "polars.Expr.and_", false]], "any() (in module polars)": [[697, "polars.any", false]], "any() (polars.expr method)": [[326, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[341, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[490, "polars.Expr.list.any", false]], "any() (polars.series method)": [[901, "polars.Series.any", false]], "any() (polars.series.arr method)": [[915, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1072, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[698, "polars.any_horizontal", false]], "append() (polars.expr method)": [[327, "polars.Expr.append", false]], "append() (polars.series method)": [[902, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[699, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[174, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[328, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[792, "polars.LazyFrame.approx_n_unique", false]], "arange() (in module polars)": [[700, "polars.arange", false]], "arccos() (polars.expr method)": [[329, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[903, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[330, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[904, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[331, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[905, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[332, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[906, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[333, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[907, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[701, "polars.arctan2", false]], "arctan2d() (in module polars)": [[702, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[334, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[908, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[335, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[342, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[491, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[909, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[916, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1073, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[336, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[343, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[492, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[910, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[917, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1074, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[337, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[911, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[703, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[338, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[912, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[339, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[913, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[704, "polars.arg_where", false]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[364, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[396, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[973, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[893, "polars.selectors.binary", false]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[893, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[175, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[371, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[793, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[944, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[372, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[52, "polars.build_info", false]], "business_day_count() (in module polars)": [[705, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[893, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[893, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[893, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[794, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[880, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[176, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[373, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[795, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[945, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[397, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[974, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[893, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[375, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[950, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[376, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[951, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[398, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[975, "polars.Series.dt.century", false]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[952, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[177, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[796, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[953, "polars.Series.clear", false]], "clip() (polars.expr method)": [[377, "polars.Expr.clip", false]], "clip() (polars.series method)": [[954, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[178, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[797, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[955, "polars.Series.clone", false]], "coalesce() (in module polars)": [[706, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[798, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[53, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[799, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[179, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[800, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column", false]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[180, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[801, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[399, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[976, "polars.Series.dt.combine", false]], "computeerror": [[89, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[55, "polars.concat", false]], "concat() (polars.expr.list method)": [[493, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[629, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1075, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1179, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[707, "polars.concat_list", false]], "concat_str() (in module polars)": [[708, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[893, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[344, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[365, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[494, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[630, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[918, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[938, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1076, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1180, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[631, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1181, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[400, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[977, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[709, "polars.corr", false]], "corr() (polars.dataframe method)": [[181, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[378, "polars.Expr.cos", false]], "cos() (polars.series method)": [[956, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[379, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[957, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[380, "polars.Expr.cot", false]], "cot() (polars.series method)": [[958, "polars.Series.cot", false]], "count() (in module polars)": [[710, "polars.count", false]], "count() (polars.dataframe method)": [[182, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[381, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[802, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[959, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[345, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[495, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[632, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[919, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1077, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1182, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[711, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy", false]], "cum_count() (in module polars)": [[712, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[382, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[960, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[713, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[383, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[961, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[384, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[962, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[385, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[963, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[714, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[715, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[386, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[964, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[716, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[387, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[965, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[388, "polars.Expr.cut", false]], "cut() (polars.series method)": [[966, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date", false]], "date() (in module polars)": [[717, "polars.date", false]], "date() (in module polars.selectors)": [[893, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[401, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[978, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[718, "polars.date_range", false]], "date_ranges() (in module polars)": [[719, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[720, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[893, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[402, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[979, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[721, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[722, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[403, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[980, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[893, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[366, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[633, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[939, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1183, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[389, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[183, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[803, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[967, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[184, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[390, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[804, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[391, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[496, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[968, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1078, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[893, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[392, "polars.Expr.dot", false]], "dot() (polars.series method)": [[969, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[185, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[805, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[186, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[393, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[970, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[187, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[394, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[497, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[806, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[971, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1079, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[404, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[981, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1020, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[188, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[807, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[92, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[723, "polars.duration", false]], "duration() (in module polars.selectors)": [[893, "polars.selectors.duration", false]], "element() (in module polars)": [[724, "polars.element", false]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[367, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[634, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[940, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1184, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[893, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[368, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[635, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[941, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1185, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[439, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1021, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[405, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[982, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[440, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[539, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1022, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[441, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1023, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[189, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1024, "polars.Series.equals", false]], "estimated_size() (polars.dataframe method)": [[190, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1025, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[498, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1080, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[442, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1026, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[443, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1027, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[444, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1028, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[445, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1029, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[725, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[893, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[446, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1269, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1270, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[447, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1030, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[893, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[808, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[191, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[448, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[346, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[499, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[636, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[809, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1031, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[920, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1081, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1186, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[192, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1032, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[449, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1033, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[637, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1187, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[638, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1188, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[639, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1189, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[640, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1190, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[881, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[882, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[675, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1225, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1226, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[193, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[450, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[810, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1034, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[194, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[451, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[811, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1035, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[195, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[452, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[812, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1036, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[641, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1191, "polars.Series.str.find", false]], "first() (in module polars)": [[726, "polars.first", false]], "first() (in module polars.selectors)": [[893, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[453, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[347, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[500, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[813, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series.arr method)": [[921, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1082, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[196, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1037, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[454, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[893, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[455, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1038, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[456, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[727, "polars.fold", false]], "fold() (polars.dataframe method)": [[197, "polars.DataFrame.fold", false]], "format() (in module polars)": [[728, "polars.format", false]], "forward_fill() (polars.expr method)": [[457, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[116, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[118, "polars.from_dict", false]], "from_dicts() (in module polars)": [[119, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[729, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[458, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[120, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[121, "polars.from_pandas", false]], "from_records() (in module polars)": [[122, "polars.from_records", false]], "from_repr() (in module polars)": [[123, "polars.from_repr", false]], "gather() (polars.expr method)": [[459, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[501, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1039, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1083, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[198, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[460, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[502, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[814, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1040, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1084, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[461, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1041, "polars.Series.ge", false]], "get() (polars.expr method)": [[462, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[348, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[503, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[922, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1085, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[374, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[946, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1042, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[199, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[200, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[201, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[124, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[202, "polars.DataFrame.glimpse", false]], "group_by() (polars.dataframe method)": [[203, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[815, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[204, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[816, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[730, "polars.groups", false]], "gt() (polars.expr method)": [[463, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1043, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[540, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[464, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1044, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1045, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[465, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1046, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[205, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[731, "polars.head", false]], "head() (polars.dataframe method)": [[206, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[466, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[504, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[642, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[817, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1047, "polars.Series.head", false]], "head() (polars.series.list method)": [[1086, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1192, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[207, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[467, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1048, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[406, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[983, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[208, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[732, "polars.implode", false]], "implode() (polars.expr method)": [[468, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1049, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[209, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[469, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[818, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[733, "polars.int_range", false]], "int_ranges() (in module polars)": [[734, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[893, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[210, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[470, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[819, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1050, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[471, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1051, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[472, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1052, "polars.Series.is_between", false]], "is_column_selection() (polars.expr.meta method)": [[541, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[211, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[473, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1053, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[212, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1054, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[474, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1055, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[475, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1056, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[476, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1057, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[477, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1058, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[478, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1059, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[407, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[984, "polars.Series.dt.is_leap_year", false]], "is_local() (polars.series.cat method)": [[947, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[479, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1060, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[480, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1061, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[481, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1062, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[482, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1063, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[542, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[893, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1064, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[213, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[483, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1065, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[408, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[985, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[214, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1066, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[215, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[216, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[217, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[218, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[349, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[505, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[643, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[820, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[923, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1087, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1193, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[219, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[821, "polars.LazyFrame.join_asof", false]], "json_decode() (polars.expr.str method)": [[644, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1194, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[676, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1227, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[126, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[645, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1195, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[556, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[484, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1067, "polars.Series.kurtosis", false]], "last() (in module polars)": [[735, "polars.last", false]], "last() (in module polars.selectors)": [[893, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[485, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[350, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[506, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[822, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series.arr method)": [[924, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1088, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[220, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[823, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[486, "polars.Expr.le", false]], "le() (polars.series method)": [[1068, "polars.Series.le", false]], "len() (in module polars)": [[736, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[487, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[507, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1069, "polars.Series.len", false]], "len() (polars.series.list method)": [[1089, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[646, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1196, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[647, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1197, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[221, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[488, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[824, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1070, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[737, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[529, "polars.Expr.log", false]], "log() (polars.series method)": [[1111, "polars.Series.log", false]], "log10() (polars.expr method)": [[530, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1112, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[531, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1113, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[532, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1114, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[533, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1115, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[557, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[738, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[534, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[825, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[535, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1116, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[558, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[739, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[222, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[893, "polars.selectors.matches", false]], "max() (in module polars)": [[740, "polars.max", false]], "max() (polars.dataframe method)": [[223, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[536, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[351, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[508, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[826, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1117, "polars.Series.max", false]], "max() (polars.series.arr method)": [[925, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[986, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1090, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[741, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[224, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[742, "polars.mean", false]], "mean() (polars.dataframe method)": [[225, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[537, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[509, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[827, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[873, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1118, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[987, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1091, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[743, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[226, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[744, "polars.median", false]], "median() (polars.dataframe method)": [[227, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[538, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[352, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[510, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[828, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[874, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1119, "polars.Series.median", false]], "median() (polars.series.arr method)": [[926, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[988, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1092, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[228, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[829, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[229, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[830, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[409, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[989, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[410, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[990, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[411, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[991, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[745, "polars.min", false]], "min() (polars.dataframe method)": [[230, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[551, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[353, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[511, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[831, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1120, "polars.Series.min", false]], "min() (polars.series.arr method)": [[927, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[992, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1093, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[746, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[231, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[412, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[993, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[552, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[553, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1121, "polars.Series.mode", false]], "module": [[891, "module-polars.plugins", false], [893, "module-polars.selectors", false]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[413, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[994, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[414, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[995, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[415, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[996, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[554, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[232, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1122, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[747, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[233, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[555, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[354, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[512, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[876, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1123, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[928, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1094, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1124, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[565, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1125, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[566, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1126, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[416, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[997, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[567, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[543, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1127, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[568, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1128, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[569, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1129, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[96, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[570, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1130, "polars.Series.not_", false]], "nth() (in module polars)": [[748, "polars.nth", false]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[234, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[571, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[832, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1131, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[893, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[417, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[998, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[749, "polars.ones", false]], "or_() (polars.expr method)": [[572, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[418, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[999, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[544, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[573, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[648, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1198, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[649, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1199, "polars.Series.str.pad_start", false]], "panicexception": [[99, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[235, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[574, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1132, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[575, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1133, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[576, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1134, "polars.Series.peak_min", false]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[236, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[577, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[833, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[237, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[315, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1265, "polars.Series.plot", false]], "polars.plugins": [[891, "module-polars.plugins", false]], "polars.selectors": [[893, "module-polars.selectors", false]], "polarserror": [[102, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[104, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[545, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[578, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1135, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[559, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[560, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[238, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[579, "polars.Expr.product", false]], "product() (polars.series method)": [[1136, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[834, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[580, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1137, "polars.Series.qcut", false]], "quantile() (in module polars)": [[750, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[239, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[581, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[835, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[877, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1138, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[419, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1000, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[582, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[583, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1139, "polars.Series.rank", false]], "read_avro() (in module polars)": [[127, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[129, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[131, "polars.read_database", false]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[133, "polars.read_delta", false]], "read_excel() (in module polars)": [[134, "polars.read_excel", false]], "read_ipc() (in module polars)": [[135, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[138, "polars.read_json", false]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[140, "polars.read_ods", false]], "read_parquet() (in module polars)": [[141, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[240, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[584, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1140, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[751, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1271, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1272, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1273, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[891, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[585, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1141, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[241, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[836, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1142, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[677, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1228, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[752, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[586, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[587, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[650, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1143, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1200, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[651, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1201, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[242, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[652, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1202, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[588, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1144, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[420, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1001, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[589, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1145, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[243, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[590, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[355, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[513, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[653, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[837, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1146, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[929, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1095, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1203, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[591, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1147, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[592, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1148, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[244, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[593, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[838, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[753, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[754, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[594, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1149, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[595, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1150, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[596, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[597, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1151, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[598, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[599, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1152, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[600, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[601, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1153, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[602, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[603, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1154, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[604, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[605, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1155, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[606, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1156, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[607, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[608, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1157, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[609, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[610, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1158, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[611, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[546, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[612, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[421, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1159, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1002, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[613, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1160, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[245, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[246, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[247, "polars.DataFrame.rows_by_key", false]], "rowserror": [[105, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[248, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[614, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[514, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1161, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1096, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[143, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[144, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1162, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[249, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[839, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1229, "polars.Series.struct.schema", false]], "schemaerror": [[108, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[615, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1163, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[422, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1003, "polars.Series.dt.second", false]], "select() (in module polars)": [[755, "polars.select", false]], "select() (polars.dataframe method)": [[250, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[840, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[251, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[841, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[252, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[547, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[842, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1164, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[515, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1097, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[516, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1098, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[253, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[616, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[843, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1165, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[517, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1099, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[518, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1100, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[254, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1166, "polars.Series.shape", false]], "shapeerror": [[110, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[255, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[617, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[356, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[519, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[844, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1167, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[930, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1101, "polars.Series.list.shift", false]], "show_graph() (polars.lazyframe method)": [[845, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[151, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[618, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1168, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[256, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1169, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[619, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1170, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[620, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1171, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[893, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[621, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1172, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[622, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1173, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[369, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[942, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[623, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1174, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[257, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[624, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[520, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[654, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[846, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1175, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1102, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1204, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[258, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[625, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[357, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[521, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[847, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1176, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[931, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1103, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[626, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[655, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1205, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[656, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1206, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[657, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1207, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[756, "polars.sql", false]], "sql() (polars.dataframe method)": [[259, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[848, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[757, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1287, "polars.SQLContext", false]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[627, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1177, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[893, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[370, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[658, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[943, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1208, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[758, "polars.std", false]], "std() (polars.dataframe method)": [[260, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[628, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[358, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[522, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[849, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1178, "polars.Series.std", false]], "std() (polars.series.arr method)": [[932, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1104, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[423, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1004, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[893, "polars.selectors.string", false]], "stringcache (class in polars)": [[46, "polars.StringCache", false]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[659, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1209, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[660, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1210, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[661, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1211, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[662, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1212, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[663, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1213, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[664, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1214, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[759, "polars.struct", false]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[316, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[679, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[561, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[562, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[760, "polars.sum", false]], "sum() (polars.dataframe method)": [[261, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[680, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[359, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[523, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[850, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[878, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1231, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[933, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1105, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[761, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[262, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1274, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[762, "polars.tail", false]], "tail() (polars.dataframe method)": [[263, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[681, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[524, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[665, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[851, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[879, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1232, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1106, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1215, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[682, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1233, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[683, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1234, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[893, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time", false]], "time() (in module polars)": [[763, "polars.time", false]], "time() (in module polars.selectors)": [[893, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[424, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1005, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[764, "polars.time_range", false]], "time_ranges() (in module polars)": [[765, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[425, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1006, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[525, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1107, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[264, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1235, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[666, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1216, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[667, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1217, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[668, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1218, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[265, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[266, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[267, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1236, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1237, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[268, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1238, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[669, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1219, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[269, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1239, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[360, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1240, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[934, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[948, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[563, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[670, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1220, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[270, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1241, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[271, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1242, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[684, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1243, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[272, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[426, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1007, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[273, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[361, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[526, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[935, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1108, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[671, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1221, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[672, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1222, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[274, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1244, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[564, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[673, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1223, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[275, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[685, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[852, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1245, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[686, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1008, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[428, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1009, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[429, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1010, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[430, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1011, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[431, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1012, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[432, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1013, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[433, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1014, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[276, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[548, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[687, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[434, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1015, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[549, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[277, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[688, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[362, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[527, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[853, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1246, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[936, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1109, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[689, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1247, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[278, "polars.DataFrame.unnest", false]], "unnest() (polars.lazyframe method)": [[854, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1230, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[279, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[855, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1275, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[893, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[280, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[281, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[856, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[690, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1248, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[282, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[949, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[691, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1249, "polars.Series.value_counts", false]], "var() (in module polars)": [[766, "polars.var", false]], "var() (polars.dataframe method)": [[283, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[692, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[363, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[528, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[857, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1250, "polars.Series.var", false]], "var() (polars.series.arr method)": [[937, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1110, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[284, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[435, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1016, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[436, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1017, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[767, "polars.when", false]], "where() (polars.expr method)": [[693, "polars.Expr.where", false]], "width (polars.dataframe property)": [[285, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[858, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[286, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[859, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[287, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[860, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[861, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[678, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[288, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[862, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[289, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[863, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[437, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1018, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[550, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[694, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[438, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1019, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[768, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[674, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1224, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1251, "polars.Series.zip_with", false]]}, "objects": {"polars": [[1287, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [695, 4, 1, "", "all"], [696, 4, 1, "", "all_horizontal"], [697, 4, 1, "", "any"], [698, 4, 1, "", "any_horizontal"], [699, 4, 1, "", "approx_n_unique"], [700, 4, 1, "", "arange"], [701, 4, 1, "", "arctan2"], [702, 4, 1, "", "arctan2d"], [703, 4, 1, "", "arg_sort_by"], [704, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [705, 4, 1, "", "business_day_count"], [706, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [707, 4, 1, "", "concat_list"], [708, 4, 1, "", "concat_str"], [709, 4, 1, "", "corr"], [710, 4, 1, "", "count"], [711, 4, 1, "", "cov"], [712, 4, 1, "", "cum_count"], [713, 4, 1, "", "cum_fold"], [714, 4, 1, "", "cum_reduce"], [715, 4, 1, "", "cum_sum"], [716, 4, 1, "", "cum_sum_horizontal"], [717, 4, 1, "", "date"], [718, 4, 1, "", "date_range"], [719, 4, 1, "", "date_ranges"], [720, 4, 1, "", "datetime"], [721, 4, 1, "", "datetime_range"], [722, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [723, 4, 1, "", "duration"], [724, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [725, 4, 1, "", "exclude"], [726, 4, 1, "", "first"], [727, 4, 1, "", "fold"], [728, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [729, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [730, 4, 1, "", "groups"], [731, 4, 1, "", "head"], [732, 4, 1, "", "implode"], [733, 4, 1, "", "int_range"], [734, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [735, 4, 1, "", "last"], [736, 4, 1, "", "len"], [737, 4, 1, "", "lit"], [738, 4, 1, "", "map_batches"], [739, 4, 1, "", "map_groups"], [740, 4, 1, "", "max"], [741, 4, 1, "", "max_horizontal"], [742, 4, 1, "", "mean"], [743, 4, 1, "", "mean_horizontal"], [744, 4, 1, "", "median"], [745, 4, 1, "", "min"], [746, 4, 1, "", "min_horizontal"], [747, 4, 1, "", "n_unique"], [748, 4, 1, "", "nth"], [749, 4, 1, "", "ones"], [891, 6, 0, "-", "plugins"], [750, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [751, 4, 1, "", "reduce"], [752, 4, 1, "", "repeat"], [753, 4, 1, "", "rolling_corr"], [754, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [755, 4, 1, "", "select"], [893, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [756, 4, 1, "", "sql"], [757, 4, 1, "", "sql_expr"], [758, 4, 1, "", "std"], [759, 4, 1, "", "struct"], [760, 4, 1, "", "sum"], [761, 4, 1, "", "sum_horizontal"], [762, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [763, 4, 1, "", "time"], [764, 4, 1, "", "time_range"], [765, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [766, 4, 1, "", "var"], [767, 4, 1, "", "when"], [768, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__array__"], [171, 0, 1, "", "__arrow_c_stream__"], [172, 0, 1, "", "__dataframe__"], [173, 0, 1, "", "__getitem__"], [174, 0, 1, "", "approx_n_unique"], [175, 0, 1, "", "bottom_k"], [176, 0, 1, "", "cast"], [177, 0, 1, "", "clear"], [178, 0, 1, "", "clone"], [179, 0, 1, "", "collect_schema"], [180, 1, 1, "", "columns"], [181, 0, 1, "", "corr"], [182, 0, 1, "", "count"], [183, 0, 1, "", "describe"], [184, 0, 1, "", "deserialize"], [185, 0, 1, "", "drop"], [186, 0, 1, "", "drop_in_place"], [187, 0, 1, "", "drop_nulls"], [188, 1, 1, "", "dtypes"], [189, 0, 1, "", "equals"], [190, 0, 1, "", "estimated_size"], [191, 0, 1, "", "explode"], [192, 0, 1, "", "extend"], [193, 0, 1, "", "fill_nan"], [194, 0, 1, "", "fill_null"], [195, 0, 1, "", "filter"], [196, 1, 1, "", "flags"], [197, 0, 1, "", "fold"], [198, 0, 1, "", "gather_every"], [199, 0, 1, "", "get_column"], [200, 0, 1, "", "get_column_index"], [201, 0, 1, "", "get_columns"], [202, 0, 1, "", "glimpse"], [203, 0, 1, "", "group_by"], [204, 0, 1, "", "group_by_dynamic"], [205, 0, 1, "", "hash_rows"], [206, 0, 1, "", "head"], [207, 1, 1, "", "height"], [208, 0, 1, "", "hstack"], [209, 0, 1, "", "insert_column"], [210, 0, 1, "", "interpolate"], [211, 0, 1, "", "is_duplicated"], [212, 0, 1, "", "is_empty"], [213, 0, 1, "", "is_unique"], [214, 0, 1, "", "item"], [215, 0, 1, "", "iter_columns"], [216, 0, 1, "", "iter_rows"], [217, 0, 1, "", "iter_slices"], [218, 0, 1, "", "join"], [219, 0, 1, "", "join_asof"], [220, 0, 1, "", "lazy"], [221, 0, 1, "", "limit"], [222, 0, 1, "", "map_rows"], [223, 0, 1, "", "max"], [224, 0, 1, "", "max_horizontal"], [225, 0, 1, "", "mean"], [226, 0, 1, "", "mean_horizontal"], [227, 0, 1, "", "median"], [228, 0, 1, "", "melt"], [229, 0, 1, "", "merge_sorted"], [230, 0, 1, "", "min"], [231, 0, 1, "", "min_horizontal"], [232, 0, 1, "", "n_chunks"], [233, 0, 1, "", "n_unique"], [234, 0, 1, "", "null_count"], [235, 0, 1, "", "partition_by"], [236, 0, 1, "", "pipe"], [237, 0, 1, "", "pivot"], [315, 1, 1, "", "plot"], [238, 0, 1, "", "product"], [239, 0, 1, "", "quantile"], [240, 0, 1, "", "rechunk"], [241, 0, 1, "", "rename"], [242, 0, 1, "", "replace_column"], [243, 0, 1, "", "reverse"], [244, 0, 1, "", "rolling"], [245, 0, 1, "", "row"], [246, 0, 1, "", "rows"], [247, 0, 1, "", "rows_by_key"], [248, 0, 1, "", "sample"], [249, 1, 1, "", "schema"], [250, 0, 1, "", "select"], [251, 0, 1, "", "select_seq"], [252, 0, 1, "", "serialize"], [253, 0, 1, "", "set_sorted"], [254, 1, 1, "", "shape"], [255, 0, 1, "", "shift"], [256, 0, 1, "", "shrink_to_fit"], [257, 0, 1, "", "slice"], [258, 0, 1, "", "sort"], [259, 0, 1, "", "sql"], [260, 0, 1, "", "std"], [316, 1, 1, "", "style"], [261, 0, 1, "", "sum"], [262, 0, 1, "", "sum_horizontal"], [263, 0, 1, "", "tail"], [264, 0, 1, "", "to_arrow"], [265, 0, 1, "", "to_dict"], [266, 0, 1, "", "to_dicts"], [267, 0, 1, "", "to_dummies"], [268, 0, 1, "", "to_init_repr"], [269, 0, 1, "", "to_jax"], [270, 0, 1, "", "to_numpy"], [271, 0, 1, "", "to_pandas"], [272, 0, 1, "", "to_series"], [273, 0, 1, "", "to_struct"], [274, 0, 1, "", "to_torch"], [275, 0, 1, "", "top_k"], [276, 0, 1, "", "transpose"], [277, 0, 1, "", "unique"], [278, 0, 1, "", "unnest"], [279, 0, 1, "", "unpivot"], [280, 0, 1, "", "unstack"], [281, 0, 1, "", "update"], [282, 0, 1, "", "upsample"], [283, 0, 1, "", "var"], [284, 0, 1, "", "vstack"], [285, 1, 1, "", "width"], [286, 0, 1, "", "with_columns"], [287, 0, 1, "", "with_columns_seq"], [288, 0, 1, "", "with_row_count"], [289, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[320, 0, 1, "", "abs"], [321, 0, 1, "", "add"], [322, 0, 1, "", "agg_groups"], [323, 0, 1, "", "alias"], [324, 0, 1, "", "all"], [325, 0, 1, "", "and_"], [326, 0, 1, "", "any"], [327, 0, 1, "", "append"], [328, 0, 1, "", "approx_n_unique"], [329, 0, 1, "", "arccos"], [330, 0, 1, "", "arccosh"], [331, 0, 1, "", "arcsin"], [332, 0, 1, "", "arcsinh"], [333, 0, 1, "", "arctan"], [334, 0, 1, "", "arctanh"], [335, 0, 1, "", "arg_max"], [336, 0, 1, "", "arg_min"], [337, 0, 1, "", "arg_sort"], [338, 0, 1, "", "arg_true"], [339, 0, 1, "", "arg_unique"], [364, 0, 1, "", "backward_fill"], [371, 0, 1, "", "bottom_k"], [372, 0, 1, "", "bottom_k_by"], [373, 0, 1, "", "cast"], [375, 0, 1, "", "cbrt"], [376, 0, 1, "", "ceil"], [377, 0, 1, "", "clip"], [378, 0, 1, "", "cos"], [379, 0, 1, "", "cosh"], [380, 0, 1, "", "cot"], [381, 0, 1, "", "count"], [382, 0, 1, "", "cum_count"], [383, 0, 1, "", "cum_max"], [384, 0, 1, "", "cum_min"], [385, 0, 1, "", "cum_prod"], [386, 0, 1, "", "cum_sum"], [387, 0, 1, "", "cumulative_eval"], [388, 0, 1, "", "cut"], [389, 0, 1, "", "degrees"], [390, 0, 1, "", "deserialize"], [391, 0, 1, "", "diff"], [392, 0, 1, "", "dot"], [393, 0, 1, "", "drop_nans"], [394, 0, 1, "", "drop_nulls"], [439, 0, 1, "", "entropy"], [440, 0, 1, "", "eq"], [441, 0, 1, "", "eq_missing"], [442, 0, 1, "", "ewm_mean"], [443, 0, 1, "", "ewm_mean_by"], [444, 0, 1, "", "ewm_std"], [445, 0, 1, "", "ewm_var"], [446, 0, 1, "", "exclude"], [447, 0, 1, "", "exp"], [448, 0, 1, "", "explode"], [449, 0, 1, "", "extend_constant"], [450, 0, 1, "", "fill_nan"], [451, 0, 1, "", "fill_null"], [452, 0, 1, "", "filter"], [453, 0, 1, "", "first"], [454, 0, 1, "", "flatten"], [455, 0, 1, "", "floor"], [456, 0, 1, "", "floordiv"], [457, 0, 1, "", "forward_fill"], [458, 0, 1, "", "from_json"], [459, 0, 1, "", "gather"], [460, 0, 1, "", "gather_every"], [461, 0, 1, "", "ge"], [462, 0, 1, "", "get"], [463, 0, 1, "", "gt"], [464, 0, 1, "", "has_nulls"], [465, 0, 1, "", "hash"], [466, 0, 1, "", "head"], [467, 0, 1, "", "hist"], [468, 0, 1, "", "implode"], [469, 0, 1, "", "inspect"], [470, 0, 1, "", "interpolate"], [471, 0, 1, "", "interpolate_by"], [472, 0, 1, "", "is_between"], [473, 0, 1, "", "is_duplicated"], [474, 0, 1, "", "is_finite"], [475, 0, 1, "", "is_first_distinct"], [476, 0, 1, "", "is_in"], [477, 0, 1, "", "is_infinite"], [478, 0, 1, "", "is_last_distinct"], [479, 0, 1, "", "is_nan"], [480, 0, 1, "", "is_not_nan"], [481, 0, 1, "", "is_not_null"], [482, 0, 1, "", "is_null"], [483, 0, 1, "", "is_unique"], [484, 0, 1, "", "kurtosis"], [485, 0, 1, "", "last"], [486, 0, 1, "", "le"], [487, 0, 1, "", "len"], [488, 0, 1, "", "limit"], [529, 0, 1, "", "log"], [530, 0, 1, "", "log10"], [531, 0, 1, "", "log1p"], [532, 0, 1, "", "lower_bound"], [533, 0, 1, "", "lt"], [534, 0, 1, "", "map_batches"], [535, 0, 1, "", "map_elements"], [536, 0, 1, "", "max"], [537, 0, 1, "", "mean"], [538, 0, 1, "", "median"], [551, 0, 1, "", "min"], [552, 0, 1, "", "mod"], [553, 0, 1, "", "mode"], [554, 0, 1, "", "mul"], [555, 0, 1, "", "n_unique"], [565, 0, 1, "", "nan_max"], [566, 0, 1, "", "nan_min"], [567, 0, 1, "", "ne"], [568, 0, 1, "", "ne_missing"], [569, 0, 1, "", "neg"], [570, 0, 1, "", "not_"], [571, 0, 1, "", "null_count"], [572, 0, 1, "", "or_"], [573, 0, 1, "", "over"], [574, 0, 1, "", "pct_change"], [575, 0, 1, "", "peak_max"], [576, 0, 1, "", "peak_min"], [577, 0, 1, "", "pipe"], [578, 0, 1, "", "pow"], [579, 0, 1, "", "product"], [580, 0, 1, "", "qcut"], [581, 0, 1, "", "quantile"], [582, 0, 1, "", "radians"], [583, 0, 1, "", "rank"], [584, 0, 1, "", "rechunk"], [585, 0, 1, "", "reinterpret"], [586, 0, 1, "", "repeat_by"], [587, 0, 1, "", "replace"], [588, 0, 1, "", "replace_strict"], [589, 0, 1, "", "reshape"], [590, 0, 1, "", "reverse"], [591, 0, 1, "", "rle"], [592, 0, 1, "", "rle_id"], [593, 0, 1, "", "rolling"], [594, 0, 1, "", "rolling_map"], [595, 0, 1, "", "rolling_max"], [596, 0, 1, "", "rolling_max_by"], [597, 0, 1, "", "rolling_mean"], [598, 0, 1, "", "rolling_mean_by"], [599, 0, 1, "", "rolling_median"], [600, 0, 1, "", "rolling_median_by"], [601, 0, 1, "", "rolling_min"], [602, 0, 1, "", "rolling_min_by"], [603, 0, 1, "", "rolling_quantile"], [604, 0, 1, "", "rolling_quantile_by"], [605, 0, 1, "", "rolling_skew"], [606, 0, 1, "", "rolling_std"], [607, 0, 1, "", "rolling_std_by"], [608, 0, 1, "", "rolling_sum"], [609, 0, 1, "", "rolling_sum_by"], [610, 0, 1, "", "rolling_var"], [611, 0, 1, "", "rolling_var_by"], [612, 0, 1, "", "round"], [613, 0, 1, "", "round_sig_figs"], [614, 0, 1, "", "sample"], [615, 0, 1, "", "search_sorted"], [616, 0, 1, "", "set_sorted"], [617, 0, 1, "", "shift"], [618, 0, 1, "", "shrink_dtype"], [619, 0, 1, "", "shuffle"], [620, 0, 1, "", "sign"], [621, 0, 1, "", "sin"], [622, 0, 1, "", "sinh"], [623, 0, 1, "", "skew"], [624, 0, 1, "", "slice"], [625, 0, 1, "", "sort"], [626, 0, 1, "", "sort_by"], [627, 0, 1, "", "sqrt"], [628, 0, 1, "", "std"], [679, 0, 1, "", "sub"], [680, 0, 1, "", "sum"], [681, 0, 1, "", "tail"], [682, 0, 1, "", "tan"], [683, 0, 1, "", "tanh"], [684, 0, 1, "", "to_physical"], [685, 0, 1, "", "top_k"], [686, 0, 1, "", "top_k_by"], [687, 0, 1, "", "truediv"], [688, 0, 1, "", "unique"], [689, 0, 1, "", "unique_counts"], [690, 0, 1, "", "upper_bound"], [691, 0, 1, "", "value_counts"], [692, 0, 1, "", "var"], [693, 0, 1, "", "where"], [694, 0, 1, "", "xor"]], "polars.Expr.arr": [[340, 0, 1, "", "all"], [341, 0, 1, "", "any"], [342, 0, 1, "", "arg_max"], [343, 0, 1, "", "arg_min"], [344, 0, 1, "", "contains"], [345, 0, 1, "", "count_matches"], [346, 0, 1, "", "explode"], [347, 0, 1, "", "first"], [348, 0, 1, "", "get"], [349, 0, 1, "", "join"], [350, 0, 1, "", "last"], [351, 0, 1, "", "max"], [352, 0, 1, "", "median"], [353, 0, 1, "", "min"], [354, 0, 1, "", "n_unique"], [355, 0, 1, "", "reverse"], [356, 0, 1, "", "shift"], [357, 0, 1, "", "sort"], [358, 0, 1, "", "std"], [359, 0, 1, "", "sum"], [360, 0, 1, "", "to_list"], [361, 0, 1, "", "to_struct"], [362, 0, 1, "", "unique"], [363, 0, 1, "", "var"]], "polars.Expr.bin": [[365, 0, 1, "", "contains"], [366, 0, 1, "", "decode"], [367, 0, 1, "", "encode"], [368, 0, 1, "", "ends_with"], [369, 0, 1, "", "size"], [370, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[374, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[395, 0, 1, "", "add_business_days"], [396, 0, 1, "", "base_utc_offset"], [397, 0, 1, "", "cast_time_unit"], [398, 0, 1, "", "century"], [399, 0, 1, "", "combine"], [400, 0, 1, "", "convert_time_zone"], [401, 0, 1, "", "date"], [402, 0, 1, "", "datetime"], [403, 0, 1, "", "day"], [404, 0, 1, "", "dst_offset"], [405, 0, 1, "", "epoch"], [406, 0, 1, "", "hour"], [407, 0, 1, "", "is_leap_year"], [408, 0, 1, "", "iso_year"], [409, 0, 1, "", "microsecond"], [410, 0, 1, "", "millennium"], [411, 0, 1, "", "millisecond"], [412, 0, 1, "", "minute"], [413, 0, 1, "", "month"], [414, 0, 1, "", "month_end"], [415, 0, 1, "", "month_start"], [416, 0, 1, "", "nanosecond"], [417, 0, 1, "", "offset_by"], [418, 0, 1, "", "ordinal_day"], [419, 0, 1, "", "quarter"], [420, 0, 1, "", "replace_time_zone"], [421, 0, 1, "", "round"], [422, 0, 1, "", "second"], [423, 0, 1, "", "strftime"], [424, 0, 1, "", "time"], [425, 0, 1, "", "timestamp"], [426, 0, 1, "", "to_string"], [427, 0, 1, "", "total_days"], [428, 0, 1, "", "total_hours"], [429, 0, 1, "", "total_microseconds"], [430, 0, 1, "", "total_milliseconds"], [431, 0, 1, "", "total_minutes"], [432, 0, 1, "", "total_nanoseconds"], [433, 0, 1, "", "total_seconds"], [434, 0, 1, "", "truncate"], [435, 0, 1, "", "week"], [436, 0, 1, "", "weekday"], [437, 0, 1, "", "with_time_unit"], [438, 0, 1, "", "year"]], "polars.Expr.list": [[489, 0, 1, "", "all"], [490, 0, 1, "", "any"], [491, 0, 1, "", "arg_max"], [492, 0, 1, "", "arg_min"], [493, 0, 1, "", "concat"], [494, 0, 1, "", "contains"], [495, 0, 1, "", "count_matches"], [496, 0, 1, "", "diff"], [497, 0, 1, "", "drop_nulls"], [498, 0, 1, "", "eval"], [499, 0, 1, "", "explode"], [500, 0, 1, "", "first"], [501, 0, 1, "", "gather"], [502, 0, 1, "", "gather_every"], [503, 0, 1, "", "get"], [504, 0, 1, "", "head"], [505, 0, 1, "", "join"], [506, 0, 1, "", "last"], [507, 0, 1, "", "len"], [508, 0, 1, "", "max"], [509, 0, 1, "", "mean"], [510, 0, 1, "", "median"], [511, 0, 1, "", "min"], [512, 0, 1, "", "n_unique"], [513, 0, 1, "", "reverse"], [514, 0, 1, "", "sample"], [515, 0, 1, "", "set_difference"], [516, 0, 1, "", "set_intersection"], [517, 0, 1, "", "set_symmetric_difference"], [518, 0, 1, "", "set_union"], [519, 0, 1, "", "shift"], [520, 0, 1, "", "slice"], [521, 0, 1, "", "sort"], [522, 0, 1, "", "std"], [523, 0, 1, "", "sum"], [524, 0, 1, "", "tail"], [525, 0, 1, "", "to_array"], [526, 0, 1, "", "to_struct"], [527, 0, 1, "", "unique"], [528, 0, 1, "", "var"]], "polars.Expr.meta": [[539, 0, 1, "", "eq"], [540, 0, 1, "", "has_multiple_outputs"], [541, 0, 1, "", "is_column_selection"], [542, 0, 1, "", "is_regex_projection"], [543, 0, 1, "", "ne"], [544, 0, 1, "", "output_name"], [545, 0, 1, "", "pop"], [546, 0, 1, "", "root_names"], [547, 0, 1, "", "serialize"], [548, 0, 1, "", "tree_format"], [549, 0, 1, "", "undo_aliases"], [550, 0, 1, "", "write_json"]], "polars.Expr.name": [[556, 0, 1, "", "keep"], [557, 0, 1, "", "map"], [558, 0, 1, "", "map_fields"], [559, 0, 1, "", "prefix"], [560, 0, 1, "", "prefix_fields"], [561, 0, 1, "", "suffix"], [562, 0, 1, "", "suffix_fields"], [563, 0, 1, "", "to_lowercase"], [564, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[629, 0, 1, "", "concat"], [630, 0, 1, "", "contains"], [631, 0, 1, "", "contains_any"], [632, 0, 1, "", "count_matches"], [633, 0, 1, "", "decode"], [634, 0, 1, "", "encode"], [635, 0, 1, "", "ends_with"], [636, 0, 1, "", "explode"], [637, 0, 1, "", "extract"], [638, 0, 1, "", "extract_all"], [639, 0, 1, "", "extract_groups"], [640, 0, 1, "", "extract_many"], [641, 0, 1, "", "find"], [642, 0, 1, "", "head"], [643, 0, 1, "", "join"], [644, 0, 1, "", "json_decode"], [645, 0, 1, "", "json_path_match"], [646, 0, 1, "", "len_bytes"], [647, 0, 1, "", "len_chars"], [648, 0, 1, "", "pad_end"], [649, 0, 1, "", "pad_start"], [650, 0, 1, "", "replace"], [651, 0, 1, "", "replace_all"], [652, 0, 1, "", "replace_many"], [653, 0, 1, "", "reverse"], [654, 0, 1, "", "slice"], [655, 0, 1, "", "split"], [656, 0, 1, "", "split_exact"], [657, 0, 1, "", "splitn"], [658, 0, 1, "", "starts_with"], [659, 0, 1, "", "strip_chars"], [660, 0, 1, "", "strip_chars_end"], [661, 0, 1, "", "strip_chars_start"], [662, 0, 1, "", "strip_prefix"], [663, 0, 1, "", "strip_suffix"], [664, 0, 1, "", "strptime"], [665, 0, 1, "", "tail"], [666, 0, 1, "", "to_date"], [667, 0, 1, "", "to_datetime"], [668, 0, 1, "", "to_decimal"], [669, 0, 1, "", "to_integer"], [670, 0, 1, "", "to_lowercase"], [671, 0, 1, "", "to_time"], [672, 0, 1, "", "to_titlecase"], [673, 0, 1, "", "to_uppercase"], [674, 0, 1, "", "zfill"]], "polars.Expr.struct": [[675, 0, 1, "", "field"], [676, 0, 1, "", "json_encode"], [677, 0, 1, "", "rename_fields"], [678, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[792, 0, 1, "", "approx_n_unique"], [793, 0, 1, "", "bottom_k"], [794, 0, 1, "", "cache"], [795, 0, 1, "", "cast"], [796, 0, 1, "", "clear"], [797, 0, 1, "", "clone"], [798, 0, 1, "", "collect"], [799, 0, 1, "", "collect_async"], [800, 0, 1, "", "collect_schema"], [801, 1, 1, "", "columns"], [802, 0, 1, "", "count"], [803, 0, 1, "", "describe"], [804, 0, 1, "", "deserialize"], [805, 0, 1, "", "drop"], [806, 0, 1, "", "drop_nulls"], [807, 1, 1, "", "dtypes"], [808, 0, 1, "", "explain"], [809, 0, 1, "", "explode"], [810, 0, 1, "", "fill_nan"], [811, 0, 1, "", "fill_null"], [812, 0, 1, "", "filter"], [813, 0, 1, "", "first"], [814, 0, 1, "", "gather_every"], [815, 0, 1, "", "group_by"], [816, 0, 1, "", "group_by_dynamic"], [817, 0, 1, "", "head"], [818, 0, 1, "", "inspect"], [819, 0, 1, "", "interpolate"], [820, 0, 1, "", "join"], [821, 0, 1, "", "join_asof"], [822, 0, 1, "", "last"], [823, 0, 1, "", "lazy"], [824, 0, 1, "", "limit"], [825, 0, 1, "", "map_batches"], [826, 0, 1, "", "max"], [827, 0, 1, "", "mean"], [828, 0, 1, "", "median"], [829, 0, 1, "", "melt"], [830, 0, 1, "", "merge_sorted"], [831, 0, 1, "", "min"], [832, 0, 1, "", "null_count"], [833, 0, 1, "", "pipe"], [834, 0, 1, "", "profile"], [835, 0, 1, "", "quantile"], [836, 0, 1, "", "rename"], [837, 0, 1, "", "reverse"], [838, 0, 1, "", "rolling"], [839, 1, 1, "", "schema"], [840, 0, 1, "", "select"], [841, 0, 1, "", "select_seq"], [842, 0, 1, "", "serialize"], [843, 0, 1, "", "set_sorted"], [844, 0, 1, "", "shift"], [845, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [846, 0, 1, "", "slice"], [847, 0, 1, "", "sort"], [848, 0, 1, "", "sql"], [849, 0, 1, "", "std"], [850, 0, 1, "", "sum"], [851, 0, 1, "", "tail"], [852, 0, 1, "", "top_k"], [853, 0, 1, "", "unique"], [854, 0, 1, "", "unnest"], [855, 0, 1, "", "unpivot"], [856, 0, 1, "", "update"], [857, 0, 1, "", "var"], [858, 1, 1, "", "width"], [859, 0, 1, "", "with_columns"], [860, 0, 1, "", "with_columns_seq"], [861, 0, 1, "", "with_context"], [862, 0, 1, "", "with_row_count"], [863, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1287, 0, 1, "", "__enter__"], [1287, 0, 1, "", "__exit__"], [1287, 0, 1, "", "__init__"], [1269, 0, 1, "", "execute"], [1270, 0, 1, "", "execute_global"], [1271, 0, 1, "", "register"], [1272, 0, 1, "", "register_globals"], [1273, 0, 1, "", "register_many"], [1274, 0, 1, "", "tables"], [1275, 0, 1, "", "unregister"]], "polars.Series": [[895, 0, 1, "", "__array__"], [896, 0, 1, "", "__arrow_c_stream__"], [897, 0, 1, "", "__getitem__"], [898, 0, 1, "", "abs"], [899, 0, 1, "", "alias"], [900, 0, 1, "", "all"], [901, 0, 1, "", "any"], [902, 0, 1, "", "append"], [903, 0, 1, "", "arccos"], [904, 0, 1, "", "arccosh"], [905, 0, 1, "", "arcsin"], [906, 0, 1, "", "arcsinh"], [907, 0, 1, "", "arctan"], [908, 0, 1, "", "arctanh"], [909, 0, 1, "", "arg_max"], [910, 0, 1, "", "arg_min"], [911, 0, 1, "", "arg_sort"], [912, 0, 1, "", "arg_true"], [913, 0, 1, "", "arg_unique"], [944, 0, 1, "", "bottom_k"], [945, 0, 1, "", "cast"], [950, 0, 1, "", "cbrt"], [951, 0, 1, "", "ceil"], [952, 0, 1, "", "chunk_lengths"], [953, 0, 1, "", "clear"], [954, 0, 1, "", "clip"], [955, 0, 1, "", "clone"], [956, 0, 1, "", "cos"], [957, 0, 1, "", "cosh"], [958, 0, 1, "", "cot"], [959, 0, 1, "", "count"], [960, 0, 1, "", "cum_count"], [961, 0, 1, "", "cum_max"], [962, 0, 1, "", "cum_min"], [963, 0, 1, "", "cum_prod"], [964, 0, 1, "", "cum_sum"], [965, 0, 1, "", "cumulative_eval"], [966, 0, 1, "", "cut"], [967, 0, 1, "", "describe"], [968, 0, 1, "", "diff"], [969, 0, 1, "", "dot"], [970, 0, 1, "", "drop_nans"], [971, 0, 1, "", "drop_nulls"], [1020, 1, 1, "", "dtype"], [1021, 0, 1, "", "entropy"], [1022, 0, 1, "", "eq"], [1023, 0, 1, "", "eq_missing"], [1024, 0, 1, "", "equals"], [1025, 0, 1, "", "estimated_size"], [1026, 0, 1, "", "ewm_mean"], [1027, 0, 1, "", "ewm_mean_by"], [1028, 0, 1, "", "ewm_std"], [1029, 0, 1, "", "ewm_var"], [1030, 0, 1, "", "exp"], [1031, 0, 1, "", "explode"], [1032, 0, 1, "", "extend"], [1033, 0, 1, "", "extend_constant"], [1034, 0, 1, "", "fill_nan"], [1035, 0, 1, "", "fill_null"], [1036, 0, 1, "", "filter"], [1037, 1, 1, "", "flags"], [1038, 0, 1, "", "floor"], [1039, 0, 1, "", "gather"], [1040, 0, 1, "", "gather_every"], [1041, 0, 1, "", "ge"], [1042, 0, 1, "", "get_chunks"], [1043, 0, 1, "", "gt"], [1044, 0, 1, "", "has_nulls"], [1045, 0, 1, "", "has_validity"], [1046, 0, 1, "", "hash"], [1047, 0, 1, "", "head"], [1048, 0, 1, "", "hist"], [1049, 0, 1, "", "implode"], [1050, 0, 1, "", "interpolate"], [1051, 0, 1, "", "interpolate_by"], [1052, 0, 1, "", "is_between"], [1053, 0, 1, "", "is_duplicated"], [1054, 0, 1, "", "is_empty"], [1055, 0, 1, "", "is_finite"], [1056, 0, 1, "", "is_first_distinct"], [1057, 0, 1, "", "is_in"], [1058, 0, 1, "", "is_infinite"], [1059, 0, 1, "", "is_last_distinct"], [1060, 0, 1, "", "is_nan"], [1061, 0, 1, "", "is_not_nan"], [1062, 0, 1, "", "is_not_null"], [1063, 0, 1, "", "is_null"], [1064, 0, 1, "", "is_sorted"], [1065, 0, 1, "", "is_unique"], [1066, 0, 1, "", "item"], [1067, 0, 1, "", "kurtosis"], [1068, 0, 1, "", "le"], [1069, 0, 1, "", "len"], [1070, 0, 1, "", "limit"], [1111, 0, 1, "", "log"], [1112, 0, 1, "", "log10"], [1113, 0, 1, "", "log1p"], [1114, 0, 1, "", "lower_bound"], [1115, 0, 1, "", "lt"], [1116, 0, 1, "", "map_elements"], [1117, 0, 1, "", "max"], [1118, 0, 1, "", "mean"], [1119, 0, 1, "", "median"], [1120, 0, 1, "", "min"], [1121, 0, 1, "", "mode"], [1122, 0, 1, "", "n_chunks"], [1123, 0, 1, "", "n_unique"], [1124, 1, 1, "", "name"], [1125, 0, 1, "", "nan_max"], [1126, 0, 1, "", "nan_min"], [1127, 0, 1, "", "ne"], [1128, 0, 1, "", "ne_missing"], [1129, 0, 1, "", "new_from_index"], [1130, 0, 1, "", "not_"], [1131, 0, 1, "", "null_count"], [1132, 0, 1, "", "pct_change"], [1133, 0, 1, "", "peak_max"], [1134, 0, 1, "", "peak_min"], [1265, 1, 1, "", "plot"], [1135, 0, 1, "", "pow"], [1136, 0, 1, "", "product"], [1137, 0, 1, "", "qcut"], [1138, 0, 1, "", "quantile"], [1139, 0, 1, "", "rank"], [1140, 0, 1, "", "rechunk"], [1141, 0, 1, "", "reinterpret"], [1142, 0, 1, "", "rename"], [1143, 0, 1, "", "replace"], [1144, 0, 1, "", "replace_strict"], [1145, 0, 1, "", "reshape"], [1146, 0, 1, "", "reverse"], [1147, 0, 1, "", "rle"], [1148, 0, 1, "", "rle_id"], [1149, 0, 1, "", "rolling_map"], [1150, 0, 1, "", "rolling_max"], [1151, 0, 1, "", "rolling_mean"], [1152, 0, 1, "", "rolling_median"], [1153, 0, 1, "", "rolling_min"], [1154, 0, 1, "", "rolling_quantile"], [1155, 0, 1, "", "rolling_skew"], [1156, 0, 1, "", "rolling_std"], [1157, 0, 1, "", "rolling_sum"], [1158, 0, 1, "", "rolling_var"], [1159, 0, 1, "", "round"], [1160, 0, 1, "", "round_sig_figs"], [1161, 0, 1, "", "sample"], [1162, 0, 1, "", "scatter"], [1163, 0, 1, "", "search_sorted"], [1164, 0, 1, "", "set"], [1165, 0, 1, "", "set_sorted"], [1166, 1, 1, "", "shape"], [1167, 0, 1, "", "shift"], [1168, 0, 1, "", "shrink_dtype"], [1169, 0, 1, "", "shrink_to_fit"], [1170, 0, 1, "", "shuffle"], [1171, 0, 1, "", "sign"], [1172, 0, 1, "", "sin"], [1173, 0, 1, "", "sinh"], [1174, 0, 1, "", "skew"], [1175, 0, 1, "", "slice"], [1176, 0, 1, "", "sort"], [1177, 0, 1, "", "sqrt"], [1178, 0, 1, "", "std"], [1231, 0, 1, "", "sum"], [1232, 0, 1, "", "tail"], [1233, 0, 1, "", "tan"], [1234, 0, 1, "", "tanh"], [1235, 0, 1, "", "to_arrow"], [1236, 0, 1, "", "to_dummies"], [1237, 0, 1, "", "to_frame"], [1238, 0, 1, "", "to_init_repr"], [1239, 0, 1, "", "to_jax"], [1240, 0, 1, "", "to_list"], [1241, 0, 1, "", "to_numpy"], [1242, 0, 1, "", "to_pandas"], [1243, 0, 1, "", "to_physical"], [1244, 0, 1, "", "to_torch"], [1245, 0, 1, "", "top_k"], [1246, 0, 1, "", "unique"], [1247, 0, 1, "", "unique_counts"], [1248, 0, 1, "", "upper_bound"], [1249, 0, 1, "", "value_counts"], [1250, 0, 1, "", "var"], [1251, 0, 1, "", "zip_with"]], "polars.Series.arr": [[914, 0, 1, "", "all"], [915, 0, 1, "", "any"], [916, 0, 1, "", "arg_max"], [917, 0, 1, "", "arg_min"], [918, 0, 1, "", "contains"], [919, 0, 1, "", "count_matches"], [920, 0, 1, "", "explode"], [921, 0, 1, "", "first"], [922, 0, 1, "", "get"], [923, 0, 1, "", "join"], [924, 0, 1, "", "last"], [925, 0, 1, "", "max"], [926, 0, 1, "", "median"], [927, 0, 1, "", "min"], [928, 0, 1, "", "n_unique"], [929, 0, 1, "", "reverse"], [930, 0, 1, "", "shift"], [931, 0, 1, "", "sort"], [932, 0, 1, "", "std"], [933, 0, 1, "", "sum"], [934, 0, 1, "", "to_list"], [935, 0, 1, "", "to_struct"], [936, 0, 1, "", "unique"], [937, 0, 1, "", "var"]], "polars.Series.bin": [[938, 0, 1, "", "contains"], [939, 0, 1, "", "decode"], [940, 0, 1, "", "encode"], [941, 0, 1, "", "ends_with"], [942, 0, 1, "", "size"], [943, 0, 1, "", "starts_with"]], "polars.Series.cat": [[946, 0, 1, "", "get_categories"], [947, 0, 1, "", "is_local"], [948, 0, 1, "", "to_local"], [949, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[972, 0, 1, "", "add_business_days"], [973, 0, 1, "", "base_utc_offset"], [974, 0, 1, "", "cast_time_unit"], [975, 0, 1, "", "century"], [976, 0, 1, "", "combine"], [977, 0, 1, "", "convert_time_zone"], [978, 0, 1, "", "date"], [979, 0, 1, "", "datetime"], [980, 0, 1, "", "day"], [981, 0, 1, "", "dst_offset"], [982, 0, 1, "", "epoch"], [983, 0, 1, "", "hour"], [984, 0, 1, "", "is_leap_year"], [985, 0, 1, "", "iso_year"], [986, 0, 1, "", "max"], [987, 0, 1, "", "mean"], [988, 0, 1, "", "median"], [989, 0, 1, "", "microsecond"], [990, 0, 1, "", "millennium"], [991, 0, 1, "", "millisecond"], [992, 0, 1, "", "min"], [993, 0, 1, "", "minute"], [994, 0, 1, "", "month"], [995, 0, 1, "", "month_end"], [996, 0, 1, "", "month_start"], [997, 0, 1, "", "nanosecond"], [998, 0, 1, "", "offset_by"], [999, 0, 1, "", "ordinal_day"], [1000, 0, 1, "", "quarter"], [1001, 0, 1, "", "replace_time_zone"], [1002, 0, 1, "", "round"], [1003, 0, 1, "", "second"], [1004, 0, 1, "", "strftime"], [1005, 0, 1, "", "time"], [1006, 0, 1, "", "timestamp"], [1007, 0, 1, "", "to_string"], [1008, 0, 1, "", "total_days"], [1009, 0, 1, "", "total_hours"], [1010, 0, 1, "", "total_microseconds"], [1011, 0, 1, "", "total_milliseconds"], [1012, 0, 1, "", "total_minutes"], [1013, 0, 1, "", "total_nanoseconds"], [1014, 0, 1, "", "total_seconds"], [1015, 0, 1, "", "truncate"], [1016, 0, 1, "", "week"], [1017, 0, 1, "", "weekday"], [1018, 0, 1, "", "with_time_unit"], [1019, 0, 1, "", "year"]], "polars.Series.list": [[1071, 0, 1, "", "all"], [1072, 0, 1, "", "any"], [1073, 0, 1, "", "arg_max"], [1074, 0, 1, "", "arg_min"], [1075, 0, 1, "", "concat"], [1076, 0, 1, "", "contains"], [1077, 0, 1, "", "count_matches"], [1078, 0, 1, "", "diff"], [1079, 0, 1, "", "drop_nulls"], [1080, 0, 1, "", "eval"], [1081, 0, 1, "", "explode"], [1082, 0, 1, "", "first"], [1083, 0, 1, "", "gather"], [1084, 0, 1, "", "gather_every"], [1085, 0, 1, "", "get"], [1086, 0, 1, "", "head"], [1087, 0, 1, "", "join"], [1088, 0, 1, "", "last"], [1089, 0, 1, "", "len"], [1090, 0, 1, "", "max"], [1091, 0, 1, "", "mean"], [1092, 0, 1, "", "median"], [1093, 0, 1, "", "min"], [1094, 0, 1, "", "n_unique"], [1095, 0, 1, "", "reverse"], [1096, 0, 1, "", "sample"], [1097, 0, 1, "", "set_difference"], [1098, 0, 1, "", "set_intersection"], [1099, 0, 1, "", "set_symmetric_difference"], [1100, 0, 1, "", "set_union"], [1101, 0, 1, "", "shift"], [1102, 0, 1, "", "slice"], [1103, 0, 1, "", "sort"], [1104, 0, 1, "", "std"], [1105, 0, 1, "", "sum"], [1106, 0, 1, "", "tail"], [1107, 0, 1, "", "to_array"], [1108, 0, 1, "", "to_struct"], [1109, 0, 1, "", "unique"], [1110, 0, 1, "", "var"]], "polars.Series.str": [[1179, 0, 1, "", "concat"], [1180, 0, 1, "", "contains"], [1181, 0, 1, "", "contains_any"], [1182, 0, 1, "", "count_matches"], [1183, 0, 1, "", "decode"], [1184, 0, 1, "", "encode"], [1185, 0, 1, "", "ends_with"], [1186, 0, 1, "", "explode"], [1187, 0, 1, "", "extract"], [1188, 0, 1, "", "extract_all"], [1189, 0, 1, "", "extract_groups"], [1190, 0, 1, "", "extract_many"], [1191, 0, 1, "", "find"], [1192, 0, 1, "", "head"], [1193, 0, 1, "", "join"], [1194, 0, 1, "", "json_decode"], [1195, 0, 1, "", "json_path_match"], [1196, 0, 1, "", "len_bytes"], [1197, 0, 1, "", "len_chars"], [1198, 0, 1, "", "pad_end"], [1199, 0, 1, "", "pad_start"], [1200, 0, 1, "", "replace"], [1201, 0, 1, "", "replace_all"], [1202, 0, 1, "", "replace_many"], [1203, 0, 1, "", "reverse"], [1204, 0, 1, "", "slice"], [1205, 0, 1, "", "split"], [1206, 0, 1, "", "split_exact"], [1207, 0, 1, "", "splitn"], [1208, 0, 1, "", "starts_with"], [1209, 0, 1, "", "strip_chars"], [1210, 0, 1, "", "strip_chars_end"], [1211, 0, 1, "", "strip_chars_start"], [1212, 0, 1, "", "strip_prefix"], [1213, 0, 1, "", "strip_suffix"], [1214, 0, 1, "", "strptime"], [1215, 0, 1, "", "tail"], [1216, 0, 1, "", "to_date"], [1217, 0, 1, "", "to_datetime"], [1218, 0, 1, "", "to_decimal"], [1219, 0, 1, "", "to_integer"], [1220, 0, 1, "", "to_lowercase"], [1221, 0, 1, "", "to_time"], [1222, 0, 1, "", "to_titlecase"], [1223, 0, 1, "", "to_uppercase"], [1224, 0, 1, "", "zfill"]], "polars.Series.struct": [[1225, 0, 1, "", "field"], [1226, 3, 1, "", "fields"], [1227, 0, 1, "", "json_encode"], [1228, 0, 1, "", "rename_fields"], [1229, 3, 1, "", "schema"], [1230, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[290, 0, 1, "", "__iter__"], [291, 0, 1, "", "agg"], [292, 0, 1, "", "all"], [293, 0, 1, "", "count"], [294, 0, 1, "", "first"], [295, 0, 1, "", "head"], [296, 0, 1, "", "last"], [297, 0, 1, "", "len"], [298, 0, 1, "", "map_groups"], [299, 0, 1, "", "max"], [300, 0, 1, "", "mean"], [301, 0, 1, "", "median"], [302, 0, 1, "", "min"], [303, 0, 1, "", "n_unique"], [304, 0, 1, "", "quantile"], [305, 0, 1, "", "sum"], [306, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[864, 0, 1, "", "agg"], [865, 0, 1, "", "all"], [866, 0, 1, "", "count"], [867, 0, 1, "", "first"], [868, 0, 1, "", "head"], [869, 0, 1, "", "last"], [870, 0, 1, "", "len"], [871, 0, 1, "", "map_groups"], [872, 0, 1, "", "max"], [873, 0, 1, "", "mean"], [874, 0, 1, "", "median"], [875, 0, 1, "", "min"], [876, 0, 1, "", "n_unique"], [877, 0, 1, "", "quantile"], [878, 0, 1, "", "sum"], [879, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[880, 0, 1, "", "cancel"], [881, 0, 1, "", "fetch"], [882, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[891, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[893, 4, 1, "", "all"], [893, 4, 1, "", "alpha"], [893, 4, 1, "", "alphanumeric"], [893, 4, 1, "", "binary"], [893, 4, 1, "", "boolean"], [893, 4, 1, "", "by_dtype"], [893, 4, 1, "", "by_index"], [893, 4, 1, "", "by_name"], [893, 4, 1, "", "categorical"], [893, 4, 1, "", "contains"], [893, 4, 1, "", "date"], [893, 4, 1, "", "datetime"], [893, 4, 1, "", "decimal"], [893, 4, 1, "", "digit"], [893, 4, 1, "", "duration"], [893, 4, 1, "", "ends_with"], [893, 4, 1, "", "exclude"], [893, 4, 1, "", "expand_selector"], [893, 4, 1, "", "first"], [893, 4, 1, "", "float"], [893, 4, 1, "", "integer"], [893, 4, 1, "", "is_selector"], [893, 4, 1, "", "last"], [893, 4, 1, "", "matches"], [893, 4, 1, "", "numeric"], [893, 4, 1, "", "signed_integer"], [893, 4, 1, "", "starts_with"], [893, 4, 1, "", "string"], [893, 4, 1, "", "temporal"], [893, 4, 1, "", "time"], [893, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 163, 175, 176, 187, 190, 195, 198, 203, 204, 209, 215, 218, 219, 228, 235, 237, 242, 244, 247, 250, 251, 258, 267, 270, 275, 277, 278, 279, 280, 281, 286, 287, 312, 349, 372, 373, 400, 405, 423, 426, 446, 452, 456, 484, 505, 534, 535, 545, 553, 558, 565, 566, 573, 574, 585, 592, 626, 630, 637, 638, 639, 641, 642, 650, 651, 654, 655, 657, 664, 665, 666, 667, 671, 675, 677, 678, 686, 695, 696, 697, 698, 703, 709, 712, 715, 716, 725, 726, 728, 729, 735, 738, 739, 740, 741, 743, 745, 746, 748, 755, 757, 759, 760, 761, 767, 773, 777, 793, 795, 806, 815, 816, 821, 829, 840, 841, 847, 852, 853, 854, 855, 856, 859, 860, 871, 887, 892, 893, 897, 898, 899, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 980, 981, 982, 984, 986, 987, 988, 990, 991, 992, 995, 996, 999, 1002, 1003, 1004, 1007, 1015, 1017, 1018, 1019, 1020, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1260, 1265, 1269, 1273, 1276, 1282, 1283], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 193, 194, 195, 197, 198, 201, 202, 203, 204, 205, 209, 210, 214, 216, 217, 218, 220, 222, 224, 225, 226, 227, 228, 231, 232, 233, 234, 237, 238, 239, 242, 244, 246, 247, 248, 249, 250, 257, 258, 259, 260, 262, 267, 268, 269, 270, 271, 272, 274, 276, 280, 282, 283, 286, 288, 289, 291, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 312, 315, 316, 320, 322, 323, 325, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 345, 348, 358, 361, 363, 369, 373, 375, 376, 378, 379, 380, 387, 388, 389, 393, 394, 395, 401, 402, 406, 409, 411, 412, 416, 422, 424, 429, 430, 432, 433, 437, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 455, 456, 458, 460, 461, 463, 465, 467, 470, 471, 474, 477, 479, 480, 481, 482, 484, 486, 491, 492, 495, 498, 501, 502, 503, 509, 510, 522, 526, 528, 529, 530, 531, 533, 534, 536, 537, 538, 541, 545, 550, 551, 552, 554, 556, 565, 566, 567, 568, 569, 571, 572, 574, 577, 578, 580, 581, 582, 583, 587, 588, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 620, 621, 622, 623, 627, 628, 629, 632, 636, 637, 638, 641, 678, 679, 680, 682, 683, 684, 687, 692, 693, 695, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 713, 720, 724, 727, 733, 734, 736, 739, 742, 743, 744, 748, 750, 751, 756, 763, 764, 765, 766, 767, 768, 773, 777, 792, 795, 796, 797, 800, 802, 803, 805, 807, 808, 810, 811, 812, 814, 815, 816, 819, 820, 823, 825, 828, 829, 832, 834, 835, 839, 840, 845, 847, 848, 849, 857, 859, 861, 862, 863, 864, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 887, 893, 897, 903, 904, 905, 906, 907, 908, 909, 911, 913, 916, 922, 932, 935, 937, 942, 945, 948, 950, 951, 953, 956, 957, 958, 965, 966, 967, 969, 970, 971, 972, 979, 983, 987, 988, 989, 991, 993, 997, 1003, 1010, 1011, 1013, 1014, 1018, 1021, 1026, 1027, 1028, 1029, 1034, 1038, 1040, 1045, 1046, 1048, 1050, 1051, 1055, 1058, 1060, 1061, 1062, 1063, 1066, 1067, 1073, 1074, 1077, 1080, 1083, 1084, 1085, 1091, 1092, 1104, 1108, 1110, 1111, 1112, 1113, 1114, 1118, 1119, 1125, 1126, 1132, 1135, 1137, 1138, 1139, 1143, 1144, 1148, 1149, 1151, 1152, 1154, 1155, 1156, 1158, 1159, 1160, 1161, 1163, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1182, 1186, 1187, 1188, 1191, 1195, 1233, 1234, 1236, 1239, 1241, 1242, 1243, 1244, 1248, 1250, 1260, 1265, 1269, 1275, 1277, 1278, 1281, 1282, 1284, 1285, 1287, 1289, 1290], "00": [27, 36, 62, 176, 183, 204, 282, 312, 396, 397, 400, 404, 414, 415, 417, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 596, 598, 600, 602, 604, 607, 609, 611, 664, 667, 671, 720, 721, 722, 723, 763, 764, 765, 777, 795, 803, 816, 887, 893, 973, 974, 977, 978, 979, 981, 982, 983, 988, 989, 993, 995, 996, 997, 998, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1214, 1217, 1221, 1282], "000": [9, 10, 27, 36, 312, 1290], "0000": [274, 312, 1244, 1260, 1290], "000000": [366, 367, 633, 939, 940, 1183], "00000001": [11, 694, 777], "00000010": [694, 777], "00000011": [694, 777], "00000100": [694, 777], "00001000": [694, 777], "00001010": [694, 777], "00001011": [694, 777], "0000e": 11, "0000ff": [366, 367, 633, 939, 940, 1183], "0005": 893, "00050": 893, "001": [49, 674, 723, 1010, 1011, 1013, 1224], "002": [723, 1010, 1011, 1013], "005": [1021, 1260], "00prefix": 893, "00z": [664, 667, 1214, 1217], "01": [28, 47, 61, 62, 159, 176, 183, 202, 204, 219, 244, 282, 312, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 664, 666, 667, 671, 705, 717, 718, 719, 720, 721, 722, 723, 777, 795, 803, 816, 821, 838, 887, 893, 972, 974, 976, 977, 978, 979, 982, 983, 988, 989, 993, 995, 996, 997, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1214, 1216, 1217, 1221, 1282, 1285], "010": [9, 669, 1219], "01000": 28, "01000010": [694, 777], "01000110": [694, 777], "012": [613, 777, 1160, 1260], "0123": [674, 1224], "01234": [613, 777, 1160, 1260], "015625": [1135, 1260], "02": [47, 176, 183, 202, 204, 244, 282, 312, 395, 397, 399, 405, 414, 415, 417, 420, 425, 428, 431, 433, 437, 593, 596, 598, 600, 602, 604, 607, 609, 611, 612, 664, 666, 667, 671, 705, 717, 718, 719, 720, 721, 722, 723, 777, 795, 803, 816, 838, 887, 893, 935, 974, 976, 978, 979, 982, 983, 988, 989, 993, 995, 996, 997, 1001, 1002, 1005, 1006, 1009, 1012, 1014, 1015, 1108, 1214, 1216, 1217, 1221, 1282, 1283], "03": [47, 123, 129, 176, 204, 219, 244, 282, 312, 397, 399, 400, 405, 414, 415, 417, 420, 421, 423, 425, 426, 427, 428, 431, 433, 434, 437, 443, 456, 593, 596, 598, 600, 602, 604, 607, 609, 611, 666, 671, 717, 718, 719, 720, 721, 722, 723, 777, 795, 816, 821, 838, 887, 893, 974, 976, 977, 982, 983, 988, 989, 995, 996, 997, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1012, 1014, 1216, 1221], "037037": [1135, 1260], "04": [149, 176, 183, 204, 282, 312, 399, 400, 414, 415, 420, 421, 423, 426, 427, 428, 431, 433, 437, 596, 598, 600, 602, 604, 607, 609, 611, 664, 705, 717, 720, 721, 723, 777, 795, 803, 816, 887, 893, 977, 989, 993, 995, 996, 997, 1001, 1004, 1007, 1008, 1009, 1012, 1014, 1018, 1214, 1282], "047198": 1284, "05": [16, 149, 152, 153, 154, 155, 159, 176, 183, 282, 312, 395, 398, 399, 400, 401, 402, 406, 409, 410, 411, 412, 414, 415, 416, 420, 422, 423, 424, 426, 427, 705, 717, 718, 720, 721, 795, 803, 887, 893, 976, 977, 978, 979, 1001, 1002, 1004, 1005, 1007, 1008, 1015, 1282, 1283, 1285], "050545": 123, "0522623626787952": [1067, 1260], "0545": [978, 979, 1005], "06": [159, 176, 282, 312, 395, 399, 413, 419, 420, 421, 422, 434, 435, 717, 720, 795, 887, 893, 972, 1001, 1002, 1015], "060": [401, 402, 406, 409, 411, 412, 416, 422, 424], "0601749420166": [190, 312], "06293300616044681": [1021, 1260], "07": [16, 129, 159, 183, 312, 395, 398, 399, 410, 420, 421, 434, 664, 717, 718, 720, 721, 729, 803, 887, 893, 972, 976, 1001, 1214, 1282, 1285], "071068": [183, 312, 803, 887], "08": [129, 152, 153, 154, 155, 183, 219, 244, 259, 312, 395, 399, 414, 415, 421, 593, 664, 721, 723, 777, 803, 821, 838, 887, 893, 972, 1002, 1015, 1214, 1282, 1283], "085537": [1030, 1260], "09": [47, 129, 183, 244, 312, 395, 399, 414, 415, 593, 668, 717, 718, 720, 765, 777, 803, 838, 887, 893, 972, 1218], "090909": [574, 777], "094395": 1284, "098612": [531, 777, 1111, 1113, 1260, 1281], "0999": [398, 410], "0_": [36, 312], "0m": [404, 981], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 650, 651, 652, 656, 657, 658, 659, 660, 661, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 773, 777, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 893, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 942, 944, 945, 948, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1187, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1206, 1207, 1224, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1260, 1265, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290], "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 132, 143, 151, 178, 183, 192, 201, 202, 204, 206, 208, 209, 210, 215, 219, 221, 232, 236, 238, 242, 244, 250, 259, 263, 286, 291, 294, 296, 299, 300, 301, 302, 303, 304, 305, 312, 323, 327, 335, 336, 337, 339, 377, 383, 386, 391, 395, 396, 398, 399, 401, 402, 404, 406, 409, 410, 411, 412, 414, 415, 416, 420, 421, 422, 424, 434, 437, 443, 464, 465, 466, 470, 476, 488, 496, 502, 504, 510, 520, 522, 524, 528, 530, 544, 546, 556, 571, 574, 577, 587, 588, 593, 624, 669, 678, 681, 694, 705, 706, 713, 718, 720, 721, 724, 727, 729, 731, 737, 738, 762, 765, 777, 798, 799, 803, 816, 817, 819, 821, 824, 833, 834, 838, 840, 850, 851, 859, 864, 867, 869, 872, 873, 874, 875, 876, 877, 878, 887, 893, 954, 968, 972, 973, 975, 976, 981, 990, 1001, 1015, 1018, 1021, 1027, 1047, 1057, 1070, 1078, 1086, 1092, 1102, 1104, 1106, 1110, 1112, 1116, 1132, 1144, 1162, 1164, 1219, 1232, 1239, 1241, 1244, 1260, 1269, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1285, 1290], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 237, 255, 312, 587, 588, 617, 631, 640, 644, 652, 668, 722, 777, 844, 887, 893, 1023, 1112, 1128, 1143, 1144, 1150, 1151, 1153, 1167, 1181, 1194, 1202, 1218, 1260, 1279, 1290], "1000": [131, 190, 268, 289, 312, 328, 777, 863, 887, 1010, 1112, 1238, 1260, 1290], "10000": [129, 217, 312], "100000": [10, 27], "1000000": [11, 1013], "1001": [289, 312, 863, 887], "1002": [289, 312, 863, 887], "10047419486152048166": [205, 312], "1005": [328, 777], "100_000": [825, 887], "101": [9, 27, 399, 669, 893, 1219, 1290], "101000": 399, "10101": [27, 1285], "1010101": 9, "101514": [183, 312, 803, 887], "1024": [33, 41, 42, 45, 129, 130, 131, 139, 147, 312, 369, 887, 942], "1040361802642726": [1067, 1260], "107149": 1284, "10734580197236529959": [1046, 1260], "1073741824": [618, 777], "10783150408545073287": [205, 312], "107_930_000": 1269, "10_000": [36, 312], "10i": [204, 312, 816, 887], "10m": [421, 434, 1002, 1015], "11": [10, 16, 41, 45, 151, 159, 174, 183, 219, 244, 312, 323, 414, 415, 417, 421, 434, 458, 470, 502, 550, 574, 583, 593, 594, 608, 624, 694, 760, 765, 773, 777, 792, 798, 799, 803, 817, 821, 824, 834, 838, 851, 887, 893, 998, 1002, 1015, 1116, 1149, 1260, 1278], "110": [652, 669, 1219], "1101441246220388612": [465, 777], "111": [10, 1279], "11111": 1003, "111110": 1003, "11111001": [694, 777], "11111010": [694, 777], "11111111": 10, "112": [618, 777, 1290], "11330": 158, "1152921504606846976": [1141, 1260], "116": 158, "11638928888656214026": [465, 777], "118034": [849, 887], "11aa": 1282, "11aabb": 1282, "11h": [396, 973], "12": [26, 36, 47, 123, 129, 151, 159, 183, 204, 215, 219, 244, 259, 282, 312, 323, 385, 396, 398, 399, 403, 410, 413, 414, 415, 417, 418, 419, 421, 434, 435, 436, 443, 470, 502, 534, 574, 582, 593, 608, 618, 632, 668, 714, 717, 720, 721, 722, 738, 763, 764, 765, 777, 803, 816, 817, 821, 824, 838, 845, 851, 887, 893, 973, 975, 976, 987, 988, 990, 994, 1002, 1015, 1027, 1116, 1159, 1182, 1218, 1260, 1281, 1282, 1283, 1285, 1287, 1290], "120": [723, 1284], "1200": [613, 777, 1160, 1260], "120134": [668, 1218], "121": 1290, "123": [9, 632, 638, 651, 674, 767, 893, 1182, 1188, 1224, 1237, 1260], "123000": 893, "1232e": [956, 958, 1260], "1234": [27, 613, 777, 1160, 1260], "12345": [729, 951, 1038, 1159, 1260], "1234500": 893, "123456": [9, 893], "1234567": 27, "123456780": 123, "12346": 729, "123465": 893, "123a123": 651, "123abc": [650, 1200, 1201], "125": [1, 36, 51, 312, 321, 578, 756, 777, 848, 887, 1132, 1135, 1260], "127": [1248, 1260], "128": [49, 63, 1132, 1260], "129": [618, 777], "13": [177, 178, 183, 193, 194, 201, 209, 220, 232, 244, 286, 294, 296, 299, 300, 301, 302, 303, 304, 305, 312, 323, 395, 401, 402, 406, 409, 411, 412, 416, 422, 424, 544, 546, 593, 668, 707, 713, 716, 720, 727, 761, 763, 766, 777, 796, 797, 803, 810, 811, 823, 838, 859, 867, 869, 872, 873, 874, 875, 876, 877, 878, 887, 972, 1002, 1015, 1016, 1116, 1218, 1260], "130": 126, "13382926553367784577": [465, 777], "134821952": 1269, "134_821_952": 1269, "135": [702, 1284], "13614470193936745724": [465, 777], "13756996518000038261": [1046, 1260], "13h": [396, 973], "14": [35, 151, 183, 222, 294, 296, 299, 300, 301, 302, 303, 304, 305, 312, 396, 401, 402, 406, 409, 411, 412, 416, 422, 424, 470, 583, 720, 763, 764, 777, 803, 867, 869, 872, 873, 874, 875, 876, 877, 878, 887, 893, 973, 1002], "141592653589793": 10, "141593": [582, 777, 903, 1260, 1281, 1284], "142857": [1132, 1260], "143": [668, 1218, 1290], "1433": [34, 312], "1436e16": 159, "1438741209321515184": [205, 312], "1440": [431, 1012], "1443e235": 1290, "149": 1290, "14d": 893, "15": [10, 36, 151, 183, 204, 209, 222, 244, 312, 387, 391, 415, 421, 434, 443, 577, 593, 608, 714, 720, 763, 764, 777, 803, 816, 838, 887, 893, 965, 968, 1002, 1015, 1027, 1260, 1282], "150": [1151, 1260], "1500": [151, 162], "15000": [217, 312], "153061": [484, 777], "15836": 159, "15_000": [217, 312], "16": [1, 36, 49, 68, 78, 151, 165, 183, 204, 244, 286, 312, 383, 386, 470, 554, 578, 593, 669, 678, 713, 723, 724, 727, 777, 803, 816, 838, 845, 859, 887, 893, 1002, 1015, 1132, 1172, 1219, 1233, 1260, 1281, 1282, 1287], "165": [1002, 1015], "1656e15": [958, 1260], "166667": [1132, 1260], "1666683077": 729, "1666683099": 729, "167": 47, "16996": 1290, "16h": 893, "17": [151, 159, 190, 219, 291, 312, 443, 594, 612, 729, 764, 777, 821, 864, 887, 956, 958, 1002, 1027, 1149, 1260, 1290], "17293822569102704640": [1141, 1260], "174": 1290, "175201": [622, 777, 1173, 1260], "1755e": [156, 159], "1764": 51, "17888890": [190, 312], "179": 1290, "17_500": [217, 312], "18": [34, 123, 183, 229, 244, 312, 386, 421, 434, 437, 470, 556, 593, 678, 777, 803, 830, 834, 838, 887, 893, 1018, 1277, 1284, 1287], "180": [389, 582, 777, 1284], "1844": 159, "18446744073709551614": [1141, 1260], "185_000_000": 1269, "186": 1290, "1875": [610, 777, 857, 887], "1897": [398, 410, 975, 990], "18d": 893, "19": [134, 159, 219, 244, 312, 398, 421, 593, 598, 600, 602, 604, 668, 777, 821, 838, 887, 975, 1002, 1015, 1218], "1920": 1282, "196": 1283, "1964": [834, 887], "1969": [1282, 1283], "1970": [61, 62, 149, 1269], "1972": 1269, "1976": [408, 438], "1977": [408, 438], "1978": [401, 402, 406, 408, 409, 411, 412, 416, 422, 424, 438, 1283], "1979": [408, 438], "1985": [718, 721], "1990": [129, 1269], "1993": 1269, "1994": 1269, "1995": 129, "1998": [417, 998], "1999": [259, 312, 417, 893, 998, 1285], "199992": [825, 887], "199994": [825, 887], "199996": [825, 887], "199998": [825, 887], "1_000_000": [190, 312, 1025, 1260], "1_234_500": 893, "1d": [204, 219, 244, 282, 312, 397, 417, 421, 428, 431, 434, 437, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 723, 737, 764, 765, 777, 816, 821, 838, 887, 893, 974, 982, 988, 998, 1002, 1006, 1009, 1012, 1015, 1027, 1260], "1e": [11, 152, 153, 154, 155], "1e6": 11, "1h": [204, 219, 244, 282, 312, 404, 417, 421, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 721, 722, 764, 765, 777, 816, 821, 838, 887, 981, 983, 998, 1002, 1015, 1027, 1260], "1i": [204, 244, 282, 312, 443, 593, 777, 816, 838, 887, 1027, 1260], "1m": [204, 219, 244, 282, 312, 417, 421, 433, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1010, 1011, 1013, 1014, 1015, 1027, 1260], "1mo": [204, 219, 244, 282, 312, 400, 414, 415, 417, 420, 421, 427, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 977, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1008, 1015, 1016, 1027, 1260], "1n": [204, 219, 244, 282, 312, 417, 421, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015, 1027, 1260], "1q": [204, 219, 244, 282, 312, 417, 421, 434, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015], "1st_col": 893, "1u": [204, 219, 244, 282, 312, 417, 421, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015, 1027, 1260], "1w": [204, 219, 244, 282, 312, 417, 421, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015, 1027, 1260], "1w2d": [718, 719], "1y": [204, 219, 244, 282, 312, 417, 421, 434, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015], "1y2mo": [417, 998], "1zy3": [632, 1182], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 320, 321, 322, 323, 325, 327, 328, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 369, 371, 372, 373, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 407, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 751, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 773, 777, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 892, 893, 897, 898, 899, 902, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 942, 944, 948, 950, 951, 952, 953, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 976, 978, 979, 981, 983, 986, 987, 988, 990, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1005, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1182, 1187, 1189, 1191, 1192, 1194, 1195, 1197, 1200, 1201, 1206, 1207, 1209, 1210, 1211, 1214, 1215, 1217, 1218, 1219, 1220, 1223, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1260, 1265, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 174, 183, 192, 208, 209, 229, 236, 238, 242, 259, 269, 270, 274, 288, 293, 312, 335, 336, 337, 391, 398, 401, 402, 406, 409, 410, 411, 412, 416, 421, 422, 424, 434, 437, 458, 465, 470, 534, 541, 550, 577, 596, 598, 600, 602, 604, 607, 609, 611, 636, 678, 693, 720, 729, 737, 756, 764, 777, 792, 803, 808, 830, 833, 848, 862, 866, 887, 893, 968, 975, 979, 990, 1002, 1015, 1018, 1030, 1045, 1143, 1186, 1239, 1241, 1244, 1260, 1276, 1277, 1279, 1285], "200": [429, 430, 432, 587, 588, 777, 893, 1023, 1128, 1143, 1144, 1150, 1151, 1153, 1260, 1279], "2000": [398, 407, 410, 414, 415, 417, 893, 975, 984, 990, 995, 996, 998, 1003, 1269, 1282], "200000": [429, 825, 887], "200000000": 432, "2001": [16, 397, 398, 403, 405, 407, 410, 413, 417, 418, 419, 421, 425, 434, 435, 436, 437, 596, 598, 600, 602, 604, 607, 609, 611, 664, 777, 893, 974, 975, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1000, 1002, 1006, 1015, 1016, 1017, 1018, 1019, 1214], "2002": [129, 407, 417, 984, 998, 1019], "2003": [417, 729, 998], "2004": [417, 998], "2005": [417, 998], "2006": [417, 998], "2008": 1269, "200m": [429, 430, 432], "2010": [259, 312, 893], "2011": [396, 973], "2012": [396, 973, 1285], "2016": [219, 312, 821, 887], "2017": [219, 312, 821, 887], "2018": [219, 312, 420, 821, 887, 1001], "2019": [219, 312, 821, 887], "202": 1283, "2020": [133, 144, 176, 183, 202, 219, 244, 312, 315, 395, 400, 404, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 443, 593, 664, 666, 667, 705, 777, 795, 803, 821, 838, 887, 893, 972, 977, 981, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1027, 1214, 1216, 1217, 1260, 1283], "2021": [133, 144, 176, 183, 202, 204, 282, 312, 664, 737, 795, 803, 816, 887, 893, 978, 979, 985, 1005, 1214, 1282], "2022": [47, 176, 183, 202, 312, 399, 421, 434, 664, 718, 719, 721, 722, 723, 729, 795, 803, 887, 893, 976, 985, 1002, 1015, 1214], "2023": [16, 36, 123, 151, 217, 312, 399, 723, 737, 893, 976], "2024": [151, 395, 401, 402, 406, 409, 411, 412, 416, 422, 424, 705, 717, 718, 720, 721, 723, 893, 972, 1282, 1285], "2025": [395, 705, 893, 972], "2026": 1283, "2030": 1282, "2031": 893, "2047317070637311557": [205, 312], "2055938745": 123, "2065": [401, 402, 406, 409, 411, 412, 416, 422, 424], "2068": 159, "207": 1283, "2077": [259, 312, 893, 1282, 1283], "2095": 159, "20_000": [36, 312], "20word": 132, "21": [151, 183, 229, 261, 312, 398, 596, 598, 600, 602, 604, 607, 609, 611, 720, 729, 777, 803, 830, 887, 893, 975, 1277], "213": 1290, "2147483647": 1290, "2147483648": [1114, 1260], "21d": 893, "22": [41, 45, 151, 159, 312, 403, 418, 421, 434, 436, 437, 594, 596, 598, 600, 602, 604, 607, 609, 611, 664, 720, 773, 777, 887, 893, 1002, 1015, 1018, 1149, 1214, 1260, 1282, 1283, 1290], "221": 1290, "2246e": [1172, 1233, 1260], "225": [421, 434, 1284], "22_000_000": 1269, "23": [10, 159, 183, 204, 244, 274, 312, 399, 403, 406, 418, 421, 436, 593, 596, 598, 600, 602, 604, 607, 609, 611, 720, 723, 763, 764, 765, 777, 803, 816, 838, 848, 887, 893, 976, 983, 1244, 1260, 1289, 1290], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1269, "2337": [36, 312], "234": 27, "2345": 893, "23456789": 10, "235": 1290, "23h": 893, "24": [49, 151, 204, 219, 222, 244, 259, 282, 312, 385, 387, 403, 417, 418, 421, 428, 434, 436, 554, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 965, 998, 1002, 1009, 1015, 1066, 1260, 1282, 1289], "24030": 158, "249": [694, 777], "25": [1, 27, 36, 51, 123, 183, 204, 219, 244, 269, 274, 282, 286, 312, 369, 391, 403, 404, 418, 421, 434, 436, 443, 578, 580, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 687, 720, 721, 722, 723, 729, 739, 764, 765, 777, 803, 816, 821, 827, 838, 857, 859, 887, 893, 942, 967, 968, 981, 1002, 1015, 1021, 1027, 1048, 1132, 1137, 1260, 1277, 1281, 1287, 1288], "250": [694, 777, 1151, 1260, 1279, 1290], "2500": [217, 274, 312], "254508": [443, 777, 1027, 1260], "255": 1290, "256": [222, 312, 369, 942, 1132, 1260, 1281], "2560": 942, "259921": [375, 777, 950, 1260, 1281], "25_000_000": 1269, "26": [34, 36, 151, 156, 157, 158, 159, 163, 183, 312, 404, 435, 803, 887, 981], "266667": [183, 312, 803, 887], "27": [1, 51, 269, 305, 312, 386, 413, 419, 435, 678, 777, 878, 893, 1135, 1239, 1260, 1289, 1290], "270": 1284, "28": [265, 270, 312, 321, 420, 437, 777, 1001, 1018, 1241, 1260, 1282, 1284, 1289, 1290], "283185": [582, 777], "2846": 312, "285714": [471, 777, 1051, 1260], "289962": 1284, "28_341_469": 1269, "29": [16, 151, 396, 414, 973, 995], "29096": 1290, "290994": [849, 887], "292432": [904, 1260], "292893": [443, 777, 1027, 1260], "2_color_scal": [36, 312], "2d": [244, 269, 270, 312, 417, 593, 737, 777, 838, 887, 973, 980], "2h": [596, 598, 600, 602, 604, 607, 609, 611, 777], "2i": [204, 312, 816, 887], "2m": [893, 993], "2x": 158, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 321, 322, 323, 324, 326, 337, 338, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 397, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 552, 553, 554, 555, 556, 557, 559, 561, 563, 564, 567, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 625, 626, 627, 630, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 671, 672, 675, 676, 677, 678, 679, 681, 685, 686, 689, 690, 691, 693, 694, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 893, 898, 899, 902, 903, 905, 906, 907, 909, 910, 911, 912, 913, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 948, 950, 951, 952, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 980, 982, 983, 984, 986, 987, 988, 990, 992, 993, 994, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1013, 1015, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1183, 1184, 1185, 1187, 1188, 1189, 1192, 1193, 1194, 1196, 1197, 1200, 1201, 1202, 1203, 1204, 1208, 1215, 1216, 1221, 1222, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1260, 1265, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290], "30": [36, 183, 192, 204, 208, 236, 242, 265, 286, 312, 335, 336, 337, 391, 399, 401, 402, 406, 409, 411, 412, 413, 414, 416, 419, 420, 421, 422, 424, 427, 434, 435, 465, 541, 618, 720, 737, 763, 764, 777, 803, 808, 816, 833, 859, 887, 893, 968, 976, 995, 1001, 1002, 1008, 1015, 1045, 1260, 1276, 1277, 1279, 1281, 1282, 1284, 1285, 1288, 1290], "300": [265, 312, 464, 571, 588, 777, 893, 1144, 1150, 1151, 1153, 1260, 1279], "3000": 893, "3002": [398, 410, 975, 990], "30103": [530, 777, 1281], "3022416320763508302": [1046, 1260], "30_000": [36, 312], "30m": [204, 312, 421, 434, 816, 887, 1002, 1015], "31": [51, 183, 259, 312, 398, 399, 403, 410, 414, 417, 427, 636, 664, 717, 720, 729, 737, 756, 803, 887, 893, 973, 975, 976, 980, 990, 995, 1008, 1143, 1186, 1214, 1260, 1283, 1285, 1290], "32": [49, 61, 66, 69, 79, 214, 219, 244, 312, 554, 593, 618, 777, 821, 838, 887, 969, 999, 1132, 1154, 1260, 1277, 1282], "321": [27, 1290], "3212": [668, 1218], "321cba": 1282, "3265500": 893, "32971": [437, 1018], "32974": [437, 1018], "32976": [437, 1018], "32bit": [269, 312], "33": [183, 229, 312, 612, 777, 803, 830, 887, 1154, 1260, 1283], "333": [16, 613, 777, 1023, 1128, 1160, 1260], "33333": 1285, "333333": [210, 312, 556, 819, 887, 1132, 1158, 1260, 1277], "34": [183, 312, 664, 803, 887, 1214], "3420": [668, 1218], "343622": [623, 777], "345": [646, 647, 1196, 1197], "3456": 893, "34776706224699483": [1174, 1260], "35": [36, 312, 391, 720, 777, 968, 1260], "350": [464, 571, 777, 1151, 1260], "356": [403, 418, 436], "356194": [701, 702, 1284], "357": [403, 418, 436], "358": [403, 418, 436], "359": [403, 418, 436], "36": [183, 312, 803, 887, 1287], "360": [389, 582, 777, 1284], "361": 1290, "363961": [522, 1104], "366": [418, 999], "37": [12, 893], "370h": [443, 777, 1027, 1260], "37338": 1290, "38": [36, 123, 156, 159, 312], "38180177416060584": [605, 777, 1155, 1260], "381802": [605, 777, 1155, 1260], "386294": [531, 777, 1113, 1260, 1281], "389056": [447, 777, 1030, 1260, 1281], "39": [609, 729, 777], "39m": 893, "3_color_scal": [36, 312], "3d12h4m25": [204, 219, 244, 282, 312, 421, 434, 443, 593, 721, 722, 764, 765, 777, 816, 821, 838, 887, 1002, 1015, 1027, 1260], "3f": [132, 664, 667, 1214, 1217], "3i": [204, 244, 312, 816, 887], "3rd": [1192, 1215], "3xy": [632, 1182], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 172, 173, 174, 175, 176, 177, 178, 182, 184, 187, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 229, 231, 232, 233, 235, 236, 237, 238, 244, 246, 247, 254, 255, 258, 262, 263, 264, 265, 266, 267, 270, 273, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 320, 321, 322, 323, 325, 327, 339, 346, 347, 348, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 363, 364, 369, 371, 372, 373, 375, 376, 377, 381, 382, 385, 386, 387, 389, 392, 399, 402, 403, 410, 418, 419, 420, 421, 422, 423, 426, 428, 431, 433, 434, 436, 440, 441, 443, 447, 448, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 481, 482, 486, 487, 488, 495, 496, 497, 498, 499, 501, 502, 504, 512, 514, 515, 516, 517, 518, 519, 520, 524, 525, 530, 533, 534, 535, 552, 554, 556, 557, 559, 561, 563, 564, 567, 568, 569, 572, 573, 575, 576, 577, 578, 581, 583, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 620, 624, 625, 626, 627, 630, 632, 638, 641, 642, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 662, 663, 664, 665, 669, 674, 675, 677, 678, 679, 681, 684, 685, 686, 687, 693, 694, 696, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 720, 721, 722, 724, 726, 727, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 773, 777, 792, 793, 795, 796, 797, 798, 799, 802, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 838, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 893, 897, 902, 904, 911, 918, 920, 921, 922, 924, 925, 926, 927, 928, 930, 932, 933, 934, 935, 936, 937, 942, 944, 951, 952, 954, 960, 965, 967, 969, 979, 983, 989, 990, 991, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1007, 1009, 1012, 1014, 1015, 1016, 1017, 1024, 1027, 1031, 1032, 1034, 1035, 1039, 1040, 1042, 1047, 1048, 1050, 1051, 1052, 1053, 1057, 1060, 1061, 1062, 1063, 1065, 1070, 1077, 1078, 1079, 1080, 1081, 1086, 1090, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1107, 1122, 1125, 1126, 1129, 1132, 1133, 1134, 1135, 1139, 1140, 1143, 1144, 1145, 1148, 1152, 1154, 1155, 1156, 1157, 1158, 1161, 1163, 1167, 1168, 1171, 1174, 1175, 1176, 1180, 1182, 1188, 1191, 1192, 1196, 1197, 1198, 1199, 1204, 1206, 1207, 1212, 1213, 1214, 1215, 1219, 1224, 1225, 1228, 1230, 1232, 1238, 1241, 1243, 1245, 1251, 1260, 1265, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290], "40": [36, 183, 192, 219, 236, 312, 421, 434, 465, 528, 668, 678, 777, 803, 821, 833, 887, 893, 985, 1015, 1110, 1218, 1276, 1277, 1279, 1282], "400": [281, 312, 429, 430, 432, 856, 887, 1150, 1151, 1153, 1260, 1279], "4000000": [1025, 1260], "404": [637, 639, 1187, 1189], "4096": 1281, "41": [183, 312, 609, 777, 803, 887, 1277, 1290], "412277": 159, "414214": [627, 777, 1177, 1260, 1281], "4160": 51, "416147": 1284, "4164": [219, 312, 821, 887], "42": [51, 183, 205, 229, 244, 312, 593, 777, 803, 830, 838, 887, 1046, 1260, 1276, 1289], "424778": [582, 777], "428571": [442, 777, 1026, 1260], "429101": 1277, "4294967296": [41, 312], "43": [183, 244, 312, 386, 593, 609, 777, 803, 838, 887], "4321": 893, "433013": [606, 777, 849, 887], "434949": 1284, "44": [10, 229, 312, 392, 777, 830, 887], "4411": [219, 312, 821, 887], "44225": [950, 1260], "444": 10, "44444444444": 10, "45": [36, 183, 244, 312, 399, 421, 434, 593, 609, 632, 638, 676, 702, 720, 737, 763, 764, 777, 803, 838, 887, 893, 976, 1002, 1015, 1182, 1188, 1227, 1281, 1282, 1284, 1288, 1290], "450": [1151, 1260], "4500000": 893, "456": [9, 10, 399, 893, 976, 1237, 1260], "456000": [399, 976], "456001\u00b5": 893, "4566": [219, 312, 821, 887], "456789": [893, 1003], "456789\u00b5": 893, "456m": 893, "457658": 1284, "459148": [439, 777], "46": 893, "4696": [219, 312, 821, 887], "47": [47, 183, 312, 609, 777, 803, 887, 893], "470": [834, 887], "47033": [605, 777, 1155, 1260], "47033046033698594": [605, 777, 1155, 1260], "475": [834, 887], "48": [12, 159, 244, 312, 593, 678, 777, 838, 887, 893], "4827": [219, 312, 821, 887], "485": 1290, "49": [183, 312, 803, 887, 893], "492474": [443, 777, 1027, 1260], "4_500_000": 893, "4ab4a": 1282, "4d": [443, 777, 1027, 1260], "4f6228": [36, 312], "4f71": [36, 312], "4x": [216, 312], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 173, 176, 177, 178, 183, 184, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 207, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 231, 232, 233, 235, 237, 238, 239, 244, 247, 254, 255, 258, 259, 262, 263, 264, 265, 266, 267, 269, 270, 273, 274, 276, 279, 280, 281, 282, 285, 286, 288, 289, 291, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 321, 322, 325, 340, 341, 346, 347, 348, 350, 352, 356, 361, 363, 369, 371, 372, 373, 376, 377, 387, 388, 389, 391, 392, 395, 398, 399, 400, 401, 402, 406, 409, 410, 411, 412, 416, 420, 422, 423, 424, 426, 427, 433, 437, 441, 443, 445, 446, 449, 451, 455, 456, 460, 461, 463, 466, 468, 470, 472, 475, 478, 479, 480, 481, 482, 486, 488, 495, 498, 499, 501, 502, 504, 507, 509, 510, 514, 515, 516, 517, 518, 519, 523, 524, 528, 534, 552, 554, 556, 568, 572, 573, 574, 575, 576, 577, 578, 580, 581, 583, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 606, 608, 609, 610, 611, 612, 615, 620, 626, 632, 641, 642, 645, 646, 647, 665, 669, 679, 681, 685, 686, 687, 699, 701, 702, 704, 705, 706, 707, 709, 711, 713, 714, 715, 716, 717, 718, 720, 723, 724, 725, 726, 727, 731, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 756, 758, 760, 761, 762, 766, 773, 777, 795, 796, 797, 798, 799, 803, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 827, 828, 834, 838, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 858, 859, 862, 863, 864, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 887, 893, 902, 904, 908, 911, 914, 915, 918, 920, 921, 922, 924, 926, 930, 935, 936, 937, 942, 944, 952, 954, 961, 965, 966, 967, 968, 969, 972, 975, 976, 977, 978, 979, 980, 990, 1001, 1003, 1004, 1005, 1007, 1008, 1014, 1016, 1017, 1018, 1024, 1027, 1029, 1031, 1032, 1033, 1042, 1047, 1048, 1050, 1052, 1056, 1059, 1070, 1077, 1080, 1081, 1086, 1089, 1092, 1096, 1097, 1098, 1099, 1100, 1101, 1105, 1106, 1110, 1114, 1122, 1129, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1144, 1145, 1148, 1149, 1150, 1151, 1153, 1154, 1157, 1161, 1163, 1168, 1171, 1174, 1177, 1182, 1191, 1192, 1195, 1196, 1215, 1219, 1232, 1239, 1241, 1244, 1245, 1248, 1251, 1260, 1265, 1270, 1273, 1275, 1277, 1278, 1281, 1282, 1283, 1284, 1287, 1289, 1290], "50": [12, 27, 36, 183, 192, 202, 312, 377, 421, 434, 718, 719, 777, 803, 887, 893, 954, 967, 1015, 1260, 1276], "500": [36, 281, 312, 401, 402, 406, 409, 411, 412, 416, 422, 424, 856, 887, 989, 991, 997, 1150, 1151, 1153, 1260], "5000": [274, 312, 1244, 1260], "50000": 130, "500000": [409, 989], "500000000": [416, 997], "5000555": 893, "500_000": [401, 402, 406, 409, 411, 412, 416, 422, 424], "500m": [989, 991, 997], "51": 893, "512": [41, 131, 216, 312, 369, 578, 777, 942, 1132, 1260], "51966": [669, 1219], "52": [286, 312, 435, 612, 777, 859, 887], "523599": 1284, "527525": [1156, 1260], "53": [435, 1016, 1287], "533316061": 1269, "533_316_061": 1269, "54": [447, 777, 1067, 1260, 1281, 1290], "540": [389, 582, 777], "540302": 1284, "543": 9, "543081": [379, 777, 957, 1260], "5432": 131, "54321": 9, "544": 1290, "544705": 709, "549306": [908, 1260], "55": [36, 49, 312, 1282, 1283], "5555": 893, "55550": 893, "56": [123, 682, 777], "566371": [582, 777], "567": 27, "56789": [951, 1038, 1159, 1260], "57": [609, 777, 1159, 1260, 1284, 1290], "570796": [329, 331, 777, 903, 905, 1260, 1284], "575050513": [156, 159], "58": [237, 312], "581139": [967, 1260], "584963": [529, 777], "587401": [375, 777, 1281], "59": [123, 183, 312, 399, 412, 422, 456, 720, 763, 764, 765, 777, 803, 887, 893, 976, 993, 1003], "59815": [447, 777, 1281], "5_000_555": 893, "5th": [36, 312], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 173, 176, 179, 180, 184, 185, 186, 187, 188, 189, 191, 192, 195, 198, 199, 200, 201, 202, 204, 206, 208, 209, 210, 212, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 234, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 276, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 295, 305, 306, 312, 315, 316, 321, 325, 346, 347, 348, 350, 356, 364, 372, 373, 385, 386, 392, 395, 399, 403, 413, 417, 418, 419, 429, 430, 432, 435, 436, 439, 441, 450, 451, 456, 457, 460, 466, 468, 470, 488, 489, 490, 499, 502, 515, 516, 517, 518, 522, 534, 535, 568, 572, 579, 582, 583, 584, 589, 591, 593, 595, 597, 599, 601, 603, 606, 608, 609, 610, 615, 626, 632, 636, 646, 647, 669, 679, 681, 686, 694, 696, 698, 705, 713, 714, 715, 717, 720, 724, 727, 733, 738, 739, 743, 756, 760, 773, 777, 795, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 812, 813, 814, 816, 817, 819, 820, 821, 822, 824, 825, 832, 834, 836, 838, 839, 840, 842, 844, 845, 846, 847, 848, 851, 854, 855, 858, 859, 862, 863, 868, 878, 879, 887, 893, 918, 920, 921, 922, 924, 930, 952, 956, 958, 963, 964, 969, 972, 998, 1017, 1024, 1031, 1042, 1048, 1071, 1072, 1081, 1084, 1097, 1098, 1099, 1100, 1104, 1122, 1136, 1139, 1140, 1145, 1147, 1152, 1154, 1156, 1158, 1163, 1168, 1182, 1186, 1196, 1219, 1231, 1241, 1260, 1265, 1270, 1273, 1275, 1277, 1278, 1281, 1287, 1288, 1290], "60": [36, 126, 192, 237, 312, 406, 411, 412, 422, 433, 456, 609, 664, 777, 999, 1003, 1014, 1141, 1214, 1260, 1284], "600": [281, 312, 429, 430, 432, 856, 887, 893], "60000": 409, "600000": 893, "60000000": 416, "60206": [530, 777, 1281], "605551": 758, "605551275463989": 758, "609438": 1281, "60_000": [401, 402, 406, 409, 411, 412, 416, 422, 424], "61": [237, 312], "625": [603, 777], "626172": [634, 1184], "63": [609, 777], "63204": 1290, "6331e16": [1233, 1260, 1284], "636253": 1284, "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 172, 274, 312, 380, 554, 578, 777, 1132, 1135, 1260, 1281], "64030": [669, 1219], "642093": 1284, "647961": 159, "64bit": [151, 585, 777, 1141, 1260], "65": [1021, 1260], "650": [464, 571, 777], "65280": [669, 1219], "654": [27, 756, 848, 887], "65432": 1285, "65536": 1281, "66": [219, 281, 312, 609, 694, 777, 821, 856, 887, 1067, 1154, 1260], "663053": 123, "666": 893, "666000": 893, "666667": [183, 210, 283, 300, 312, 442, 742, 777, 803, 819, 857, 873, 887, 1026, 1260], "666f6f": [634, 1184], "678": [632, 638, 1182, 1188], "6789": [28, 893], "67890": 28, "686241": 1277, "69": [609, 777, 1067, 1260], "693147": [531, 777, 1111, 1113, 1260, 1281], "6_000_000": 1269, "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 173, 176, 179, 180, 181, 183, 185, 186, 188, 189, 191, 195, 198, 200, 204, 206, 208, 210, 218, 221, 223, 225, 227, 229, 230, 234, 237, 239, 241, 242, 244, 245, 247, 248, 249, 250, 252, 255, 257, 260, 261, 262, 263, 268, 270, 271, 272, 280, 282, 283, 284, 312, 315, 316, 321, 325, 347, 348, 350, 359, 386, 398, 399, 403, 410, 418, 420, 421, 434, 436, 447, 460, 466, 470, 471, 488, 502, 515, 516, 517, 518, 572, 583, 589, 593, 608, 609, 626, 641, 668, 681, 705, 713, 714, 717, 720, 721, 727, 732, 738, 739, 756, 760, 777, 795, 800, 801, 803, 805, 807, 809, 812, 814, 816, 817, 819, 820, 824, 830, 832, 835, 836, 838, 839, 840, 844, 848, 851, 887, 893, 908, 921, 922, 924, 933, 975, 976, 980, 985, 990, 1001, 1002, 1015, 1017, 1030, 1051, 1066, 1084, 1097, 1098, 1099, 1100, 1144, 1145, 1157, 1163, 1191, 1218, 1260, 1265, 1270, 1275, 1277, 1278, 1281, 1283, 1287, 1290], "70": [183, 312, 694, 721, 777, 803, 887, 1067, 1260], "700": [281, 312, 856, 887], "702963": [36, 312], "707107": [358, 444, 606, 607, 701, 777, 932, 1028, 1260, 1284], "712389": 1284, "714": 1290, "714286": [471, 777, 1051, 1260], "718281828459045": [10, 439, 529, 777, 1021, 1111, 1260], "718282": [447, 777, 1030, 1260, 1281], "720": [389, 582, 777], "7264": 1290, "732051": [1177, 1260], "7415e16": 159, "75": [36, 183, 312, 325, 572, 580, 595, 597, 599, 601, 606, 608, 610, 739, 777, 803, 887, 893, 967, 1048, 1067, 1137, 1260, 1284, 1290], "7500": [217, 312], "7508": 1290, "754": [687, 777], "754888": [439, 777], "761594": [683, 777, 1234, 1260], "7654": 893, "765431": 1003, "7654321": 27, "76933c": [36, 312], "78": 9, "780": 9, "784": [219, 312, 821, 887], "785398": [333, 701, 702, 777, 907, 1260, 1284], "789": [10, 893], "79": [1067, 1260], "7d": 893, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 173, 176, 179, 180, 181, 183, 185, 186, 187, 188, 189, 191, 195, 198, 200, 202, 206, 208, 215, 218, 219, 221, 222, 223, 225, 227, 230, 239, 241, 242, 244, 245, 247, 248, 249, 250, 252, 255, 257, 259, 260, 261, 263, 268, 270, 271, 272, 280, 283, 284, 286, 312, 325, 327, 339, 347, 348, 350, 383, 386, 387, 399, 460, 467, 470, 471, 496, 498, 502, 515, 516, 517, 518, 554, 572, 578, 589, 590, 594, 618, 624, 626, 648, 649, 664, 694, 699, 705, 709, 711, 714, 716, 724, 726, 731, 732, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 756, 758, 761, 762, 766, 777, 795, 800, 801, 803, 805, 806, 807, 809, 812, 814, 817, 820, 821, 824, 825, 834, 836, 839, 840, 844, 848, 851, 859, 887, 893, 921, 922, 924, 958, 965, 985, 1048, 1051, 1066, 1078, 1080, 1084, 1097, 1098, 1099, 1100, 1132, 1135, 1145, 1148, 1149, 1152, 1154, 1156, 1158, 1198, 1199, 1214, 1260, 1269, 1270, 1275, 1277, 1278, 1281, 1282, 1283, 1287, 1290], "80": [36, 312], "800": [429, 430, 432], "8000": 131, "803065983": 123, "81": 1281, "814697265625": [1025, 1260], "816497": [260, 312], "8192": 129, "82": [219, 312, 821, 887], "8257e14": 1290, "83": [219, 312, 821, 887], "833": [219, 312, 821, 887], "833333": [300, 873], "848062": 1284, "848808": 159, "85": [36, 312, 1067, 1260, 1290], "850": [464, 571, 777], "8568409950394724": [1021, 1260], "8589934592": [618, 777], "86": 1290, "8601": 1282, "87": 1290, "876": 9, "88": [183, 312, 803, 887], "881374": [332, 777, 906, 1260], "888": [756, 848, 887], "8_000_000": 1269, "8a": [939, 940], "8nin": 1290, "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 173, 181, 183, 195, 197, 206, 210, 221, 222, 237, 244, 246, 247, 250, 262, 263, 280, 284, 286, 305, 312, 321, 325, 327, 339, 347, 348, 350, 355, 357, 383, 386, 389, 399, 452, 460, 470, 476, 496, 502, 513, 521, 556, 572, 582, 589, 593, 594, 605, 608, 609, 620, 624, 638, 668, 676, 678, 707, 713, 714, 717, 720, 732, 765, 777, 803, 812, 817, 819, 824, 838, 840, 851, 859, 878, 887, 893, 916, 917, 921, 922, 924, 929, 931, 967, 980, 989, 991, 997, 1002, 1015, 1016, 1057, 1066, 1078, 1084, 1095, 1103, 1145, 1149, 1155, 1157, 1159, 1171, 1188, 1218, 1227, 1260, 1269, 1270, 1275, 1278, 1287], "90": [183, 312, 668, 803, 887, 1218, 1284], "901234": [951, 1038, 1159, 1260], "909": [219, 312, 821, 887], "910": [219, 312, 638, 821, 887, 1188], "910t": [632, 638, 1182, 1188], "914": [219, 312, 821, 887], "9223372036854775807": [690, 777], "9223372036854775808": [532, 777], "927295": 1284, "928571": [445, 777, 1029, 1260], "93": [1067, 1260], "94": [322, 777], "9477376373212048": [1067, 1260], "95": [17, 322, 777, 893], "95b3d7": [36, 312], "96": [17, 183, 312, 322, 777, 803, 887, 1067, 1260], "961": 51, "963624": [444, 777, 1028, 1260], "963757": 1284, "964028": [237, 312], "96_067_179": 1269, "97": [17, 209, 312, 322, 777, 1067, 1260], "9774092659964970114": [465, 777], "978307200": [405, 982], "978307200000": 425, "978307200000000": [405, 425, 982, 1006], "978307200000000000": 1006, "978393600": [405, 982], "978393600000": 425, "978393600000000": [405, 425, 982, 1006], "978393600000000000": 1006, "978480000": [405, 982], "978480000000": 425, "978480000000000": [405, 425, 982, 1006], "978480000000000000": 1006, "98": [17, 209, 237, 312, 371, 459, 462, 625, 668, 685, 777, 1218], "987": 27, "987000": 893, "9876": 9, "987654": [27, 893], "987654321": 10, "9876543210": 123, "987m": 893, "988": 10, "99": [17, 36, 193, 194, 209, 212, 237, 281, 312, 322, 371, 449, 451, 459, 462, 625, 685, 767, 777, 810, 811, 856, 887, 1021, 1033, 1260, 1281], "9914e218": 159, "993": [1048, 1260], "998347": [237, 312], "999": [398, 410, 893, 975, 990, 1279, 1290], "999000": 893, "999954": [237, 312], "999999": [674, 720, 763, 764, 765, 893, 1224], "999999\u00b5": 893, "9bbb59": [36, 312], "A": [13, 33, 36, 41, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 180, 188, 197, 204, 218, 219, 224, 226, 231, 237, 262, 265, 280, 281, 282, 286, 287, 312, 320, 393, 394, 399, 423, 426, 440, 441, 449, 461, 463, 474, 477, 479, 480, 486, 526, 533, 534, 545, 558, 567, 568, 590, 595, 597, 599, 601, 603, 606, 608, 610, 630, 631, 632, 637, 638, 639, 640, 641, 642, 645, 647, 650, 651, 652, 654, 665, 674, 707, 723, 724, 728, 777, 801, 807, 816, 820, 821, 836, 856, 859, 860, 887, 893, 970, 971, 976, 1004, 1007, 1023, 1033, 1128, 1150, 1151, 1153, 1156, 1157, 1158, 1180, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1197, 1200, 1201, 1202, 1204, 1215, 1224, 1260, 1269, 1270, 1273, 1285, 1287], "AND": [695, 696, 756, 893], "AS": [259, 312, 756, 757, 848, 887, 1269, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1289], "And": [672, 1222], "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 195, 269, 274, 312, 526, 767, 812, 887], "At": [41, 237, 312], "BY": [756, 848, 887, 1269, 1272, 1278, 1286, 1287], "Be": 887, "By": [5, 12, 14, 30, 47, 129, 130, 143, 204, 218, 219, 244, 246, 255, 260, 282, 283, 312, 356, 417, 421, 434, 519, 522, 528, 588, 593, 596, 598, 600, 602, 604, 607, 609, 611, 617, 628, 692, 709, 711, 718, 719, 721, 722, 723, 737, 758, 764, 765, 766, 777, 798, 816, 820, 821, 838, 844, 849, 857, 887, 930, 998, 1002, 1015, 1101, 1144, 1167, 1178, 1250, 1260], "For": [14, 35, 36, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 187, 192, 218, 219, 237, 244, 269, 298, 312, 414, 415, 442, 444, 445, 456, 526, 535, 545, 585, 623, 630, 637, 638, 639, 641, 642, 665, 713, 723, 727, 728, 773, 777, 806, 821, 838, 871, 887, 891, 1026, 1028, 1029, 1032, 1116, 1141, 1174, 1180, 1187, 1188, 1189, 1191, 1192, 1215, 1239, 1260], "IF": 1280, "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 172, 187, 192, 195, 202, 204, 206, 214, 215, 216, 219, 221, 222, 226, 233, 237, 244, 246, 247, 248, 252, 255, 257, 259, 262, 263, 266, 267, 269, 270, 276, 277, 279, 280, 281, 312, 315, 324, 326, 349, 356, 361, 373, 395, 399, 400, 414, 415, 423, 426, 452, 467, 472, 484, 505, 514, 519, 520, 526, 534, 535, 541, 547, 548, 573, 578, 580, 583, 585, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 617, 619, 623, 624, 629, 638, 639, 641, 642, 643, 644, 654, 655, 656, 657, 659, 660, 661, 664, 665, 666, 667, 671, 674, 691, 695, 697, 700, 704, 705, 708, 709, 713, 718, 719, 721, 722, 723, 726, 727, 733, 734, 735, 737, 739, 749, 752, 753, 754, 759, 764, 765, 767, 768, 777, 798, 799, 806, 808, 812, 816, 820, 821, 825, 829, 836, 838, 842, 844, 846, 848, 853, 855, 856, 871, 881, 887, 891, 893, 900, 901, 923, 930, 935, 945, 954, 972, 976, 977, 995, 996, 1004, 1007, 1032, 1047, 1048, 1052, 1066, 1067, 1070, 1087, 1096, 1101, 1102, 1108, 1116, 1135, 1137, 1139, 1141, 1143, 1144, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1161, 1163, 1165, 1167, 1170, 1174, 1175, 1179, 1188, 1189, 1191, 1192, 1193, 1194, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1221, 1224, 1232, 1235, 1239, 1241, 1249, 1260, 1265, 1269, 1270, 1272, 1279, 1287], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 173, 190, 192, 195, 204, 219, 222, 233, 237, 244, 270, 279, 312, 315, 534, 535, 593, 777, 799, 812, 816, 821, 838, 855, 887, 1025, 1032, 1135, 1140, 1260, 1265], "It": [42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 170, 183, 229, 236, 259, 269, 274, 280, 281, 289, 298, 312, 315, 316, 387, 388, 421, 467, 535, 544, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 753, 754, 773, 777, 794, 798, 799, 803, 808, 825, 830, 848, 856, 863, 871, 887, 895, 949, 965, 966, 1002, 1048, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1162, 1164, 1239, 1244, 1260, 1265], "Its": [205, 312, 465, 777, 1046, 1260], "NO": 893, "NOT": [119, 215, 253, 312, 526, 543, 616, 777, 843, 887, 1287], "No": 20, "Not": [193, 312, 450, 479, 480, 777, 798, 810, 887, 1034, 1260], "ON": 1287, "OR": [697, 698, 812, 887, 893], "On": [687, 777, 823, 887], "One": [47, 183, 233, 269, 274, 312, 325, 572, 699, 710, 726, 732, 735, 742, 744, 747, 748, 757, 777, 803, 887, 893, 967, 1260], "Or": [203, 204, 219, 244, 258, 282, 291, 312, 443, 573, 593, 626, 718, 719, 721, 722, 764, 765, 767, 773, 777, 815, 816, 821, 838, 847, 864, 887, 1027, 1260], "That": [135, 825, 887], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 175, 183, 184, 186, 187, 188, 191, 192, 195, 202, 203, 204, 205, 210, 216, 219, 222, 229, 235, 237, 244, 245, 246, 247, 250, 251, 252, 259, 269, 270, 275, 278, 282, 286, 287, 289, 290, 291, 298, 312, 323, 364, 365, 366, 367, 371, 372, 388, 390, 393, 394, 395, 403, 413, 417, 418, 421, 423, 434, 435, 446, 449, 452, 456, 457, 465, 497, 501, 534, 535, 547, 573, 580, 583, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 620, 623, 629, 633, 634, 637, 642, 643, 644, 648, 649, 650, 651, 659, 660, 661, 662, 663, 664, 665, 675, 678, 685, 686, 705, 707, 725, 729, 737, 739, 753, 754, 755, 756, 759, 767, 769, 770, 772, 773, 777, 778, 779, 782, 784, 785, 786, 793, 798, 803, 804, 806, 808, 809, 812, 815, 816, 817, 819, 821, 824, 825, 830, 834, 838, 840, 841, 842, 848, 852, 854, 859, 860, 863, 864, 871, 887, 891, 892, 893, 899, 902, 938, 939, 940, 944, 953, 966, 967, 970, 971, 972, 980, 994, 998, 999, 1002, 1004, 1015, 1016, 1032, 1033, 1036, 1046, 1079, 1083, 1116, 1135, 1137, 1139, 1143, 1144, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1171, 1174, 1179, 1183, 1184, 1192, 1193, 1194, 1198, 1199, 1200, 1201, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1241, 1245, 1252, 1254, 1256, 1260, 1261, 1266, 1267, 1268, 1269, 1274, 1287, 1288, 1290], "Then": 148, "There": 1287, "These": [1, 36, 125, 131, 132, 168, 276, 312, 434, 776, 777, 891, 1002, 1015], "To": [35, 54, 193, 312, 377, 393, 394, 450, 451, 630, 636, 637, 638, 641, 650, 651, 660, 661, 662, 663, 672, 777, 810, 887, 954, 970, 971, 1034, 1180, 1186, 1187, 1188, 1191, 1200, 1201, 1222, 1241, 1260, 1287], "Will": [53, 54, 798, 799, 808, 834, 845, 887, 1260], "With": [138, 214, 255, 312, 356, 519, 617, 777, 798, 844, 887, 930, 1066, 1101, 1167, 1260], "_": [1, 47, 51, 237, 267, 271, 312, 349, 505, 631, 638, 640, 646, 647, 652, 655, 656, 845, 887, 948, 1181, 1188, 1196, 1197, 1202, 1206, 1236, 1260], "__array_ufunc__": 895, "__call__": 773, "__dataframe__": 117, "__enter__": 1287, "__exit__": 1287, "__getattr__": 773, "__getitem__": 675, "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 1287], "__name__": [217, 312], "_bar_": 728, "_btm_by_a": [372, 777], "_btm_by_b": [372, 777], "_by_ca": [372, 686, 777], "_by_cb": [372, 686, 777], "_df": [1, 48], "_diff": [286, 312, 859, 887], "_eager": [798, 887], "_expr": [1, 49], "_foo": 540, "_geventdataframeresult": [54, 799, 887], "_is_not_nan": [480, 777], "_is_odd": [250, 312, 840, 887], "_isnan": [479, 777], "_isnul": [482, 777], "_kwarg": [798, 887], "_ldf": 1, "_lf": 50, "_lower_boundari": [204, 312, 816, 887], "_max": [573, 777], "_mean_squar": [291, 864], "_min": [573, 777], "_not_nul": [481, 777], "_o": [646, 647, 1196, 1197], "_revers": [557, 561, 590, 777], "_right": [218, 219, 312, 820, 821, 887], "_suffix": 562, "_sum": [291, 864], "_top_by_a": [686, 777], "_top_by_b": [686, 777], "_train": [861, 887], "_upper_boundari": [204, 312, 816, 887], "_world": 728, "a1": [36, 48, 50, 312], "a101": 1290, "a123": [36, 312], "a2": [36, 48, 50, 312], "a_1": [656, 1206, 1236, 1260], "a_2": [1236, 1260], "a_3": [1236, 1260], "a_a": 757, "a_agg_list": [204, 312, 816, 887], "a_b_doubl": 724, "a_btm_by_a": [372, 777], "a_btm_by_b": [372, 777], "a_by_ca": [372, 686, 777], "a_by_cb": [372, 686, 777], "a_div_2": 1281, "a_div_5": 1281, "a_interpol": [471, 777], "a_is_even": [259, 312, 756, 848, 887], "a_isnul": [482, 777], "a_lag_": 707, "a_log2": 1281, "a_mod_2": 1281, "a_not_nul": [481, 777], "a_revers": [557, 561, 590, 777], "a_rol": 707, "a_suffix": 562, "a_times_2": [535, 777], "a_times_b": [534, 777], "a_top_by_a": [686, 777], "a_top_by_b": [686, 777], "a_txt": 757, "aa": [446, 630, 641, 725, 777, 893, 967, 1180, 1191, 1260, 1282], "aaa": [1, 36, 312, 630, 641, 675, 677, 893, 1180, 1191], "aaaa": [939, 940], "aabcdef": 661, "aad": [939, 940], "aag": 26, "aazz": 1282, "ab": [206, 221, 263, 286, 312, 675, 677, 777, 859, 887, 893, 1047, 1070, 1232, 1260, 1280, 1282], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 321, 638, 650, 660, 777, 893, 1188, 1200, 1201], "abc123": 1282, "abc456": [650, 1200, 1201, 1282], "abcabc": 651, "abcd": 1282, "abcdeff": 660, "abf": [133, 144, 145], "abl": [91, 131], "about": [91, 131, 623, 630, 637, 638, 641, 650, 651, 777, 891, 1174, 1180, 1187, 1188, 1191, 1200, 1201, 1260, 1290], "abov": [36, 152, 219, 237, 312, 767, 821, 887], "abs_a": 1281, "absolut": [133, 144, 145, 152, 153, 154, 155, 320, 442, 444, 445, 777, 898, 1026, 1028, 1029, 1260, 1281], "acc": [713, 714, 727, 751], "accent": 893, "accept": [127, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 159, 175, 185, 203, 250, 251, 255, 258, 275, 286, 287, 291, 312, 321, 372, 377, 446, 472, 573, 587, 588, 626, 652, 678, 686, 694, 696, 698, 703, 706, 707, 708, 716, 725, 741, 743, 746, 755, 759, 761, 767, 773, 777, 793, 805, 815, 840, 841, 844, 847, 852, 859, 860, 864, 887, 891, 892, 954, 1052, 1135, 1143, 1144, 1167, 1202, 1260], "access": [37, 48, 49, 50, 51, 135, 139, 141, 143, 145, 146, 147, 148, 172, 179, 216, 245, 246, 259, 312, 639, 675, 800, 848, 861, 887, 892, 1189, 1290], "accord": [245, 312, 580, 718, 719, 721, 722, 764, 765, 777, 985, 1137, 1260], "accordingli": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142], "account": [36, 123, 132, 145, 312, 417, 442, 444, 445, 777, 998, 1026, 1028, 1029, 1260], "accumul": [713, 714, 727, 751], "acg": 26, "achiev": [222, 237, 298, 312, 535, 647, 777, 1116, 1197, 1260], "aco": 1280, "acosd": 1280, "across": [36, 47, 132, 184, 205, 224, 226, 231, 252, 262, 312, 390, 465, 547, 696, 698, 713, 714, 716, 741, 743, 746, 761, 777, 804, 842, 887, 1046, 1260], "action": [35, 312], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 498, 638, 1080, 1188], "actual": [36, 119, 159, 163, 247, 312, 1169, 1260, 1282, 1289], "ad": [34, 36, 119, 134, 204, 259, 269, 274, 276, 281, 286, 287, 312, 327, 449, 541, 678, 713, 714, 756, 777, 816, 848, 856, 859, 860, 887, 893, 1033, 1239, 1244, 1260], "adbc": [34, 131, 132, 312], "adbc_driver_manag": 151, "adbc_ingest": [34, 312], "add": [35, 36, 130, 192, 204, 222, 286, 287, 288, 289, 312, 315, 388, 559, 560, 561, 562, 580, 678, 723, 727, 767, 777, 816, 820, 859, 860, 861, 862, 863, 887, 1032, 1260, 1265], "add_calendar_dai": 723, "add_calendar_month": 723, "add_calendar_year": 723, "add_chart": [36, 312], "add_dai": 723, "add_format": [36, 312], "add_hour": 723, "add_milli": 723, "add_second": 723, "add_seri": [36, 312], "add_week": 723, "add_worksheet": [36, 312], "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 187, 191, 203, 220, 235, 250, 251, 258, 271, 278, 286, 287, 291, 312, 321, 404, 446, 449, 573, 626, 630, 637, 638, 641, 650, 651, 675, 678, 703, 706, 707, 708, 725, 755, 756, 759, 773, 777, 809, 815, 840, 841, 847, 854, 859, 860, 864, 887, 893, 973, 981, 1033, 1180, 1187, 1188, 1191, 1200, 1201, 1242, 1260, 1270, 1287], "addition": [55, 245, 312, 893], "address": 638, "adjac": [36, 312], "adjust": [442, 444, 445, 623, 777, 1026, 1028, 1029, 1174, 1260], "adl": [133, 144, 145], "adlf": 145, "advanc": [36, 237, 312, 361, 526, 556, 559, 561, 563, 564, 935, 1108, 1290], "advantag": [36, 168, 236, 312], "advis": [36, 46, 85, 312], "aedt": 720, "aeiuo": [641, 1191], "af1": 47, "af2": 47, "af3": 47, "affect": [34, 152, 153, 154, 155, 312], "afm": 145, "afoo": [861, 887], "after": [36, 55, 119, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 175, 192, 275, 278, 312, 371, 372, 446, 573, 583, 674, 685, 686, 777, 793, 852, 854, 887, 944, 1032, 1139, 1224, 1245, 1260, 1275], "afterward": [46, 767], "ag": [229, 312, 830, 887, 1288], "again": [535, 777], "against": [34, 93, 129, 131, 195, 259, 312, 498, 641, 756, 812, 848, 887, 1080, 1191, 1269, 1287, 1289, 1290], "agg": [203, 204, 237, 244, 312, 322, 372, 452, 454, 459, 462, 534, 535, 573, 625, 626, 686, 693, 718, 721, 739, 777, 798, 799, 808, 815, 816, 834, 838, 845, 887, 893], "agg_group": [730, 777], "agg_list": [534, 777], "aggreg": [129, 130, 133, 141, 197, 203, 204, 223, 225, 227, 230, 233, 237, 238, 239, 244, 260, 261, 280, 283, 291, 292, 294, 296, 312, 322, 452, 468, 534, 535, 573, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 695, 696, 697, 698, 713, 714, 715, 716, 727, 732, 740, 741, 743, 745, 746, 751, 760, 761, 777, 816, 825, 826, 827, 828, 831, 832, 835, 838, 849, 850, 857, 864, 865, 867, 869, 887, 891, 1049, 1149, 1150, 1151, 1153, 1156, 1157, 1158, 1260, 1276, 1278, 1280, 1286], "aggregate_funct": [237, 312, 893], "aho": [631, 640, 652, 1181, 1190, 1202], "aiosqlit": 131, "alchemy_conn": 131, "algorithm": [174, 312, 328, 631, 640, 652, 699, 777, 792, 887, 1181, 1190, 1202], "alia": [1, 12, 47, 49, 51, 83, 179, 204, 221, 237, 244, 278, 286, 289, 312, 315, 321, 325, 365, 366, 367, 368, 370, 371, 382, 383, 384, 385, 386, 388, 391, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 434, 435, 436, 437, 440, 441, 454, 456, 461, 463, 469, 472, 475, 478, 486, 488, 510, 522, 528, 533, 535, 539, 541, 543, 545, 549, 552, 554, 556, 567, 568, 572, 574, 578, 580, 583, 585, 613, 615, 630, 631, 632, 633, 635, 637, 638, 640, 641, 642, 646, 647, 652, 653, 654, 655, 656, 657, 658, 662, 663, 665, 675, 676, 677, 679, 684, 685, 687, 693, 694, 700, 701, 702, 706, 707, 708, 718, 721, 723, 724, 727, 728, 733, 736, 738, 739, 751, 759, 764, 767, 777, 816, 818, 824, 838, 854, 859, 863, 887, 966, 973, 974, 977, 980, 981, 982, 983, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1070, 1137, 1142, 1187, 1188, 1206, 1207, 1260], "alias": [259, 312, 541, 848, 887], "alic": [129, 1288], "align": [10, 15, 16, 36, 47, 55, 312, 1288], "align_fram": 55, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 173, 174, 176, 183, 185, 187, 194, 206, 211, 213, 215, 216, 217, 218, 220, 221, 226, 228, 232, 233, 237, 240, 245, 246, 247, 251, 257, 258, 262, 263, 267, 269, 270, 274, 277, 279, 280, 281, 282, 287, 289, 312, 315, 325, 327, 349, 364, 372, 381, 387, 393, 394, 395, 396, 446, 451, 457, 464, 465, 468, 470, 474, 477, 481, 482, 487, 497, 498, 505, 523, 526, 534, 553, 556, 557, 559, 560, 561, 562, 563, 564, 571, 583, 588, 590, 594, 618, 624, 626, 632, 638, 639, 642, 645, 651, 659, 660, 661, 665, 686, 696, 705, 713, 714, 715, 716, 725, 727, 732, 733, 736, 743, 751, 759, 760, 761, 767, 773, 777, 783, 789, 792, 795, 798, 799, 803, 805, 806, 808, 811, 820, 825, 829, 834, 841, 845, 846, 847, 853, 855, 856, 860, 861, 863, 887, 893, 923, 965, 967, 970, 971, 972, 973, 1047, 1053, 1065, 1070, 1079, 1080, 1087, 1105, 1108, 1139, 1144, 1149, 1175, 1182, 1188, 1189, 1192, 1195, 1201, 1209, 1210, 1211, 1215, 1232, 1241, 1260, 1264, 1265, 1270, 1272, 1277, 1278, 1282, 1286, 1287, 1289, 1290], "all_compat": 1272, "all_data": 1287, "all_horizont": [187, 312, 695, 806, 887], "all_stat": 30, "alloc": [129, 130, 190, 240, 312, 777, 891, 1025, 1260], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 172, 216, 219, 220, 245, 246, 248, 270, 271, 274, 277, 290, 312, 417, 423, 426, 514, 534, 535, 541, 585, 614, 664, 666, 667, 777, 820, 821, 825, 829, 853, 861, 887, 891, 893, 998, 1004, 1007, 1096, 1116, 1141, 1161, 1214, 1216, 1217, 1241, 1242, 1260, 1282, 1290], "allow_alias": 541, "allow_chunk": [159, 163], "allow_copi": [117, 172, 270, 312, 1241, 1260], "allow_dupl": [580, 777, 1137, 1260], "allow_infin": [159, 163], "allow_nul": [156, 159, 163, 1290], "allow_object": 737, "allow_parallel": [219, 312, 820, 821, 887], "allow_pyarrow_filt": 149, "allow_time_zon": [159, 160, 163], "allowed_dtyp": [159, 160, 163, 1290], "almost": [54, 222, 298, 312, 664, 666, 667, 799, 887, 1116, 1214, 1216, 1217, 1260], "alpha": [442, 444, 445, 777, 808, 834, 845, 887, 893, 1026, 1028, 1029, 1260], "alpha_i": [443, 777, 1027, 1260], "alphabet": [893, 1290], "alphanumer": [672, 893, 1222], "alreadi": [34, 35, 92, 269, 312, 387, 498, 691, 777, 845, 887, 965, 1080, 1249, 1260], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 143, 158, 159, 162, 163, 168, 188, 203, 204, 229, 233, 237, 244, 246, 250, 258, 269, 281, 286, 289, 312, 383, 386, 395, 417, 420, 452, 472, 535, 541, 583, 587, 588, 626, 650, 651, 652, 659, 660, 675, 705, 713, 714, 717, 720, 727, 729, 751, 767, 776, 777, 783, 815, 816, 830, 838, 840, 847, 856, 859, 861, 863, 887, 893, 972, 1001, 1052, 1139, 1143, 1144, 1182, 1200, 1201, 1202, 1209, 1260, 1264, 1270, 1272, 1275, 1282, 1285, 1287, 1288], "alt": [312, 315, 1260, 1265], "altair": [151, 312, 315, 1260, 1265], "altern": [36, 312, 773, 1279], "although": [259, 312, 848, 887], "alwai": [13, 33, 35, 42, 63, 65, 129, 175, 195, 203, 218, 219, 222, 275, 298, 312, 371, 372, 534, 544, 664, 685, 686, 767, 777, 793, 812, 820, 821, 825, 852, 887, 893, 944, 1116, 1214, 1245, 1260, 1269, 1270, 1287, 1290], "am": [653, 1203], "amarillo": 1282, "ambigu": [420, 421, 434, 664, 667, 720, 1001, 1002, 1015, 1214, 1217], "america": 721, "amount": [46, 64, 85, 139, 143, 146, 147, 535, 723, 777, 1277], "amsterdam": [420, 1001], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 145, 146, 147, 148, 157, 159, 163, 176, 177, 178, 179, 185, 190, 193, 197, 199, 204, 215, 216, 217, 219, 222, 233, 237, 242, 244, 245, 249, 259, 264, 270, 274, 276, 280, 281, 286, 289, 298, 312, 315, 323, 345, 348, 360, 366, 383, 384, 385, 386, 387, 388, 395, 399, 400, 417, 420, 423, 437, 443, 451, 452, 458, 459, 462, 495, 498, 501, 503, 525, 526, 534, 535, 545, 547, 556, 557, 578, 579, 580, 588, 589, 593, 594, 595, 597, 599, 601, 603, 606, 608, 610, 629, 630, 633, 638, 641, 644, 664, 666, 667, 669, 671, 687, 695, 700, 704, 718, 719, 721, 722, 724, 726, 729, 733, 734, 735, 736, 737, 749, 751, 752, 755, 759, 764, 765, 767, 768, 773, 777, 795, 796, 797, 799, 803, 805, 808, 812, 816, 821, 825, 834, 838, 839, 845, 848, 856, 859, 861, 863, 871, 887, 891, 892, 893, 919, 922, 934, 939, 953, 955, 961, 962, 963, 964, 965, 972, 976, 1004, 1018, 1025, 1027, 1066, 1077, 1080, 1083, 1085, 1107, 1116, 1144, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1162, 1164, 1179, 1180, 1183, 1188, 1191, 1194, 1214, 1216, 1217, 1219, 1221, 1241, 1260, 1278, 1279, 1282, 1286, 1287, 1289], "ana": [653, 1203], "anan": [653, 1203], "ananab": 1282, "and_": 777, "ang": 1282, "angl": [701, 702], "ani": [4, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 173, 175, 181, 187, 192, 194, 195, 197, 199, 214, 216, 217, 218, 219, 222, 226, 236, 245, 246, 247, 259, 262, 265, 266, 269, 270, 271, 274, 275, 277, 280, 281, 289, 312, 315, 316, 321, 324, 325, 349, 371, 372, 373, 387, 388, 421, 422, 440, 441, 451, 452, 456, 459, 461, 463, 467, 476, 486, 493, 498, 505, 533, 534, 535, 541, 549, 552, 554, 556, 557, 559, 561, 563, 564, 567, 568, 572, 577, 580, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 619, 629, 631, 643, 660, 661, 662, 663, 664, 666, 667, 669, 671, 679, 685, 686, 687, 694, 695, 696, 698, 708, 709, 710, 737, 739, 753, 754, 767, 777, 793, 798, 799, 806, 808, 811, 812, 820, 821, 833, 848, 852, 853, 856, 863, 887, 891, 893, 895, 897, 900, 923, 944, 949, 965, 966, 1002, 1003, 1022, 1023, 1032, 1035, 1039, 1041, 1043, 1048, 1057, 1066, 1068, 1075, 1080, 1087, 1115, 1116, 1127, 1128, 1137, 1143, 1144, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1162, 1163, 1179, 1181, 1193, 1214, 1216, 1217, 1219, 1221, 1239, 1240, 1241, 1242, 1244, 1245, 1260, 1265, 1287, 1290], "anna": [229, 312, 830, 887], "anoth": [86, 158, 176, 184, 189, 203, 219, 252, 312, 387, 390, 397, 471, 501, 539, 543, 547, 587, 596, 598, 600, 602, 604, 607, 609, 611, 641, 777, 795, 804, 815, 821, 842, 861, 887, 965, 974, 1024, 1032, 1051, 1083, 1143, 1144, 1191, 1260, 1281, 1282], "anti": [218, 312, 820, 871, 887, 1162, 1164, 1260, 1276], "any_horizont": 697, "anyth": [35, 245, 312], "anywher": [368, 370, 664, 666, 667, 1214, 1216, 1217], "ap": 1282, "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 171, 312, 896], "apaya": [665, 1215], "api": [0, 117, 139, 141, 143, 146, 147, 148, 149, 172, 222, 298, 312, 535, 739, 777, 871, 1116, 1260, 1286], "apia": [396, 973], "app": [658, 1208], "appear": [36, 59, 119, 154, 155, 312, 689, 777, 893, 1247, 1260, 1288], "append": [34, 35, 159, 192, 218, 219, 312, 584, 767, 777, 820, 821, 887, 1032, 1260], "appl": [180, 208, 218, 241, 242, 265, 293, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 312, 372, 590, 635, 658, 686, 777, 820, 836, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 887, 1185, 1208, 1276, 1282], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 183, 197, 222, 236, 258, 259, 269, 298, 312, 337, 398, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 416, 418, 419, 422, 424, 435, 436, 438, 444, 445, 534, 535, 577, 595, 596, 597, 598, 601, 602, 608, 609, 626, 650, 651, 664, 666, 667, 671, 703, 713, 714, 727, 738, 739, 751, 756, 767, 777, 803, 817, 824, 825, 833, 847, 848, 871, 887, 954, 975, 978, 979, 980, 983, 984, 985, 989, 990, 991, 993, 994, 997, 999, 1000, 1003, 1005, 1016, 1017, 1019, 1028, 1029, 1116, 1150, 1151, 1153, 1157, 1200, 1201, 1214, 1216, 1217, 1221, 1260, 1269], "applic": [270, 312, 535, 777], "appropri": [36, 149, 195, 270, 312, 583, 777, 812, 887, 1139, 1260], "approx": [328, 777], "approx_n_uniqu": [312, 777, 887], "approxim": [41, 174, 312, 328, 443, 699, 777, 792, 887, 1027, 1260, 1281, 1290], "april": [423, 426, 1004, 1007, 1282, 1283], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 172, 175, 181, 183, 187, 190, 193, 195, 196, 197, 202, 203, 204, 216, 218, 219, 220, 222, 228, 229, 235, 237, 244, 245, 246, 247, 250, 251, 253, 255, 258, 265, 269, 270, 271, 274, 275, 279, 281, 282, 286, 287, 290, 291, 312, 324, 326, 340, 356, 361, 371, 372, 377, 383, 385, 386, 395, 421, 434, 439, 441, 442, 443, 444, 445, 450, 452, 472, 474, 476, 477, 479, 480, 481, 482, 484, 489, 519, 526, 534, 568, 573, 580, 583, 586, 587, 588, 589, 593, 596, 598, 600, 602, 604, 605, 607, 609, 611, 617, 620, 623, 625, 626, 631, 639, 642, 644, 645, 648, 649, 650, 651, 652, 654, 665, 667, 669, 674, 678, 680, 685, 686, 695, 696, 698, 703, 706, 707, 708, 709, 716, 718, 719, 721, 722, 741, 743, 746, 755, 759, 761, 764, 765, 767, 769, 770, 772, 776, 777, 778, 779, 782, 783, 784, 785, 786, 789, 793, 798, 799, 803, 806, 810, 812, 815, 816, 817, 820, 821, 824, 825, 829, 830, 834, 836, 838, 840, 841, 843, 844, 847, 852, 855, 856, 859, 860, 861, 864, 887, 891, 893, 900, 901, 914, 930, 935, 944, 947, 954, 963, 964, 972, 1002, 1015, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1034, 1036, 1037, 1052, 1055, 1057, 1058, 1060, 1061, 1062, 1063, 1067, 1071, 1101, 1108, 1128, 1137, 1139, 1143, 1144, 1145, 1155, 1167, 1171, 1174, 1181, 1189, 1192, 1194, 1198, 1199, 1200, 1201, 1204, 1215, 1217, 1219, 1224, 1231, 1239, 1241, 1242, 1245, 1252, 1254, 1256, 1260, 1261, 1264, 1266, 1267, 1268, 1270, 1272, 1275, 1279, 1287, 1290], "arbitrari": [74, 199, 312, 390, 777, 804, 887, 893], "arbitrarili": [222, 312], "arcco": [777, 1260], "arccosh": [777, 1260], "arcsin": [777, 1260], "arcsinh": [777, 1260], "arctan": [701, 702, 777, 1260], "arctan2": 702, "arctanh": [777, 1260], "aren": [33, 42, 312, 887], "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 195, 236, 312, 337, 577, 703, 728, 777, 812, 833, 887, 891, 1116, 1260, 1273], "arg_max": [777, 1260], "arg_min": [777, 1260], "arg_sort": [777, 1260], "arg_tru": [704, 777, 1260], "arg_uniqu": [777, 1260], "arg_wher": [338, 777], "argmax": [534, 777], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 181, 185, 191, 203, 204, 219, 235, 236, 244, 250, 251, 258, 271, 278, 282, 286, 287, 291, 312, 421, 434, 446, 452, 472, 534, 573, 577, 593, 626, 659, 660, 661, 678, 695, 701, 702, 703, 706, 707, 708, 710, 725, 755, 759, 767, 773, 777, 805, 809, 815, 816, 821, 833, 838, 840, 841, 847, 854, 859, 860, 864, 887, 891, 893, 1002, 1015, 1052, 1209, 1210, 1211, 1242, 1260, 1281, 1282], "aris": 131, "arithmet": [197, 312], "arm": 151, "arm64": 151, "around": [33, 42, 312, 887], "arr": [270, 312, 769, 1241, 1252, 1260], "arr_bar": 1278, "arr_foo": 1278, "arrai": [116, 120, 129, 130, 133, 141, 170, 190, 191, 264, 269, 270, 271, 312, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 383, 384, 385, 386, 493, 508, 509, 510, 511, 513, 522, 523, 525, 528, 530, 534, 589, 595, 597, 599, 601, 603, 606, 608, 610, 616, 724, 756, 777, 809, 887, 895, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 961, 962, 963, 964, 969, 1025, 1075, 1090, 1091, 1092, 1093, 1095, 1103, 1104, 1105, 1107, 1110, 1112, 1113, 1145, 1150, 1151, 1153, 1156, 1157, 1158, 1165, 1169, 1235, 1239, 1241, 1242, 1260, 1280, 1286, 1289], "array_agg": 1280, "array_contain": 1280, "array_get": 1280, "array_length": 1280, "array_low": 1280, "array_mean": 1280, "array_revers": 1280, "array_sum": 1280, "array_to_str": 1280, "array_uniqu": 1280, "array_upp": 1280, "arraylik": [969, 1260], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 171, 216, 246, 247, 264, 266, 270, 312, 887, 896, 1235, 1241, 1260], "arrowinvaliderror": [35, 312], "as_": [1260, 1265], "as_dict": [130, 235, 312], "as_expr": 893, "as_seri": [176, 265, 312, 795, 887, 893], "asarrai": [170, 895], "ascend": [204, 244, 312, 593, 777, 816, 838, 887], "ascii": [7, 20, 631, 640, 642, 646, 647, 652, 654, 665, 674, 893, 1181, 1190, 1192, 1196, 1197, 1202, 1204, 1215, 1224], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [631, 640, 652, 1181, 1190, 1202], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1290, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 893, "ascii_uppercas": [280, 312], "asd": [632, 638, 1182, 1188], "asia": [123, 893, 978, 979, 1005], "asin": 1280, "asind": 1280, "asof": [219, 312, 821, 887], "asof_join": [219, 312], "asofjoinstrategi": [219, 312, 821, 887], "assert": [152, 153, 154, 155, 159, 163, 244, 312, 789, 893], "assert_frame_equ": [153, 154, 189, 312, 1290], "assert_frame_not_equ": [152, 155], "assert_series_equ": [152, 155, 1024, 1260, 1290], "assert_series_not_equ": [153, 154], "assert_someth": 157, "assertionerror": [152, 153, 154, 155], "assign": [157, 204, 297, 312, 361, 526, 573, 583, 656, 657, 777, 816, 870, 887, 935, 1108, 1139, 1206, 1207, 1260], "associ": [34, 36, 47, 132, 134, 158, 161, 247, 312, 892, 1271, 1273], "assum": [247, 312, 825, 871, 887, 1282], "assumpt": [534, 777], "async": [131, 799, 887], "async_engin": 131, "asynchron": [54, 131, 799, 887], "asyncio": [54, 131, 799, 887], "asyncresult": [54, 799, 887], "ata": 26, "atan": 1280, "atan2": [701, 702, 1280], "atan2_ab": 1284, "atan2d": [702, 1280], "atan2d_ab": 1284, "atand": 1280, "atg": 26, "atgataaaggag": 26, "atol": [152, 153, 154, 155], "attain": [626, 777], "attempt": [1, 390, 777, 804, 887], "attr": [312, 315, 1260, 1265], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 312, 315, 769, 770, 772, 773, 778, 779, 782, 784, 785, 786, 887, 1252, 1254, 1256, 1260, 1261, 1265, 1266, 1267, 1268], "attributeerror": 1, "audi": [265, 312, 590, 777], "australia": 720, "authent": [35, 133, 141, 143, 144, 145, 146, 148, 312], "author": 1, "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 276, 312, 887, 1290], "auto_structifi": [250, 286, 312, 840, 859, 887], "autofilt": [36, 312], "autofit": [36, 312], "autogener": [129, 130, 134, 140, 143], "automat": [8, 33, 42, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 141, 143, 146, 147, 159, 163, 165, 250, 259, 286, 312, 534, 588, 659, 660, 661, 756, 777, 840, 848, 859, 887, 891, 1143, 1144, 1209, 1210, 1211, 1244, 1260, 1270, 1272, 1275, 1287], "autumn": [650, 651], "avail": [36, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 237, 259, 311, 312, 583, 756, 769, 770, 772, 776, 777, 778, 779, 782, 783, 784, 785, 786, 789, 848, 885, 886, 887, 891, 893, 967, 1139, 1252, 1254, 1256, 1260, 1261, 1264, 1266, 1267, 1268], "available_timezon": [62, 893], "averag": [36, 312, 442, 443, 444, 445, 583, 777, 1026, 1027, 1028, 1029, 1139, 1260, 1277], "avg": 1280, "avocado": 1282, "avoid": [133, 159, 163, 195, 246, 312, 323, 777, 812, 887], "avro": [31, 127, 312, 789], "avrocompress": [31, 312], "aw": [133, 139, 141, 143, 144, 146, 147, 148], "awai": 1281, "await": [54, 131, 799, 882, 887], "awar": [10, 131, 216, 246, 247, 266, 312, 443, 631, 640, 652, 667, 777, 887, 1027, 1181, 1190, 1202, 1217, 1260], "aws_access_key_id": [35, 133, 144, 148, 312], "aws_region": [35, 144, 148, 312], "aws_secret_access_kei": [35, 133, 144, 148, 312], "axi": [228, 279, 312, 701, 702, 829, 855, 887], "aya": [654, 1204, 1215], "az": [133, 144, 145], "azur": [35, 133, 139, 141, 143, 144, 145, 146, 147, 148, 312], "azure_storage_account_kei": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 172, 173, 174, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 255, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 321, 323, 324, 326, 327, 337, 339, 344, 349, 364, 365, 366, 367, 368, 369, 370, 372, 373, 381, 388, 392, 423, 426, 446, 448, 450, 451, 452, 454, 457, 464, 465, 468, 470, 471, 472, 474, 477, 479, 480, 481, 482, 487, 493, 498, 505, 515, 516, 517, 518, 534, 535, 540, 547, 553, 556, 557, 558, 559, 560, 561, 562, 570, 571, 573, 577, 580, 583, 587, 588, 590, 592, 618, 624, 626, 633, 636, 641, 644, 650, 651, 675, 676, 686, 689, 693, 695, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 724, 725, 726, 727, 728, 731, 732, 733, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 753, 754, 756, 758, 759, 760, 761, 762, 766, 773, 777, 792, 793, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 887, 893, 899, 902, 923, 938, 939, 940, 941, 942, 943, 947, 948, 949, 966, 969, 1004, 1007, 1021, 1024, 1025, 1032, 1035, 1052, 1057, 1075, 1097, 1098, 1099, 1100, 1137, 1142, 1183, 1186, 1191, 1194, 1200, 1201, 1225, 1227, 1228, 1230, 1242, 1247, 1260, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1282, 1283, 1284, 1287], "b1": [48, 50], "b2": [48, 50], "b345": [36, 312], "b4": [36, 312], "b_b": [259, 312], "b_btm_by_a": [372, 777], "b_btm_by_b": [372, 777], "b_by_ca": [372, 686, 777], "b_by_cb": [372, 686, 777], "b_is_not_nan": [480, 777], "b_isnan": [479, 777], "b_isnul": [482, 777], "b_not_nul": [481, 777], "b_revers": [557, 561, 590, 777], "b_suffix": 562, "b_sum": [291, 864], "b_top_by_a": [686, 777], "b_top_by_b": [686, 777], "ba": [390, 446, 547, 658, 725, 777, 893], "back": [4, 47, 148, 192, 204, 252, 270, 271, 312, 547, 573, 777, 798, 816, 842, 887, 1032, 1242, 1260], "backend": [35, 131, 132, 133, 144, 145, 312, 315, 1260, 1265], "background": [312, 316, 798, 886, 887], "backward": [41, 45, 194, 219, 312, 364, 395, 415, 451, 777, 811, 821, 887, 972, 996, 1035, 1260], "backward_fil": [457, 617, 777], "bad": [650, 651, 1200, 1201], "balanc": [162, 164, 1290], "ballon_dor": [637, 639, 1187, 1189], "banana": [180, 265, 294, 296, 299, 300, 301, 302, 303, 304, 305, 312, 372, 590, 635, 658, 686, 777, 867, 869, 872, 873, 874, 875, 876, 877, 878, 1282], "banded_column": [36, 312], "banded_row": [36, 312], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 206, 208, 209, 210, 212, 218, 221, 222, 223, 224, 225, 226, 227, 230, 231, 234, 237, 239, 241, 242, 245, 248, 249, 250, 252, 257, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 277, 278, 283, 284, 285, 290, 312, 315, 374, 390, 469, 539, 541, 543, 544, 545, 546, 547, 548, 549, 623, 632, 634, 636, 638, 639, 653, 655, 657, 662, 663, 699, 709, 710, 711, 726, 731, 732, 735, 736, 740, 742, 744, 745, 747, 748, 755, 758, 762, 766, 767, 773, 777, 795, 800, 801, 805, 806, 807, 812, 818, 819, 820, 832, 836, 839, 840, 853, 854, 858, 887, 892, 893, 946, 1087, 1174, 1182, 1184, 1186, 1188, 1189, 1203, 1207, 1212, 1213, 1260, 1274, 1276, 1277, 1278, 1279, 1282, 1285], "bar2": 1282, "bar22": [197, 312], "bar_": 655, "bar_3": [267, 312], "bar_4": [267, 312], "bar_a": [237, 312], "bar_at_2": 1278, "bar_avg": 1277, "bar_b": [237, 312], "bar_color": [36, 312], "bar_max": 1277, "bar_median": 1277, "bar_min": 1277, "bar_negative_border_color_sam": [36, 312], "bar_negative_color_sam": [36, 312], "bar_std": 1277, "bar_sum": 1277, "bar_var": 1277, "bare": [541, 893], "base": [36, 60, 102, 104, 161, 187, 195, 204, 244, 312, 396, 404, 439, 442, 443, 444, 445, 452, 467, 471, 529, 530, 534, 535, 578, 580, 588, 593, 596, 598, 600, 602, 604, 607, 609, 611, 669, 777, 806, 812, 816, 838, 887, 893, 973, 981, 1021, 1026, 1027, 1028, 1029, 1048, 1051, 1111, 1112, 1116, 1135, 1137, 1143, 1144, 1219, 1251, 1260, 1276, 1281, 1290], "base64": [366, 367, 633, 634, 939, 940, 1183, 1184], "base_nam": [276, 312], "base_utc_offset": [404, 981], "baseexcept": 1287, "basi": [36, 134, 159, 312], "basic": [36, 170, 312, 895, 1290], "basic_chart": [36, 312], "batch": [38, 53, 54, 125, 130, 131, 137, 139, 147, 149, 246, 274, 312, 798, 799, 825, 887], "batch_siz": [33, 42, 129, 130, 131, 139, 147, 149, 274, 312, 887], "batchedcsvread": 130, "baz": [199, 209, 210, 278, 312, 639, 655, 657, 726, 735, 748, 773, 819, 854, 887, 893, 1189, 1207, 1274, 1279, 1282], "bb": [893, 967, 1260, 1282, 1287], "bbb": [1, 36, 312, 675, 677, 893], "bc": [641, 651, 760, 1191], "bcbc45": 1282, "bea": 12, "bear": 893, "beauti": 12, "becaus": [139, 147, 190, 204, 220, 222, 280, 298, 312, 456, 498, 777, 816, 871, 887, 1025, 1080, 1116, 1260], "becom": [161, 311, 885, 886], "bed3": [36, 312], "been": [5, 30, 36, 166, 172, 293, 312, 458, 535, 550, 583, 777, 866, 1139, 1260], "beetl": [265, 312, 590, 777], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 192, 204, 219, 259, 269, 274, 278, 312, 385, 386, 387, 534, 573, 574, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 636, 674, 680, 707, 753, 754, 777, 816, 818, 821, 854, 887, 891, 963, 964, 965, 1032, 1132, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1186, 1224, 1231, 1260, 1276], "beforehand": [664, 666, 667, 1214, 1216, 1217], "begin": [12, 36, 312, 442, 444, 445, 637, 665, 777, 1026, 1028, 1029, 1187, 1215, 1260], "behav": [195, 312, 452, 535, 660, 661, 777, 812, 887], "behavior": [41, 45, 187, 195, 218, 219, 312, 348, 458, 501, 503, 636, 726, 735, 777, 806, 812, 820, 821, 887, 922, 1083, 1085, 1186], "behaviour": [10, 47, 55, 187, 259, 312, 630, 637, 638, 641, 650, 651, 687, 756, 777, 806, 848, 887, 1180, 1187, 1188, 1191, 1200, 1201], "behind": 165, "being": [13, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 134, 140, 141, 143, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 176, 191, 259, 267, 269, 274, 280, 281, 312, 315, 316, 387, 388, 421, 467, 535, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 636, 705, 724, 753, 754, 777, 795, 798, 799, 808, 809, 848, 856, 887, 949, 965, 966, 1002, 1048, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1186, 1236, 1239, 1244, 1260, 1265, 1290], "belong": [1, 204, 312, 816, 887], "below": [19, 35, 133, 134, 144, 145, 187, 195, 237, 312, 451, 642, 665, 718, 719, 721, 722, 764, 765, 767, 773, 777, 806, 812, 887, 1192, 1215], "benchmark": 129, "best": [222, 298, 312, 535, 777, 1116, 1260], "better": [222, 269, 270, 298, 312, 535, 647, 777, 794, 871, 887, 1162, 1164, 1197, 1260], "between": [24, 55, 87, 156, 157, 159, 163, 173, 181, 239, 246, 304, 312, 349, 373, 391, 392, 472, 496, 505, 515, 516, 517, 518, 574, 580, 581, 603, 604, 629, 643, 701, 702, 705, 709, 711, 750, 753, 754, 777, 835, 877, 887, 923, 945, 948, 968, 969, 1052, 1078, 1087, 1097, 1098, 1099, 1100, 1132, 1137, 1138, 1154, 1179, 1193, 1260, 1284], "between_ab": [472, 777], "beyond": [672, 1222], "bia": [444, 445, 484, 605, 623, 777, 1028, 1029, 1067, 1155, 1174, 1260], "bias": [484, 623, 777, 1067, 1174, 1260], "big": 130, "big_fil": 130, "bigidx": 124, "bigqueri": 132, "bin": [388, 467, 580, 669, 694, 770, 777, 966, 1048, 1137, 1219, 1254, 1260, 1265], "bin_count": [467, 777, 1048, 1260], "bin_i": [694, 777], "bin_x": [694, 777], "bin_xor_xi": [694, 777], "binari": [37, 131, 184, 252, 312, 365, 366, 367, 368, 369, 370, 390, 547, 633, 777, 804, 842, 887, 893, 938, 939, 941, 942, 943, 1183], "binary_str": [694, 777], "bind": 134, "birthdai": 129, "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 585, 630, 777, 1141, 1180, 1260, 1282], "bit_length": 1280, "bitmap": [190, 312, 1025, 1260], "bitwis": [325, 572, 694, 695, 696, 697, 698, 777], "bla": [632, 638, 1182, 1188], "black": [222, 312, 365, 366, 367, 368, 370], "blindli": [498, 1080], "block": [20, 54, 203, 277, 312, 767, 799, 815, 836, 853, 862, 863, 871, 887, 1162, 1164, 1260], "blue": [46, 84, 85, 365, 366, 367, 368, 370, 691, 777, 1249, 1260], "bob": [129, 229, 312, 830, 887, 1288], "bodi": [36, 312, 316], "bold": [36, 312], "bom": [33, 42, 312, 887], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 175, 176, 177, 178, 183, 185, 189, 194, 195, 196, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 226, 235, 237, 245, 246, 247, 248, 253, 256, 258, 259, 262, 265, 267, 270, 271, 275, 276, 277, 278, 281, 282, 284, 286, 294, 296, 299, 302, 312, 323, 324, 325, 326, 327, 337, 340, 341, 344, 348, 349, 357, 362, 365, 366, 368, 370, 372, 373, 382, 383, 384, 385, 386, 387, 388, 395, 407, 422, 439, 440, 441, 442, 444, 445, 461, 463, 464, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 494, 498, 501, 503, 505, 514, 521, 527, 533, 534, 535, 539, 540, 541, 542, 543, 544, 548, 567, 568, 570, 572, 575, 576, 580, 583, 585, 594, 595, 597, 599, 601, 603, 605, 606, 608, 610, 614, 616, 618, 623, 625, 626, 629, 630, 631, 632, 633, 635, 640, 641, 643, 650, 651, 652, 655, 656, 658, 664, 666, 667, 669, 671, 675, 677, 686, 688, 691, 694, 695, 696, 697, 698, 700, 703, 704, 705, 708, 709, 712, 713, 718, 719, 721, 722, 733, 734, 737, 739, 749, 752, 756, 759, 764, 765, 767, 768, 777, 793, 795, 796, 798, 799, 803, 805, 808, 811, 812, 815, 816, 820, 821, 825, 829, 834, 843, 845, 847, 848, 852, 853, 854, 855, 856, 859, 867, 869, 872, 875, 887, 891, 893, 895, 900, 901, 911, 914, 915, 918, 922, 923, 931, 936, 938, 939, 941, 943, 945, 947, 949, 953, 960, 961, 962, 963, 964, 965, 966, 972, 984, 1003, 1021, 1023, 1024, 1026, 1028, 1029, 1036, 1037, 1044, 1045, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1071, 1072, 1076, 1080, 1083, 1085, 1087, 1096, 1103, 1109, 1116, 1128, 1130, 1133, 1134, 1137, 1139, 1140, 1141, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1161, 1164, 1165, 1169, 1174, 1176, 1179, 1180, 1181, 1182, 1183, 1185, 1190, 1191, 1193, 1200, 1201, 1202, 1205, 1206, 1208, 1214, 1216, 1217, 1219, 1221, 1236, 1241, 1242, 1246, 1249, 1260, 1269, 1270, 1272, 1278, 1282, 1287], "boolean": [47, 159, 175, 195, 197, 258, 275, 312, 324, 325, 326, 340, 341, 344, 365, 368, 370, 372, 407, 452, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 489, 490, 494, 570, 572, 575, 576, 626, 644, 686, 693, 694, 703, 704, 759, 767, 777, 793, 812, 847, 852, 887, 893, 900, 901, 912, 914, 915, 918, 938, 984, 1036, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1071, 1072, 1076, 1130, 1133, 1134, 1164, 1180, 1251, 1260, 1279], "border": 20, "both": [10, 25, 33, 42, 46, 84, 85, 131, 148, 179, 204, 218, 219, 229, 244, 245, 271, 281, 312, 327, 377, 388, 446, 472, 580, 593, 596, 598, 600, 602, 604, 607, 609, 611, 654, 718, 719, 721, 722, 764, 765, 773, 777, 788, 816, 820, 821, 830, 838, 856, 887, 893, 954, 1052, 1204, 1242, 1260, 1287, 1288], "bottom": [175, 312, 372, 777, 793, 887], "bottom_k": [275, 312, 372, 685, 686, 777, 852, 887, 1245, 1260], "bottom_k_bi": [371, 685, 686, 777], "bound": [98, 129, 130, 190, 204, 312, 348, 377, 472, 501, 503, 526, 532, 690, 700, 718, 719, 721, 722, 764, 765, 777, 816, 887, 922, 954, 1025, 1052, 1083, 1085, 1114, 1248, 1260, 1278], "boundari": [204, 312, 377, 467, 672, 777, 816, 887, 954, 1048, 1222, 1260], "box": [20, 222, 312], "box_draw": 20, "branch": [53, 54, 798, 799, 808, 834, 845, 887], "break": [42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 259, 269, 274, 280, 281, 312, 315, 316, 387, 388, 421, 467, 535, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 753, 754, 777, 798, 799, 808, 848, 856, 887, 949, 965, 966, 1002, 1048, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1239, 1244, 1260, 1265], "breakpoint": [388, 467, 580, 777, 966, 1048, 1137, 1260], "breezah": 143, "breviti": 168, "broadcast": [652, 893, 1202], "broader": 893, "brotli": [41, 45, 312, 887], "brussel": [420, 1001], "bst": [400, 404, 420, 977, 981, 1001], "bucket": [35, 133, 144, 145, 148, 312, 421, 434, 467, 777, 1002, 1015, 1048, 1260], "bud": [650, 651, 1200, 1201], "budget": 1269, "buffer": [129, 130, 131, 190, 216, 312, 1025, 1260], "buffer_s": [216, 312], "bug": [534, 535, 777, 825, 871, 887, 1116, 1260], "build": [52, 117, 893, 1290], "built": 87, "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 312, 390, 777, 804, 887], "busi": [395, 705, 972], "business_day_count": [395, 972], "by_alternate_row": 1, "by_dtyp": 893, "by_first_letter_of_column_nam": 48, "by_first_letter_of_column_valu": 48, "by_index": 893, "by_left": [219, 312, 821, 887], "by_nam": 893, "by_pred": [245, 312], "by_right": [219, 312, 821, 887], "bye": 1, "byi": 1282, "bys": [204, 312, 816, 887], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 184, 190, 252, 312, 390, 547, 642, 646, 647, 654, 665, 777, 804, 842, 887, 1025, 1192, 1196, 1197, 1204, 1215, 1260, 1282], "bytesio": [36, 37, 38, 41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 252, 312, 390, 547, 777, 804, 842, 887], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 172, 173, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 195, 197, 200, 201, 202, 203, 204, 206, 208, 209, 217, 218, 220, 221, 223, 225, 227, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 245, 248, 249, 250, 257, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 271, 272, 275, 279, 280, 281, 283, 284, 286, 291, 294, 295, 296, 299, 300, 302, 305, 306, 312, 316, 321, 323, 324, 326, 344, 364, 372, 388, 452, 464, 472, 493, 505, 535, 541, 556, 557, 571, 573, 577, 580, 618, 656, 664, 686, 689, 696, 698, 699, 701, 702, 703, 706, 708, 709, 710, 711, 713, 714, 716, 726, 727, 728, 731, 732, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 756, 758, 760, 761, 762, 766, 773, 777, 793, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 812, 815, 816, 820, 823, 832, 834, 836, 837, 839, 840, 845, 846, 847, 848, 852, 855, 856, 859, 861, 864, 867, 868, 869, 872, 873, 875, 878, 879, 887, 891, 893, 948, 966, 1052, 1075, 1137, 1206, 1214, 1228, 1247, 1260, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1282, 1287], "c00": 893, "c01": 893, "c02": 893, "c03": 893, "c05": 893, "c1": 361, "c123": 1282, "c2": 361, "c20": 893, "c25": 893, "c3": 361, "c40": 893, "c45": 1282, "c4d79b": [36, 312], "c50": 893, "c567": [36, 312], "c60": 893, "c75": 893, "c80": 893, "c8ae6d2b276": [36, 312], "c93": 893, "c95": 893, "c96": 893, "c97": 893, "c98": 893, "c99": 893, "c_btm_by_a": [372, 777], "c_btm_by_b": [372, 777], "c_by_ca": [372, 686, 777], "c_by_cb": [372, 686, 777], "c_c_c": [756, 848, 887], "c_contigu": [270, 312], "c_max": [573, 777], "c_mean_squar": [291, 864], "c_min": [573, 777], "c_top_by_a": [686, 777], "c_top_by_b": [686, 777], "c_total": 1287, "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 587, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 664, 666, 667, 671, 777, 788, 798, 799, 808, 834, 845, 887, 947, 1143, 1144, 1214, 1216, 1217, 1221, 1260], "cadi": [237, 312], "cafe": [669, 1219], "caf\u00e9": [646, 647, 893, 1196, 1197], "calamin": 134, "calcul": [36, 41, 45, 47, 183, 204, 260, 283, 312, 391, 442, 443, 444, 445, 484, 496, 515, 522, 528, 532, 605, 623, 628, 690, 692, 709, 711, 753, 754, 758, 766, 777, 803, 816, 849, 857, 887, 967, 968, 1026, 1027, 1028, 1029, 1067, 1078, 1097, 1155, 1174, 1178, 1250, 1260], "calendar": [61, 62, 204, 219, 244, 282, 312, 398, 408, 410, 417, 421, 434, 438, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 975, 985, 990, 998, 1002, 1015, 1019, 1027, 1260], "calendar_year": [408, 438], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 175, 203, 204, 220, 222, 244, 259, 270, 275, 311, 312, 371, 372, 383, 386, 395, 534, 535, 556, 557, 559, 561, 563, 564, 587, 588, 619, 685, 686, 705, 710, 773, 777, 793, 798, 799, 808, 815, 816, 834, 838, 845, 848, 852, 885, 886, 887, 891, 893, 944, 972, 1116, 1144, 1170, 1241, 1245, 1260, 1270, 1274, 1287], "callabl": [48, 49, 50, 51, 143, 197, 222, 236, 241, 298, 312, 361, 526, 534, 535, 557, 558, 577, 594, 713, 714, 727, 738, 739, 751, 777, 825, 833, 836, 871, 887, 935, 1108, 1116, 1149, 1260], "caller": [132, 229, 312, 526, 825, 830, 871, 887], "cam": [241, 312, 836, 887], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 170, 175, 177, 187, 188, 197, 199, 203, 204, 211, 213, 215, 219, 222, 233, 237, 244, 246, 247, 250, 252, 253, 258, 269, 270, 274, 275, 276, 280, 286, 289, 298, 312, 324, 361, 372, 383, 386, 387, 390, 395, 414, 415, 417, 420, 423, 426, 434, 443, 449, 452, 472, 498, 526, 534, 535, 541, 544, 547, 553, 556, 557, 559, 561, 563, 564, 573, 578, 580, 585, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 616, 618, 620, 623, 626, 631, 639, 645, 650, 651, 652, 659, 660, 661, 664, 675, 686, 703, 705, 717, 720, 727, 729, 733, 734, 739, 756, 767, 773, 776, 777, 788, 793, 794, 798, 799, 804, 806, 808, 816, 821, 838, 840, 842, 843, 845, 847, 848, 852, 859, 862, 863, 887, 893, 895, 935, 965, 972, 995, 996, 998, 1001, 1002, 1004, 1007, 1015, 1027, 1033, 1052, 1080, 1108, 1116, 1121, 1135, 1137, 1141, 1144, 1162, 1164, 1165, 1168, 1171, 1174, 1181, 1182, 1189, 1195, 1200, 1201, 1202, 1209, 1210, 1211, 1214, 1239, 1241, 1260, 1275, 1287], "cancel": [798, 887], "candid": [637, 639, 1187, 1189], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 165, 222, 247, 248, 270, 289, 298, 312, 366, 446, 514, 535, 614, 633, 656, 677, 739, 777, 845, 863, 871, 887, 893, 939, 1096, 1116, 1161, 1183, 1206, 1241, 1260], "capabl": [1, 36, 312], "capac": [190, 256, 312, 1025, 1169, 1260], "capit": [672, 1222, 1282], "captur": [637, 639, 650, 651, 1187, 1189, 1200, 1201], "car": [241, 265, 312, 590, 777, 836, 887], "cardin": [174, 312, 328, 699, 777, 792, 887], "care": [36, 253, 312, 535, 616, 777, 843, 887, 1165, 1260], "cars_revers": [590, 777], "cartesian": [218, 312, 820, 887], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 192, 204, 216, 222, 237, 244, 246, 247, 266, 269, 270, 312, 396, 443, 534, 544, 545, 557, 593, 630, 631, 638, 640, 641, 650, 651, 652, 672, 777, 799, 816, 838, 887, 891, 893, 973, 1027, 1032, 1180, 1181, 1188, 1190, 1191, 1200, 1201, 1202, 1222, 1239, 1260], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 197, 204, 236, 244, 269, 270, 274, 286, 312, 327, 385, 386, 397, 423, 426, 437, 572, 577, 578, 585, 587, 593, 644, 645, 674, 680, 684, 707, 708, 757, 777, 816, 833, 838, 859, 887, 891, 893, 949, 963, 964, 974, 1004, 1007, 1018, 1135, 1141, 1194, 1195, 1224, 1231, 1237, 1241, 1243, 1244, 1260, 1280], "cast_str_to_int": [236, 312, 833, 887], "cast_to_supertyp": [777, 891], "cat": [26, 46, 84, 85, 388, 580, 630, 632, 670, 673, 684, 708, 772, 777, 893, 966, 1048, 1137, 1180, 1182, 1220, 1223, 1256, 1260], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 218, 267, 312, 374, 388, 580, 587, 588, 684, 777, 893, 946, 947, 948, 949, 966, 1137, 1143, 1144, 1243, 1260], "categori": [36, 46, 65, 85, 267, 312, 374, 388, 467, 580, 777, 946, 966, 1048, 1137, 1236, 1260], "categorical_as_str": [152, 153, 154, 155], "categoricalord": 59, "categoricaltyp": [264, 312], "caus": [99, 108, 117, 129, 130, 131, 143, 152, 172, 192, 270, 312, 534, 777, 1032, 1241, 1260], "cba": 661, "cbrt": [777, 1260, 1280], "cbrt_a": 1281, "cc": [446, 725, 777, 893, 967, 1260, 1282], "ccc": [1, 36, 312, 675, 677, 893, 1282], "ccy": 1290, "cd": [675, 677, 893], "cdatainterfac": [171, 896], "cde": [893, 1282], "cdt": [421, 434, 1002, 1015], "ceil": [49, 777, 1260, 1280], "ceil_a": 1281, "cell": [15, 16, 36, 237, 312], "cent": 398, "center": [15, 16, 36, 312, 442, 444, 445, 594, 595, 597, 599, 601, 603, 606, 608, 610, 777, 1026, 1028, 1029, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1260], "central": [144, 145, 484, 623, 777, 1067, 1174, 1260], "centuri": 1283, "certain": [42, 43, 44, 45, 54, 133, 144, 209, 282, 312, 660, 661, 773, 798, 799, 834, 887, 1260], "certainli": [664, 666, 667, 1214, 1216, 1217], "cest": [420, 1001], "cet": [420, 1001], "cfg": [2, 4, 17, 168], "cfoo": [861, 887], "chain": [556, 557, 559, 561, 563, 564, 767], "chanc": [156, 159, 163, 1290], "chang": [30, 41, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 134, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 259, 269, 274, 280, 281, 288, 312, 315, 316, 387, 388, 391, 421, 467, 535, 573, 574, 580, 587, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 753, 754, 777, 798, 799, 808, 848, 856, 862, 887, 891, 893, 948, 949, 965, 966, 1002, 1048, 1132, 1137, 1143, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1169, 1239, 1244, 1260, 1265], "changes_length": [777, 891], "char": [27, 638, 1188], "char_length": 1282, "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 312, 417, 636, 638, 642, 646, 647, 648, 649, 650, 651, 654, 655, 656, 659, 660, 661, 662, 663, 665, 672, 674, 834, 887, 893, 998, 1186, 1188, 1192, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1209, 1210, 1211, 1215, 1222, 1224, 1282], "character_length": 1282, "characterist": [159, 163], "charli": [129, 1288], "chart": [36, 312, 315, 834, 887, 1260, 1265], "cheap": [177, 178, 251, 287, 312, 796, 797, 841, 860, 887, 953, 955, 1260], "cheaper": [501, 1083], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 189, 214, 218, 312, 344, 365, 368, 370, 464, 472, 476, 494, 630, 635, 641, 658, 777, 820, 825, 887, 918, 938, 941, 943, 1024, 1044, 1045, 1054, 1057, 1064, 1066, 1076, 1180, 1185, 1191, 1208, 1260], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1024, 1260], "check_exact": [152, 153, 154, 155], "check_nam": [154, 155, 1024, 1260], "check_ord": [154, 155], "check_row_ord": [152, 153], "choos": [41, 43, 45, 204, 237, 312, 816, 887], "chrono": [33, 42, 87, 312, 423, 426, 664, 666, 667, 671, 887, 1004, 1007, 1214, 1216, 1217, 1221, 1282, 1283], "chunk": [14, 45, 125, 129, 130, 133, 139, 141, 143, 146, 147, 148, 159, 163, 192, 217, 232, 270, 312, 327, 584, 777, 887, 902, 952, 1032, 1042, 1122, 1140, 1235, 1241, 1260], "chunk_length": 1260, "chunkedarrai": [116, 232, 312], "citi": [650, 651], "clang": 151, "clariti": [245, 312], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 247, 312, 764, 773, 777, 783, 789, 801, 807, 839, 858, 887, 892, 1240, 1260, 1264, 1272, 1287], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 184, 312, 390, 458, 777, 804, 887, 1270, 1287], "claus": [789, 1278, 1286], "clean": [664, 666, 667, 1214, 1216, 1217], "cleaner": 168, "cleanli": [10, 202, 312, 1287], "clear": [46, 84, 178, 312, 797, 887, 955, 1260], "clearer": 119, "clickhous": 132, "client": 131, "clip": [777, 1260], "clipboard": [32, 128, 312, 789], "clone": [118, 119, 120, 121, 122, 177, 270, 312, 796, 887, 953, 1260], "close": [36, 131, 204, 244, 259, 312, 388, 472, 531, 580, 593, 596, 598, 600, 602, 604, 607, 609, 611, 623, 718, 719, 721, 722, 764, 765, 777, 816, 838, 848, 887, 966, 1052, 1137, 1174, 1260], "closedinterv": [204, 244, 312, 472, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 838, 887, 1052, 1260], "closest": [116, 219, 312, 821, 887, 1281], "closur": [596, 598, 607, 609, 611, 777], "cloud": [35, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 312], "cloudi": [650, 651], "cloudpickl": 151, "cluster": 148, "cluster_with_column": [53, 54, 798, 799, 808, 834, 845, 887], "co": [638, 777, 1188, 1260, 1280], "coalesc": [218, 219, 281, 312, 470, 640, 664, 777, 820, 821, 856, 887, 1214, 1276, 1280], "code": [179, 312, 365, 366, 367, 368, 370, 390, 535, 616, 777, 804, 823, 887, 1165, 1260, 1270], "coeffici": [181, 312, 623, 777, 1174, 1260], "coerc": [55, 586, 777], "coercion": [42, 43, 44, 45, 53, 54, 586, 777, 798, 799, 808, 834, 845, 887], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 195, 203, 204, 212, 214, 218, 219, 222, 233, 236, 237, 244, 245, 250, 258, 269, 274, 278, 280, 286, 291, 312, 316, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 466, 467, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 558, 560, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 703, 704, 706, 707, 708, 710, 712, 715, 717, 718, 720, 721, 723, 727, 728, 729, 730, 731, 732, 740, 742, 744, 745, 747, 750, 751, 756, 758, 760, 762, 763, 766, 767, 777, 812, 815, 816, 818, 820, 821, 833, 838, 840, 847, 848, 854, 859, 861, 864, 887, 893, 998, 1001, 1080, 1162, 1164, 1195, 1214, 1260, 1290], "col0": [159, 1290], "col1": [159, 237, 312, 887, 1290], "col2": [159, 237, 312, 887, 1290], "col3": [237, 312, 1290], "col4": 1290, "col_nam": [236, 312, 535, 767, 777, 833, 887], "cole": 126, "coli": [36, 312, 563, 564, 893, 1290], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 187, 220, 237, 259, 264, 277, 278, 312, 446, 476, 535, 707, 725, 729, 756, 759, 777, 792, 793, 795, 796, 799, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 836, 837, 838, 840, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 886, 887, 893, 1057, 1260, 1270, 1271, 1272, 1275, 1276, 1287, 1288, 1290], "collect_al": [50, 54, 798, 799, 887], "collect_all_async": [799, 887], "collect_async": [54, 887], "collect_schema": [50, 220, 312, 801, 807, 833, 839, 858, 887], "collis": 55, "colnam": [36, 143, 312], "color": [46, 84, 85, 298, 312, 315, 365, 366, 367, 368, 370, 633, 691, 777, 871, 938, 939, 940, 941, 943, 1183, 1249, 1260, 1282], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 173, 175, 176, 179, 181, 182, 185, 186, 187, 188, 191, 195, 196, 199, 200, 202, 203, 204, 208, 209, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 250, 251, 253, 258, 260, 261, 262, 265, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 297, 312, 315, 316, 323, 324, 326, 337, 346, 355, 357, 360, 372, 377, 381, 382, 388, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 416, 418, 419, 422, 423, 424, 426, 435, 436, 438, 446, 448, 452, 454, 467, 471, 472, 487, 493, 499, 501, 521, 525, 526, 535, 541, 542, 544, 546, 556, 558, 559, 560, 561, 562, 563, 564, 573, 580, 584, 586, 587, 588, 589, 591, 592, 593, 596, 598, 600, 602, 604, 607, 609, 611, 618, 619, 625, 626, 629, 636, 641, 642, 643, 652, 656, 657, 664, 665, 666, 667, 668, 669, 671, 676, 678, 686, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 793, 795, 802, 805, 806, 807, 809, 812, 815, 816, 820, 821, 825, 826, 827, 828, 829, 831, 832, 835, 836, 838, 839, 840, 841, 843, 847, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 871, 887, 892, 893, 900, 901, 920, 929, 931, 934, 947, 948, 954, 959, 960, 966, 975, 978, 979, 980, 983, 984, 985, 989, 990, 991, 993, 994, 997, 999, 1000, 1003, 1004, 1005, 1007, 1016, 1017, 1019, 1031, 1048, 1051, 1075, 1081, 1083, 1103, 1107, 1137, 1144, 1145, 1148, 1168, 1179, 1186, 1191, 1193, 1206, 1207, 1214, 1216, 1217, 1218, 1219, 1221, 1227, 1230, 1236, 1237, 1249, 1260, 1276, 1278, 1279, 1281, 1282, 1284, 1285, 1288, 1289, 1290], "column_0": [1, 222, 276, 312], "column_1": [222, 276, 312, 1284], "column_2": [276, 312, 1284], "column_abc": 15, "column_format": [36, 312], "column_nam": [241, 276, 312, 836, 887], "column_tot": [36, 312], "column_width": [36, 312], "column_x": [129, 130, 134, 140, 143], "column_xyz": 15, "columnar": [120, 122, 216, 246, 312], "columnformatdict": [36, 312], "columnnameorselector": [176, 185, 187, 228, 235, 237, 247, 267, 277, 278, 279, 280, 312, 795, 805, 806, 829, 853, 854, 855, 887], "columnnotfounderror": [199, 200, 312], "columntotalsdefinit": [36, 312], "columnwidthsdefinit": [36, 312], "colx": [36, 312, 563, 564, 893, 1275, 1290], "colz": [893, 1290], "com": [36, 132, 312, 442, 444, 445, 637, 638, 639, 777, 1026, 1028, 1029, 1187, 1188, 1189, 1260], "combin": [41, 45, 53, 54, 55, 195, 204, 205, 219, 237, 244, 282, 312, 325, 338, 434, 443, 456, 572, 588, 593, 659, 660, 661, 718, 719, 721, 722, 764, 765, 767, 777, 798, 799, 808, 816, 821, 834, 838, 845, 887, 1002, 1015, 1027, 1144, 1209, 1210, 1211, 1260, 1276, 1288], "come": [111, 132, 204, 277, 279, 312, 395, 414, 415, 484, 526, 705, 777, 816, 853, 855, 887, 972, 995, 996, 1067, 1260], "comm_subexpr_elim": [53, 54, 798, 799, 808, 834, 845, 887], "comm_subplan_elim": [53, 54, 798, 799, 808, 834, 845, 887], "comma": [32, 33, 129, 130, 143, 312], "comment": [129, 130, 143], "comment_prefix": [129, 130, 143], "common": [47, 53, 54, 55, 91, 129, 130, 143, 281, 312, 557, 783, 798, 799, 808, 834, 845, 856, 887, 1264], "compact": 1285, "compani": 132, "compar": [148, 152, 153, 154, 155, 189, 195, 312, 440, 441, 461, 463, 472, 486, 533, 567, 568, 777, 812, 887, 948, 1023, 1024, 1128, 1260], "comparison": [149, 195, 312, 812, 887], "compat": [20, 36, 37, 38, 41, 45, 86, 264, 312, 630, 632, 637, 638, 639, 641, 650, 651, 887, 893, 1180, 1182, 1187, 1188, 1189, 1191, 1200, 1201, 1235, 1260, 1270, 1282, 1283, 1287], "compat_level": [37, 38, 264, 312, 1235, 1260], "compatibleframetyp": [1271, 1273, 1287], "compatlevel": [37, 38, 264, 312, 1235, 1260], "competit": [583, 777, 1139, 1260], "compil": [52, 342, 343, 491, 492, 916, 917, 1073, 1074], "complement": 893, "complet": [129, 131, 143, 1288], "complex": [160, 371, 372, 387, 685, 686, 777, 944, 965, 1245, 1260], "compliant": [36, 312], "compon": [399, 422, 664, 667, 723, 976, 1003, 1214, 1217], "compos": 1288, "composit": [76, 1290], "compound": [123, 247, 312, 893], "comprehens": 157, "compress": [31, 37, 38, 41, 43, 45, 312, 591, 777, 887, 1147, 1260], "compression_level": [41, 45, 312, 887], "comput": [53, 55, 89, 190, 203, 219, 237, 271, 277, 291, 304, 312, 320, 329, 330, 331, 332, 333, 334, 351, 352, 353, 358, 359, 363, 375, 378, 379, 380, 383, 384, 385, 386, 392, 439, 447, 484, 508, 509, 510, 511, 515, 516, 517, 518, 522, 528, 529, 530, 531, 553, 573, 574, 579, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 620, 621, 622, 623, 627, 682, 683, 691, 696, 698, 701, 702, 703, 709, 711, 724, 743, 753, 754, 767, 777, 798, 815, 818, 820, 821, 853, 861, 864, 877, 887, 898, 903, 904, 905, 906, 907, 908, 925, 926, 927, 932, 933, 937, 950, 956, 957, 958, 961, 962, 963, 964, 969, 1021, 1025, 1030, 1067, 1090, 1091, 1092, 1093, 1097, 1098, 1099, 1100, 1104, 1110, 1111, 1112, 1113, 1121, 1132, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1171, 1172, 1173, 1174, 1177, 1233, 1234, 1242, 1249, 1260, 1281, 1284], "computeerror": [544, 669, 1219], "concat": [46, 84, 85, 92, 130, 219, 312, 821, 861, 887, 952, 1042, 1122, 1140, 1260, 1280], "concat_list": [498, 724], "concat_w": [259, 312, 756, 848, 887, 1280, 1287], "concaten": [46, 55, 84, 85, 197, 236, 312, 577, 629, 643, 707, 708, 777, 833, 887, 952, 1122, 1179, 1193, 1260, 1282], "concatmethod": 55, "conclus": [120, 122, 312, 887], "concret": [159, 163], "condit": [36, 187, 195, 245, 312, 452, 472, 635, 658, 704, 727, 767, 777, 806, 812, 887, 1052, 1260, 1276, 1280, 1286], "conditional_format": [36, 312], "conditionalformatdict": [36, 312], "config": [0, 47, 183, 250, 269, 286, 312, 631, 640, 652, 718, 719, 721, 722, 723, 789, 798, 803, 840, 859, 887, 1181, 1202], "configur": [5, 35, 133, 144, 145, 168, 312, 798, 887], "conflat": [472, 777], "conform": 1290, "confus": [91, 324, 479, 480, 652, 777], "conjunct": [36, 84, 131, 134, 140, 157, 312, 733, 736, 887], "conn": 131, "connect": [34, 129, 131, 132, 135, 137, 139, 141, 143, 146, 147, 148, 149, 312, 790], "connectionorcursor": [34, 131, 312], "connector": 132, "connectorx": [131, 132, 151], "consecut": [194, 312, 364, 451, 457, 629, 643, 777, 811, 887, 1035, 1179, 1193, 1260], "consid": [41, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 175, 187, 189, 215, 222, 228, 246, 259, 269, 274, 275, 277, 279, 280, 281, 312, 315, 316, 372, 377, 387, 388, 421, 456, 467, 534, 535, 541, 555, 556, 559, 561, 563, 564, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 686, 713, 727, 753, 754, 773, 777, 793, 798, 799, 806, 808, 817, 824, 829, 848, 852, 853, 855, 856, 871, 887, 893, 947, 949, 954, 965, 966, 1002, 1024, 1048, 1116, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1162, 1164, 1239, 1244, 1260, 1265, 1270], "consider": 126, "consist": [203, 235, 270, 312, 664, 718, 719, 815, 887, 893, 902, 1032, 1214, 1241, 1260], "consola": [36, 312], "const": 10, "constant": [190, 244, 312, 396, 443, 449, 777, 838, 887, 973, 1025, 1027, 1033, 1260], "constrain": [47, 143, 187, 312, 806, 887, 893], "constraint": [195, 312, 452, 556, 557, 559, 561, 563, 564, 767, 777, 812, 887, 893], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 312, 458, 749, 752, 768, 773, 777, 804, 887, 947, 1260, 1275], "construct_categor": 46, "constructor": [126, 134, 163], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 144, 145, 158, 159, 161, 163, 175, 180, 187, 188, 204, 212, 217, 233, 269, 270, 274, 275, 281, 293, 312, 324, 326, 349, 368, 370, 390, 464, 476, 505, 535, 629, 631, 635, 637, 639, 641, 643, 645, 657, 658, 674, 695, 696, 697, 698, 708, 739, 777, 793, 801, 804, 806, 807, 816, 834, 852, 856, 866, 887, 891, 893, 900, 901, 923, 1044, 1045, 1087, 1122, 1179, 1181, 1185, 1187, 1189, 1191, 1193, 1195, 1207, 1208, 1224, 1235, 1241, 1260, 1278], "contains_with_expr": 365, "contains_with_lit": 365, "content": [13, 619, 777, 1170, 1260], "context": [46, 84, 85, 165, 233, 259, 312, 322, 452, 498, 534, 535, 544, 625, 626, 691, 710, 726, 729, 735, 736, 739, 748, 752, 755, 776, 777, 788, 789, 848, 861, 887, 1080, 1249, 1260, 1275, 1287, 1289], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 240, 270, 312], "continu": [129, 388, 580, 623, 777, 966, 1137, 1174, 1260], "contrast": 723, "control": [10, 11, 36, 54, 55, 134, 157, 159, 258, 259, 269, 312, 588, 626, 756, 777, 798, 799, 808, 847, 848, 887, 1144, 1239, 1260, 1272, 1275, 1287], "conveni": [192, 274, 312, 880, 902, 1032, 1260, 1270], "convers": [117, 134, 172, 216, 217, 246, 247, 266, 270, 271, 312, 400, 664, 666, 667, 671, 789, 977, 1214, 1216, 1217, 1221, 1241, 1242, 1260, 1285, 1287], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 172, 265, 266, 267, 268, 269, 270, 271, 273, 274, 312, 360, 361, 389, 400, 423, 426, 525, 526, 534, 557, 582, 639, 664, 666, 667, 668, 669, 671, 676, 777, 887, 891, 934, 935, 948, 977, 1004, 1007, 1107, 1108, 1189, 1214, 1216, 1217, 1218, 1219, 1221, 1227, 1230, 1238, 1239, 1240, 1241, 1242, 1244, 1260, 1282, 1284, 1285, 1287], "convert_time_zon": [420, 1001], "coo": [241, 312, 836, 887], "coord": 678, "coordin": [36, 312], "copi": [32, 116, 117, 128, 170, 172, 177, 178, 217, 264, 270, 271, 286, 312, 449, 777, 796, 797, 859, 887, 895, 953, 955, 1033, 1235, 1240, 1241, 1242, 1260, 1287], "corasick": [631, 640, 652, 1181, 1190, 1202], "core": [1, 312, 1287, 1290], "corner": [20, 36, 123, 312], "corr": 312, "corrcoef": [181, 312], "correct": [134, 140, 444, 445, 484, 605, 623, 777, 825, 887, 891, 1028, 1029, 1067, 1155, 1174, 1260], "correctli": [36, 312, 534, 777], "correl": [181, 312, 709, 753], "correlationmethod": 709, "correspond": [204, 219, 244, 270, 282, 312, 372, 408, 417, 421, 434, 535, 583, 593, 596, 598, 600, 602, 604, 607, 609, 611, 686, 718, 719, 721, 722, 764, 765, 777, 798, 816, 821, 838, 887, 985, 998, 1002, 1015, 1139, 1260], "cosd": 1280, "cosh": [777, 1260], "cosin": [329, 330, 378, 379, 534, 777, 903, 904, 956, 957, 1260, 1284], "cost": [247, 312], "cot": [777, 1260, 1280], "cotang": [380, 777, 958, 1260, 1284], "cotd": 1280, "could": [35, 82, 89, 176, 312, 713, 723, 727, 795, 803, 806, 887], "count": [36, 149, 174, 183, 204, 233, 234, 244, 276, 282, 288, 303, 312, 328, 345, 354, 382, 395, 443, 467, 487, 495, 507, 512, 535, 555, 571, 593, 632, 689, 691, 699, 705, 712, 736, 747, 777, 792, 803, 816, 832, 838, 862, 876, 887, 893, 919, 928, 960, 967, 972, 1027, 1048, 1069, 1077, 1089, 1094, 1123, 1131, 1182, 1247, 1249, 1260, 1265, 1269, 1280], "count_digit": 632, "count_num": [36, 312], "counterpart": 126, "countri": [219, 312, 396, 821, 887, 973], "country_holidai": [395, 705, 972], "covari": [711, 754, 777, 891], "cover": 10, "cow": [648, 649, 1198, 1199], "cpu": [129, 130, 269, 312, 798, 887, 1239, 1260], "crab": [630, 641, 1180, 1191], "crate": [33, 42, 87, 312, 630, 632, 637, 638, 639, 641, 650, 651, 664, 666, 667, 671, 887, 893, 1180, 1182, 1187, 1188, 1189, 1191, 1200, 1201, 1214, 1216, 1217, 1221], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 177, 178, 204, 234, 237, 244, 269, 270, 282, 286, 289, 312, 315, 316, 399, 421, 434, 443, 526, 534, 584, 593, 596, 598, 600, 602, 604, 607, 609, 611, 707, 717, 718, 719, 720, 721, 722, 723, 763, 764, 765, 773, 777, 796, 797, 803, 808, 816, 838, 859, 863, 887, 953, 955, 966, 976, 1002, 1015, 1027, 1129, 1137, 1140, 1239, 1241, 1260, 1265, 1286, 1287, 1290], "create_async_engin": 131, "create_engin": [34, 312], "creation": 130, "cross": [218, 312, 820, 887, 1276], "crustacean": [641, 1191], "cst": [421, 434, 1002, 1015], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 312, 789, 887], "csvencod": [129, 130, 143], "csvquotestyl": [33, 42, 312, 887], "ctx": [1269, 1271, 1272, 1273, 1274, 1275, 1287], "cube": [1, 51, 375, 578, 777, 950, 1260, 1281], "cum_count": [777, 1260], "cum_count_revers": [382, 777], "cum_max": [777, 1260], "cum_max_all_fil": [383, 777], "cum_max_revers": [383, 777], "cum_min": [777, 1260], "cum_min_revers": [384, 777], "cum_prod": [321, 777, 1260], "cum_prod_revers": [385, 777], "cum_reduc": 713, "cum_sum": [469, 679, 716, 777, 818, 887, 1066, 1260], "cum_sum_revers": [386, 777], "cumsum_horizont": 715, "cumul": [382, 383, 384, 385, 386, 712, 713, 714, 715, 716, 777, 960, 961, 962, 963, 964, 1260], "cumulative_ev": [777, 1260], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 139, 141, 143, 146, 147, 148, 156, 157, 159, 160, 161, 162, 163, 164, 177, 178, 218, 219, 259, 269, 274, 312, 315, 316, 404, 526, 574, 777, 796, 797, 820, 821, 848, 887, 893, 953, 955, 973, 981, 1132, 1239, 1244, 1260, 1265, 1272, 1287], "cursor": [34, 131, 312], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 183, 222, 237, 298, 312, 361, 395, 423, 426, 526, 534, 535, 594, 691, 705, 738, 739, 777, 803, 825, 871, 887, 935, 972, 1004, 1007, 1108, 1116, 1149, 1249, 1260, 1290], "customis": [36, 312], "cut": [580, 777, 1137, 1260], "cxx": 1282, "cypher": 131, "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 173, 195, 202, 204, 205, 206, 209, 218, 221, 263, 264, 274, 280, 284, 294, 296, 299, 300, 301, 302, 303, 304, 305, 312, 321, 323, 382, 405, 423, 426, 472, 577, 618, 632, 638, 650, 651, 656, 664, 666, 667, 706, 723, 729, 756, 777, 812, 816, 820, 848, 867, 869, 872, 873, 874, 875, 876, 877, 878, 887, 893, 948, 960, 982, 1004, 1007, 1052, 1075, 1182, 1188, 1200, 1201, 1206, 1214, 1216, 1217, 1228, 1260, 1276, 1278, 1279, 1282, 1283], "d1": [36, 312, 399], "d2": 399, "d3": 399, "d789": [36, 312], "d_4": [656, 1206], "dai": [61, 62, 77, 204, 217, 219, 244, 282, 312, 315, 395, 414, 415, 417, 418, 421, 423, 426, 427, 434, 436, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 705, 717, 718, 719, 720, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 893, 972, 995, 996, 998, 999, 1002, 1004, 1007, 1008, 1015, 1017, 1027, 1260, 1283], "dark": 1269, "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 170, 172, 178, 179, 188, 191, 192, 202, 203, 204, 216, 217, 218, 220, 222, 235, 236, 240, 245, 246, 247, 249, 253, 256, 264, 269, 270, 271, 274, 276, 286, 290, 310, 312, 316, 324, 325, 326, 329, 330, 331, 332, 333, 334, 337, 340, 341, 342, 343, 344, 346, 349, 351, 352, 353, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 373, 374, 377, 378, 379, 380, 381, 388, 389, 390, 395, 396, 397, 398, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 448, 459, 461, 462, 463, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 491, 492, 494, 499, 505, 507, 514, 525, 527, 533, 535, 567, 568, 572, 573, 580, 582, 583, 586, 587, 588, 589, 591, 592, 612, 614, 616, 621, 622, 623, 629, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 654, 655, 656, 657, 664, 665, 666, 667, 669, 671, 674, 682, 683, 684, 687, 688, 691, 694, 700, 707, 710, 717, 718, 719, 720, 721, 722, 723, 733, 734, 736, 737, 738, 739, 749, 752, 763, 764, 765, 768, 773, 777, 789, 796, 797, 798, 799, 804, 807, 809, 815, 816, 839, 843, 859, 887, 892, 895, 900, 901, 912, 914, 915, 916, 917, 918, 920, 922, 923, 934, 936, 938, 939, 940, 942, 945, 946, 953, 954, 955, 966, 967, 972, 973, 974, 975, 978, 979, 980, 981, 983, 984, 985, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1031, 1032, 1048, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1071, 1072, 1073, 1074, 1076, 1081, 1087, 1089, 1096, 1107, 1109, 1116, 1130, 1137, 1139, 1143, 1144, 1145, 1147, 1148, 1159, 1161, 1169, 1174, 1179, 1180, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1192, 1193, 1194, 1195, 1196, 1197, 1204, 1205, 1206, 1207, 1214, 1215, 1216, 1217, 1219, 1221, 1224, 1235, 1240, 1241, 1242, 1243, 1246, 1259, 1260, 1269, 1276, 1282, 1287, 1289], "data_bar": [36, 312], "data_bar_2010": [36, 312], "data_label": [36, 312], "data_page_s": [41, 45, 312, 887], "databas": [34, 115, 131, 132, 312, 789], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 310, 311, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 773, 777, 789, 798, 799, 801, 803, 805, 807, 809, 813, 816, 820, 821, 822, 823, 825, 829, 830, 834, 837, 839, 846, 848, 853, 854, 855, 856, 858, 861, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 887, 893, 966, 967, 1001, 1027, 1048, 1116, 1137, 1195, 1206, 1207, 1230, 1236, 1237, 1249, 1260, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1290], "dataframeplot": [312, 315], "dataload": [274, 312], "datapoint": [204, 312, 816, 887], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 218, 274, 312, 484, 777, 789, 820, 825, 887, 1067, 1260, 1288], "datat": [36, 312], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 136, 138, 139, 142, 147, 160, 161, 163, 188, 197, 312, 373, 446, 618, 684, 725, 737, 773, 777, 789, 807, 887, 892, 893, 945, 967, 1020, 1116, 1168, 1243, 1260, 1285], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 141, 143, 146, 148, 149, 176, 183, 202, 204, 217, 219, 244, 259, 312, 315, 344, 395, 397, 398, 399, 400, 403, 405, 407, 408, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 494, 593, 596, 598, 600, 602, 604, 607, 609, 611, 664, 666, 684, 705, 718, 719, 721, 722, 729, 737, 763, 777, 795, 803, 816, 821, 838, 887, 893, 918, 972, 974, 975, 976, 977, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1027, 1076, 1125, 1126, 1214, 1216, 1243, 1260, 1280, 1283, 1285], "date32": [217, 312], "date_format": [33, 42, 312, 887], "date_min": 417, "date_minus_1y_2mon": 998, "date_part": 1280, "date_plus_1i": [417, 998], "date_rang": [219, 282, 312, 403, 405, 418, 425, 436, 721, 722, 821, 887, 980, 994, 999, 1000, 1016, 1017], "date_right": [219, 312, 821, 887], "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 141, 144, 146, 148, 159, 160, 161, 163, 176, 183, 202, 204, 217, 219, 244, 259, 282, 312, 315, 344, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 494, 593, 596, 598, 600, 602, 604, 607, 609, 611, 664, 667, 684, 705, 717, 718, 719, 721, 722, 723, 729, 737, 764, 765, 777, 795, 803, 816, 821, 838, 887, 892, 893, 918, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1027, 1076, 1125, 1126, 1214, 1217, 1241, 1243, 1260, 1282, 1283], "datetime_format": [33, 42, 312, 887], "datetime_rang": [204, 312, 397, 400, 414, 415, 417, 420, 421, 427, 428, 429, 430, 431, 432, 433, 434, 437, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 777, 816, 887, 973, 974, 977, 981, 982, 983, 988, 989, 991, 993, 995, 996, 997, 998, 1001, 1002, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "datetime_str": [423, 426], "datetimeindex": 121, "david": 1288, "day_nam": [423, 426], "day_of_month": [403, 418, 436], "day_of_year": [403, 418, 436], "daylight": [204, 219, 244, 282, 312, 396, 404, 417, 421, 434, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 981, 998, 1002, 1015], "dayofweek": 1283, "dayofyear": 1283, "days_diff": 427, "db": [34, 131, 132, 312], "dbapi2": 131, "dbc": [632, 1182], "dbreadengin": 132, "dbwriteengin": [34, 312], "dbwritemod": [34, 312], "dd": [36, 312, 1282], "ddd": [1, 36, 312, 675, 677], "dddd": 1282, "ddof": [260, 283, 312, 358, 363, 522, 528, 606, 607, 610, 611, 628, 692, 709, 711, 753, 754, 758, 766, 777, 849, 857, 887, 932, 937, 1104, 1110, 1156, 1158, 1178, 1250, 1260], "ddww": 1282, "de": 1282, "deal": [41, 45, 216, 312, 324, 326, 420, 583, 664, 667, 695, 696, 697, 698, 720, 777, 887, 900, 901, 1001, 1139, 1214, 1217, 1260], "debug": [29, 798, 825, 887, 1290], "decad": [1269, 1283], "decai": [442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 312, 316, 612, 668, 777, 887, 893, 1159, 1218, 1260, 1281], "decimal_comma": [129, 130, 143], "decimal_separ": [9, 27], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 269, 274, 312, 887, 893, 1269], "decod": [129, 130, 644], "decompos": [278, 312, 854, 887], "decompress": [41, 43, 45, 312, 887], "decor": [46, 48, 49, 50, 51, 159, 163, 222, 312, 535, 777, 788, 789, 1116, 1260], "dedic": [1, 117, 216, 246, 312, 893, 1287], "deem": [183, 312, 803, 887], "deepcopi": [177, 312, 796, 887, 953, 1260], "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 236, 276, 312, 321, 577, 638, 661, 694, 738, 777, 799, 833, 887, 893, 1188, 1290], "default": [4, 5, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 183, 184, 187, 190, 199, 203, 204, 205, 216, 218, 219, 226, 228, 235, 237, 244, 245, 246, 247, 248, 252, 255, 259, 260, 262, 267, 269, 270, 274, 277, 279, 280, 281, 283, 288, 297, 312, 323, 324, 326, 349, 356, 361, 388, 390, 395, 420, 439, 441, 442, 444, 445, 465, 501, 505, 514, 519, 520, 522, 526, 528, 529, 534, 541, 544, 547, 565, 566, 568, 574, 580, 583, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 617, 619, 628, 629, 637, 643, 654, 659, 660, 661, 664, 666, 667, 669, 671, 691, 692, 695, 697, 700, 704, 705, 708, 709, 711, 718, 719, 720, 721, 722, 723, 726, 729, 733, 734, 735, 737, 749, 752, 758, 759, 764, 765, 766, 768, 777, 798, 799, 803, 804, 806, 808, 815, 816, 820, 821, 829, 838, 842, 844, 848, 849, 853, 855, 856, 857, 862, 870, 887, 893, 900, 901, 923, 930, 935, 954, 966, 967, 972, 1001, 1021, 1025, 1026, 1028, 1029, 1046, 1083, 1087, 1096, 1101, 1102, 1108, 1125, 1126, 1132, 1137, 1139, 1143, 1144, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1161, 1167, 1170, 1178, 1179, 1180, 1187, 1191, 1193, 1204, 1209, 1210, 1211, 1214, 1216, 1217, 1219, 1221, 1239, 1241, 1249, 1250, 1260, 1281, 1290], "default_match": [630, 641], "defaultdict": [247, 312], "defer": [312, 315, 316, 1260, 1265], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 176, 187, 191, 204, 222, 233, 236, 244, 281, 298, 312, 472, 501, 535, 577, 580, 592, 593, 596, 598, 600, 602, 604, 607, 609, 611, 642, 647, 654, 665, 672, 718, 719, 721, 722, 739, 759, 764, 765, 777, 795, 806, 809, 816, 833, 838, 856, 871, 887, 892, 893, 1052, 1083, 1116, 1137, 1148, 1192, 1197, 1204, 1215, 1222, 1260], "definit": [36, 312, 484, 777, 892, 893, 1067, 1260], "deflat": [31, 312], "deg": 1284, "degre": [260, 283, 312, 522, 528, 582, 606, 607, 610, 611, 628, 692, 702, 709, 711, 753, 754, 758, 766, 777, 849, 857, 887, 1156, 1158, 1178, 1250, 1260, 1280], "delet": [1276, 1289], "delimit": [40, 42, 139, 147, 237, 267, 312, 629, 643, 887, 1179, 1193, 1236, 1260], "delta": [35, 133, 144, 260, 283, 312, 522, 528, 606, 607, 610, 611, 628, 692, 709, 711, 753, 754, 758, 766, 777, 789, 849, 857, 887, 1156, 1158, 1178, 1250, 1260], "delta_merge_opt": [35, 312], "delta_table_opt": [133, 144], "delta_write_opt": [35, 312], "deltalak": [35, 133, 144, 151, 312], "deltat": [35, 312], "demo": [36, 312], "demonstr": [129, 456, 777, 893], "dens": [20, 202, 312, 583, 777, 1139, 1260], "densiti": [1260, 1265], "depend": [41, 46, 52, 85, 131, 151, 173, 312, 342, 343, 491, 492, 535, 544, 580, 583, 723, 726, 729, 735, 777, 897, 916, 917, 1073, 1074, 1137, 1139, 1260, 1290], "deploi": [159, 163], "deprec": [35, 156, 157, 158, 159, 163, 166, 174, 228, 270, 288, 293, 312, 402, 437, 458, 550, 587, 629, 636, 693, 702, 710, 777, 792, 808, 829, 842, 855, 861, 862, 866, 887, 979, 987, 988, 1018, 1045, 1143, 1179, 1186, 1241, 1260], "depth": 126, "desc": [893, 1269, 1272, 1276, 1278], "descend": [47, 253, 258, 312, 337, 357, 521, 583, 616, 625, 626, 691, 703, 777, 843, 847, 887, 911, 931, 1064, 1103, 1139, 1165, 1176, 1249, 1260], "describ": [159, 202, 312, 887, 1260], "descript": [204, 312, 816, 887, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1285, 1288, 1289], "deseri": [126, 252, 312, 458, 547, 777, 842, 887], "deserializ": [184, 252, 312, 390, 547, 777, 804, 842, 887], "design": [269, 274, 312], "desir": [159, 361, 437, 526, 935, 1018, 1108], "destin": 132, "detail": [52, 117, 131, 132, 152, 154, 172, 204, 312, 816, 887, 1290], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 175, 179, 197, 204, 216, 217, 222, 244, 275, 276, 282, 312, 372, 407, 420, 467, 526, 544, 580, 586, 588, 623, 631, 642, 664, 665, 667, 668, 686, 720, 749, 752, 768, 777, 793, 800, 801, 807, 816, 838, 852, 858, 887, 984, 1001, 1048, 1108, 1137, 1143, 1144, 1174, 1181, 1214, 1217, 1218, 1260], "dev": [171, 896, 1156, 1260], "develop": [132, 159, 163], "deviat": [260, 312, 444, 606, 607, 628, 758, 777, 849, 887, 1028, 1178, 1260, 1277], "devic": [269, 312, 798, 887, 1239, 1260], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 601, 603, 605, 606, 608, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 773, 777, 816, 838, 854, 856, 868, 871, 879, 887, 893, 1001, 1027, 1195, 1206, 1207, 1237, 1260, 1265, 1269, 1270, 1271, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1290], "df0": [229, 312, 830, 887, 1275], "df1": [47, 55, 152, 153, 189, 192, 229, 259, 284, 312, 830, 887, 1272, 1274, 1275, 1276, 1287], "df2": [47, 55, 152, 153, 189, 192, 284, 312, 1272, 1274, 1275, 1276, 1287], "df3": [47, 312], "df4": 312, "df5": 312, "df6": 312, "df_a": 1287, "df_a1": 55, "df_a2": 55, "df_a3": 55, "df_agg_nuniqu": [233, 312], "df_b": 1287, "df_current_batch": 130, "df_d1": 55, "df_d2": 55, "df_from_str_repr": [268, 312], "df_h1": 55, "df_h2": 55, "df_new_grid": [470, 777], "df_nuniqu": [233, 312], "df_original_grid": [470, 777], "df_panda": 1270, "df_pd": 117, "df_tempor": [596, 598, 600, 602, 604, 607, 609, 611, 777], "dfi": [117, 172], "diagon": [55, 276, 312], "diagonal_relax": 55, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 196, 216, 235, 241, 245, 246, 247, 265, 266, 269, 274, 276, 312, 777, 836, 887, 891, 892, 893, 1037, 1260, 1273], "dictat": [417, 777, 891, 998], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 216, 235, 245, 246, 247, 265, 266, 269, 274, 312, 887, 892], "did": [396, 973], "diff": [286, 312, 427, 428, 429, 430, 431, 432, 433, 515, 777, 859, 887, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1097, 1260], "differ": [36, 41, 87, 90, 111, 129, 134, 149, 152, 154, 192, 204, 205, 216, 237, 244, 246, 247, 266, 269, 270, 276, 312, 391, 403, 417, 418, 420, 435, 441, 456, 465, 496, 515, 517, 526, 535, 565, 566, 568, 587, 588, 664, 689, 726, 729, 735, 777, 808, 816, 838, 887, 893, 948, 968, 980, 998, 999, 1001, 1016, 1023, 1032, 1046, 1078, 1097, 1099, 1116, 1125, 1126, 1128, 1143, 1144, 1214, 1260, 1283, 1285, 1287], "digit": [63, 577, 612, 613, 638, 777, 893, 1159, 1160, 1182, 1188, 1260, 1290], "dimens": [116, 118, 120, 122, 138, 139, 147, 312, 589, 777, 887, 1145, 1241, 1260], "dimension": [118, 120, 122, 270, 312, 887, 1260], "direct": [36, 132, 141, 145, 148, 152, 255, 269, 280, 312, 356, 519, 617, 777, 844, 887, 930, 1101, 1167, 1260], "directli": [6, 30, 36, 54, 131, 159, 163, 168, 247, 269, 312, 442, 444, 445, 588, 752, 777, 799, 887, 1026, 1028, 1029, 1144, 1239, 1260, 1272, 1287, 1290], "directori": [36, 41, 141, 143, 146, 148, 312, 891], "dirpath": [31, 33, 37, 38, 41, 143, 312], "disabl": [41, 45, 46, 84, 85, 141, 146, 160, 216, 312, 798, 887], "disable_string_cach": 85, "disallow": 159, "discard": [195, 312, 452, 777, 812, 887, 1036, 1260], "disco": [640, 1190], "discont": [640, 1190], "discourag": [535, 777], "discoveri": [237, 312], "discret": [388, 391, 439, 467, 496, 515, 580, 777, 966, 968, 1021, 1048, 1078, 1097, 1137, 1260], "disk": [41, 42, 43, 44, 45, 135, 312, 845, 887], "dispatch": 893, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 183, 202, 312, 803, 808, 887], "distanc": [219, 312, 467, 777, 821, 887, 1048, 1260], "distinct": [36, 163, 235, 237, 290, 312, 362, 475, 478, 527, 583, 592, 723, 777, 936, 1056, 1059, 1109, 1139, 1148, 1260, 1277, 1286, 1288, 1290], "distinct_count": [41, 45, 312, 887], "distribut": [484, 623, 777, 1067, 1174, 1260], "div": 1280, "divid": [20, 388, 421, 434, 442, 444, 445, 456, 484, 580, 777, 966, 1002, 1015, 1026, 1028, 1029, 1067, 1137, 1260, 1281], "divis": [456, 687, 777, 1281], "divisor": [260, 283, 312, 522, 528, 606, 607, 610, 611, 628, 692, 709, 711, 753, 754, 758, 766, 777, 849, 857, 887, 1156, 1158, 1178, 1250, 1260], "dl": [274, 312], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 143, 148, 152, 153, 154, 155, 173, 183, 192, 215, 219, 237, 264, 276, 280, 312, 315, 387, 395, 498, 534, 659, 660, 661, 749, 752, 768, 777, 794, 798, 799, 803, 808, 821, 825, 834, 845, 887, 893, 965, 972, 1032, 1080, 1209, 1210, 1211, 1244, 1260, 1265], "do_polars_oper": 29, "do_someth": 131, "do_various_th": 168, "doc": [35, 37, 38, 132, 135, 137, 152, 154, 170, 171, 181, 312, 895, 896], "document": [87, 132, 170, 312, 316, 423, 426, 645, 664, 666, 667, 671, 773, 895, 948, 1004, 1007, 1195, 1214, 1216, 1217, 1221], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 178, 185, 192, 195, 199, 204, 205, 217, 218, 245, 246, 247, 277, 286, 289, 312, 315, 316, 437, 452, 456, 465, 526, 535, 631, 640, 652, 660, 661, 689, 773, 777, 797, 798, 803, 805, 812, 816, 820, 825, 853, 859, 863, 887, 955, 1018, 1032, 1036, 1046, 1169, 1181, 1190, 1202, 1260, 1265, 1282], "doesn": [35, 129, 143, 204, 219, 312, 439, 777, 816, 821, 887, 1021, 1260], "dog": [630, 670, 673, 708, 1180, 1220, 1223], "doi": 1283, "dollar": [650, 651, 1200, 1201], "domain": [1, 638, 1188], "don": [55, 204, 219, 222, 277, 280, 312, 387, 498, 535, 777, 816, 821, 853, 887, 893, 965, 1080, 1116, 1260], "done": [130, 149, 168, 174, 176, 219, 312, 327, 328, 573, 777, 792, 795, 821, 887], "dot": [47, 773, 777, 845, 887, 1260], "doubl": [271, 312], "dow": 1283, "down": [143, 146, 147, 148, 149, 455, 777, 1038, 1260], "download": [139, 143, 146, 147, 845, 887], "downstream": [270, 312, 616, 777, 1165, 1260], "dr": 145, "drago": [642, 1192], "dragon": 642, "dragonfr": 1192, "dragonfruit": [642, 654, 665, 1192, 1204, 1215], "dramat": 134, "draw": [20, 25, 159, 163, 1290], "drawback": 773, "drawfn": 1290, "drawing_charact": 20, "dremio": 131, "driver": [34, 131, 132, 312], "drop": [1, 119, 186, 187, 222, 277, 286, 312, 391, 393, 394, 496, 497, 580, 777, 806, 853, 859, 887, 968, 970, 971, 1078, 1079, 1137, 1260, 1286], "drop_dupl": [277, 312, 853, 887], "drop_first": [267, 312, 1236, 1260], "drop_in_plac": 312, "drop_nan": [394, 777, 971, 1260], "drop_nul": [312, 393, 777, 887, 970, 1260], "dset": 149, "dst": [421, 434, 1002, 1015], "dst_offset": [396, 973], "dt": [1, 36, 47, 134, 140, 244, 312, 593, 723, 777, 786, 838, 887, 893, 1268, 1282, 1283], "dt1": 1282, "dt2": 1282, "dtm": [36, 312, 399, 893, 976, 1282], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 156, 157, 158, 159, 163, 170, 172, 176, 179, 204, 219, 244, 268, 269, 270, 271, 274, 280, 289, 312, 373, 374, 385, 386, 437, 446, 459, 493, 501, 532, 534, 535, 541, 578, 585, 586, 593, 596, 598, 600, 602, 604, 607, 609, 611, 618, 644, 664, 680, 684, 690, 700, 725, 729, 733, 734, 736, 737, 738, 739, 749, 752, 759, 768, 777, 795, 800, 816, 821, 838, 863, 887, 892, 893, 895, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 953, 963, 964, 967, 968, 1018, 1025, 1054, 1071, 1072, 1075, 1083, 1107, 1114, 1116, 1135, 1146, 1168, 1194, 1214, 1231, 1238, 1239, 1241, 1242, 1243, 1244, 1248, 1260, 1287, 1290], "dtype_format": [36, 312], "dtypekind": 172, "dtypelik": [170, 895], "dtypeoper": [1, 50], "dubiou": 87, "due": [176, 204, 219, 244, 247, 282, 312, 323, 404, 417, 421, 434, 556, 557, 559, 561, 563, 564, 593, 596, 598, 600, 602, 604, 607, 609, 611, 705, 718, 719, 721, 722, 764, 765, 777, 795, 816, 821, 838, 887, 981, 998, 1002, 1015], "dummi": [267, 312, 1236, 1260], "duplic": [47, 92, 211, 218, 219, 277, 281, 312, 323, 473, 556, 580, 777, 820, 821, 853, 856, 887, 1053, 1137, 1260, 1288], "duplicateerror": [580, 777, 1137, 1260], "durat": [168, 219, 282, 312, 396, 404, 427, 428, 429, 430, 431, 432, 433, 437, 443, 684, 718, 719, 721, 722, 764, 765, 777, 821, 887, 892, 893, 973, 981, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1027, 1241, 1243, 1260], "dure": [46, 91, 129, 130, 143, 168, 192, 312, 1032, 1260], "dutch": [395, 705, 972], "dynam": [204, 312, 361, 526, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 777, 816, 887, 891, 935, 1108], "dynamicgroupbi": [204, 312], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 141, 146, 148, 149, 161, 184, 195, 202, 206, 215, 221, 263, 264, 270, 280, 312, 321, 390, 439, 443, 446, 472, 529, 535, 540, 541, 542, 544, 545, 546, 548, 549, 618, 623, 641, 660, 661, 672, 725, 739, 756, 767, 777, 804, 812, 823, 836, 887, 893, 1021, 1027, 1052, 1174, 1191, 1222, 1260, 1278, 1282, 1290], "e101": [36, 312], "e_filt": [544, 546], "e_sum_ov": [544, 546], "e_sum_slic": [544, 546], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 139, 147, 152, 153, 154, 155, 157, 180, 182, 188, 195, 202, 203, 204, 217, 219, 222, 235, 237, 244, 246, 248, 269, 274, 278, 281, 282, 290, 291, 293, 295, 297, 298, 306, 312, 337, 372, 388, 421, 434, 452, 475, 478, 504, 507, 514, 524, 531, 535, 573, 580, 583, 591, 592, 599, 603, 614, 619, 626, 638, 642, 646, 647, 654, 656, 657, 665, 672, 686, 700, 703, 708, 733, 734, 759, 767, 777, 798, 801, 802, 807, 812, 816, 821, 834, 838, 854, 856, 864, 866, 868, 870, 871, 879, 887, 911, 952, 966, 1002, 1015, 1056, 1059, 1086, 1089, 1096, 1106, 1137, 1139, 1147, 1148, 1161, 1170, 1188, 1192, 1196, 1197, 1204, 1206, 1207, 1215, 1222, 1230, 1260, 1287, 1288, 1290], "eager": [204, 219, 237, 280, 312, 397, 400, 403, 405, 414, 415, 417, 418, 420, 421, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 596, 598, 600, 602, 604, 607, 609, 611, 700, 704, 718, 719, 721, 722, 729, 733, 734, 749, 752, 756, 759, 764, 765, 768, 776, 777, 816, 821, 825, 887, 973, 974, 977, 980, 981, 982, 983, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1287], "eagerli": [526, 1269], "ear": [654, 665, 1204], "earlier": [219, 312, 821, 887], "earliest": [204, 312, 420, 664, 667, 720, 816, 880, 887, 1001, 1214, 1217], "easi": 168, "easiest": 173, "easili": [47, 250, 274, 286, 291, 312, 759, 773, 840, 859, 864, 887], "east": 148, "ebf1d": [36, 312], "eee": [1, 36, 312, 893], "effect": [36, 197, 204, 312, 404, 456, 535, 558, 560, 562, 777, 816, 862, 863, 887, 973, 981], "effici": [117, 131, 215, 217, 312, 534, 777], "efgh": 1282, "eg": [17, 25, 36, 55, 132, 168, 269, 312, 421, 664, 667, 687, 777, 893, 1214, 1217], "egnaro": 1282, "either": [76, 159, 214, 218, 219, 235, 244, 245, 269, 270, 312, 443, 534, 578, 580, 593, 664, 695, 703, 759, 777, 798, 820, 821, 823, 838, 887, 891, 893, 1027, 1135, 1137, 1214, 1260, 1273, 1290], "element": [13, 14, 25, 154, 155, 158, 161, 173, 175, 182, 214, 237, 245, 258, 260, 275, 283, 312, 329, 330, 331, 332, 333, 334, 345, 346, 371, 372, 375, 378, 379, 380, 381, 383, 384, 385, 386, 387, 393, 394, 447, 448, 452, 465, 476, 487, 495, 497, 498, 499, 502, 507, 515, 516, 517, 518, 522, 528, 530, 531, 534, 535, 573, 574, 583, 586, 594, 595, 597, 599, 601, 603, 605, 606, 608, 610, 615, 620, 621, 622, 626, 627, 628, 656, 657, 668, 682, 683, 685, 686, 692, 703, 709, 711, 753, 754, 758, 766, 777, 793, 802, 847, 849, 852, 857, 887, 903, 904, 905, 906, 907, 908, 919, 920, 944, 950, 953, 956, 957, 958, 959, 961, 962, 963, 964, 965, 970, 971, 1030, 1031, 1036, 1047, 1057, 1066, 1069, 1070, 1077, 1079, 1080, 1081, 1084, 1089, 1097, 1098, 1099, 1100, 1112, 1113, 1116, 1132, 1139, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1163, 1171, 1172, 1173, 1177, 1178, 1206, 1207, 1218, 1232, 1233, 1234, 1238, 1245, 1246, 1250, 1260, 1277, 1278], "elementwis": [534, 594, 595, 597, 599, 601, 603, 606, 608, 610, 777, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1260], "elif": 767, "elig": [825, 887], "elimin": [484, 777, 1067, 1260], "elis": [229, 312, 830, 887], "ellipsi": [202, 312], "elppa": 1282, "els": [130, 767], "email": [638, 1188], "email_part": [638, 1188], "emphas": [312, 316], "emploi": 893, "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 177, 178, 204, 228, 279, 312, 629, 636, 737, 755, 796, 797, 816, 829, 855, 887, 893, 953, 955, 1054, 1179, 1186, 1260], "en": [20, 36, 312], "enabl": [28, 29, 41, 45, 46, 84, 85, 141, 146, 152, 153, 154, 155, 167, 170, 250, 271, 286, 312, 324, 326, 587, 588, 616, 631, 640, 652, 691, 773, 777, 798, 840, 859, 887, 895, 900, 901, 1143, 1144, 1165, 1181, 1190, 1202, 1242, 1249, 1260], "enable_string_cach": 84, "enclos": [458, 777], "encod": [59, 65, 75, 126, 129, 130, 143, 267, 312, 315, 366, 458, 591, 633, 676, 777, 939, 1147, 1183, 1236, 1260, 1265], "encount": [107, 129, 130, 143, 204, 312, 565, 566, 644, 645, 709, 713, 727, 777, 816, 887, 1125, 1126, 1194, 1195, 1260], "end": [33, 36, 42, 129, 130, 143, 204, 237, 312, 365, 368, 370, 396, 421, 446, 520, 630, 635, 638, 642, 648, 654, 658, 659, 660, 663, 700, 705, 717, 718, 719, 720, 721, 722, 725, 733, 734, 764, 765, 767, 773, 777, 816, 817, 824, 834, 887, 893, 941, 973, 1002, 1064, 1102, 1185, 1188, 1192, 1198, 1204, 1208, 1209, 1210, 1215, 1260, 1282], "endpoint": [388, 580, 777, 966, 1137, 1260], "ends_a": 1282, "ends_in_digit": 1282, "ends_with": [365, 370, 630, 658, 893, 1208, 1280], "ends_with_expr": 368, "ends_with_lit": 368, "engin": [14, 34, 131, 132, 134, 165, 203, 218, 222, 270, 277, 298, 312, 534, 756, 777, 798, 815, 820, 825, 829, 853, 871, 887, 1116, 1241, 1260, 1272, 1287], "engine_opt": [34, 134, 312], "enginetyp": [798, 887], "enough": [498, 623, 777, 1080, 1174, 1260], "ensur": [10, 36, 132, 158, 161, 170, 195, 203, 235, 245, 270, 312, 472, 534, 777, 812, 815, 825, 887, 891, 893, 895, 1241, 1260], "enter": 168, "entir": [36, 53, 54, 134, 140, 312, 798, 799, 887], "entri": [312, 887, 1287], "entropi": [777, 1260], "enumer": [121, 129, 130, 134, 140, 143, 217, 312], "env": [4, 164], "env_onli": 30, "environ": [4, 30, 139, 141, 143, 146, 147, 148, 162, 165, 269, 312], "eol_char": [129, 130, 143], "eparg": 1282, "epoch": [61, 62, 729, 1283], "epoch_": [405, 982], "epoch_n": [405, 982], "epochtimeunit": [405, 729, 982], "eq": [195, 312, 441, 452, 777, 812, 887, 1023, 1260], "eq_miss": [777, 1128, 1260], "equal": [46, 85, 129, 130, 143, 152, 153, 154, 155, 204, 219, 229, 258, 312, 388, 434, 440, 441, 443, 461, 486, 526, 568, 580, 586, 594, 595, 597, 599, 601, 603, 606, 608, 610, 626, 648, 649, 652, 674, 703, 753, 754, 767, 773, 777, 816, 821, 830, 847, 887, 966, 1002, 1023, 1027, 1108, 1128, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1198, 1199, 1202, 1224, 1260, 1279, 1290], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 204, 214, 233, 312, 321, 325, 440, 441, 443, 456, 461, 463, 486, 533, 552, 554, 567, 568, 569, 572, 578, 647, 670, 672, 673, 679, 687, 694, 777, 816, 887, 1022, 1023, 1027, 1041, 1043, 1066, 1068, 1115, 1127, 1128, 1197, 1220, 1222, 1223, 1260, 1270, 1278], "err": 639, "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 143, 176, 237, 245, 270, 312, 323, 348, 349, 366, 395, 501, 503, 505, 556, 588, 630, 633, 637, 639, 641, 644, 645, 664, 666, 667, 671, 777, 795, 799, 871, 887, 922, 923, 939, 972, 1083, 1085, 1087, 1144, 1180, 1183, 1187, 1189, 1191, 1194, 1195, 1214, 1216, 1217, 1221, 1241, 1260, 1285], "escap": [129, 130, 132, 143], "esp": 14, "especi": [157, 592, 777, 887, 1148, 1260], "espresso": 893, "est": 721, "establish": 131, "estim": [129, 130, 174, 190, 312, 328, 444, 445, 484, 699, 777, 792, 887, 1025, 1028, 1029, 1067, 1260], "estimated_s": [312, 1260], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 312, 535, 777, 891, 893, 1162, 1164, 1260, 1283], "eu": [144, 145], "eur": [202, 312, 1290], "europ": [400, 404, 420, 977, 981, 1001], "eval": [268, 312, 534, 535, 724, 777, 1116, 1238, 1260], "evalu": [42, 43, 44, 45, 148, 193, 195, 219, 312, 325, 338, 340, 341, 387, 452, 469, 489, 490, 526, 572, 695, 697, 700, 704, 718, 719, 721, 722, 724, 733, 734, 749, 752, 759, 764, 765, 767, 768, 777, 798, 812, 818, 820, 821, 887, 912, 914, 915, 965, 1036, 1071, 1072, 1251, 1260, 1279], "even": [33, 42, 129, 312, 443, 577, 580, 777, 887, 893, 1027, 1137, 1260], "evenli": [204, 312, 816, 887], "event": [54, 799, 887], "eventu": [34, 312], "everi": [14, 33, 42, 129, 130, 134, 140, 143, 198, 204, 266, 282, 312, 340, 341, 342, 343, 346, 348, 354, 383, 384, 385, 386, 387, 421, 434, 448, 460, 491, 492, 496, 499, 502, 503, 504, 512, 515, 520, 524, 592, 636, 713, 714, 777, 814, 816, 887, 914, 915, 916, 917, 920, 922, 928, 961, 962, 963, 964, 965, 1002, 1015, 1031, 1040, 1073, 1074, 1078, 1081, 1084, 1085, 1086, 1094, 1097, 1102, 1106, 1148, 1186, 1260], "everybodi": [631, 652, 1181, 1202], "everyth": 893, "ew": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "ewm_mean": [777, 1260], "ewm_mean_bi": [777, 1260], "ewm_std": [777, 1260], "ewm_var": [777, 1260], "ewma": [443, 777, 1027, 1260], "exact": [157, 159, 163, 219, 256, 312, 328, 456, 636, 662, 663, 664, 666, 667, 687, 777, 821, 887, 1186, 1214, 1216, 1217], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 312, 656, 657, 662, 663, 723, 887, 1169, 1206, 1207, 1212, 1213, 1260], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 789, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 891, 892, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1260, 1265, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289], "exc_tb": 1287, "exc_typ": 1287, "exc_val": 1287, "exce": [202, 312], "excel": [32, 36, 128, 134, 312, 789], "excelread": 134, "excelspreadsheetengin": 134, "except": [0, 152, 185, 199, 206, 219, 221, 263, 312, 373, 588, 642, 665, 725, 777, 789, 805, 821, 887, 893, 945, 1047, 1070, 1144, 1192, 1215, 1232, 1241, 1260, 1286], "exclud": [159, 163, 204, 312, 372, 383, 386, 395, 472, 541, 686, 705, 773, 777, 816, 887, 893, 972, 1052, 1260], "excluded_dtyp": [159, 160, 163], "exclus": [245, 312, 694, 700, 733, 734, 777], "execut": [35, 46, 55, 131, 132, 220, 259, 312, 390, 498, 691, 756, 777, 794, 798, 804, 825, 834, 848, 887, 891, 1080, 1249, 1260, 1270, 1271, 1272, 1274, 1287, 1289], "execute_glob": 1287, "execute_opt": [131, 132], "exist": [1, 34, 35, 36, 47, 92, 133, 144, 159, 185, 199, 237, 276, 281, 286, 287, 312, 323, 365, 368, 370, 399, 420, 707, 777, 801, 805, 807, 836, 839, 856, 858, 859, 860, 887, 893, 976, 1001, 1289], "existing_t": 1289, "existing_table_path": [35, 312], "exit": [46, 84, 168, 1275, 1287], "exp": [442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260, 1280], "exp_a": 1281, "expand": [129, 141, 143, 148, 448, 540, 542, 586, 777, 891, 893, 1031, 1260], "expand_selector": 893, "expans": 675, "expect": [63, 65, 97, 105, 113, 129, 131, 143, 526, 535, 737, 777, 823, 825, 887], "expens": [129, 130, 139, 141, 143, 147, 148, 162, 164, 216, 222, 245, 246, 247, 276, 277, 312, 535, 777, 801, 803, 807, 839, 853, 858, 887, 1032, 1116, 1260, 1290], "experiment": [274, 312, 859, 887], "explain": [53, 54, 173, 220, 312, 798, 799, 887, 1286], "explainformat": [808, 887], "explicit": [36, 91, 131, 143, 157, 259, 281, 312, 751, 848, 856, 887], "explicitli": [91, 132, 157, 159, 168, 199, 312, 587, 759, 777, 788, 1287], "explod": [312, 372, 454, 573, 589, 686, 777, 887, 891, 1145, 1260, 1278], "explor": [183, 312, 803, 887], "expon": [578, 777, 1135, 1260, 1281], "exponenti": [442, 443, 444, 445, 447, 578, 777, 1026, 1027, 1028, 1029, 1030, 1260, 1281], "export": [36, 37, 38, 171, 216, 217, 246, 247, 264, 266, 269, 312, 773, 893, 896, 1235, 1260], "expos": 789, "expr": [1, 47, 48, 49, 50, 51, 191, 193, 194, 218, 219, 233, 237, 245, 250, 251, 269, 274, 286, 287, 312, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 773, 777, 778, 779, 782, 783, 784, 785, 786, 809, 810, 811, 820, 821, 835, 840, 841, 859, 860, 887, 891, 893, 965, 972, 975, 976, 990, 998, 1022, 1023, 1027, 1034, 1035, 1039, 1041, 1043, 1068, 1080, 1086, 1102, 1106, 1115, 1127, 1128, 1180, 1185, 1191, 1208, 1260, 1285], "expr1": [1279, 1287], "expr2": [1279, 1287], "expr_unique_subset": [233, 312], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 175, 191, 193, 195, 203, 218, 219, 222, 233, 237, 245, 250, 251, 255, 258, 269, 274, 275, 286, 287, 289, 291, 298, 312, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 337, 338, 342, 343, 344, 345, 346, 349, 360, 365, 366, 367, 368, 369, 370, 372, 377, 378, 379, 380, 381, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 446, 448, 449, 451, 452, 456, 458, 459, 461, 462, 463, 464, 469, 472, 473, 474, 475, 476, 477, 478, 486, 487, 491, 492, 494, 495, 498, 499, 505, 507, 525, 526, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 552, 554, 556, 557, 559, 561, 563, 564, 567, 568, 570, 572, 573, 577, 578, 579, 580, 582, 586, 587, 588, 589, 591, 592, 614, 615, 616, 619, 621, 622, 624, 626, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 651, 652, 654, 655, 656, 657, 665, 669, 678, 679, 682, 683, 686, 687, 688, 690, 691, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 741, 743, 746, 749, 751, 752, 753, 754, 755, 757, 759, 761, 763, 764, 765, 767, 768, 773, 776, 789, 793, 798, 799, 808, 809, 812, 815, 820, 821, 834, 840, 841, 844, 845, 847, 852, 859, 860, 861, 863, 864, 871, 887, 891, 893, 919, 954, 965, 972, 975, 976, 990, 1022, 1023, 1027, 1033, 1041, 1043, 1052, 1068, 1077, 1080, 1115, 1116, 1127, 1128, 1143, 1144, 1163, 1167, 1180, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1200, 1201, 1202, 1215, 1219, 1260, 1278, 1279, 1281, 1282, 1286], "exprmetanamespac": [539, 543], "ext": 131, "extend": [0, 119, 284, 312, 449, 777, 789, 891, 902, 1033, 1260], "extend_const": [777, 1260], "extens": [271, 312, 1242, 1260], "extern": [861, 887], "extra": [35, 129, 130, 133, 135, 137, 143, 144, 145, 192, 204, 312, 777, 816, 887, 891, 1032, 1260], "extract": [123, 173, 259, 312, 398, 401, 403, 406, 408, 409, 410, 411, 412, 413, 416, 418, 419, 422, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 577, 638, 639, 640, 644, 645, 654, 656, 777, 975, 978, 979, 980, 983, 985, 989, 990, 991, 993, 994, 997, 999, 1000, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1188, 1189, 1190, 1194, 1195, 1204, 1280], "extract_numb": [577, 777], "extracted_nr": 638, "extrem": [449, 594, 777, 1033, 1149, 1260], "extrema": [618, 777, 1168, 1260], "f": [48, 130, 131, 195, 202, 217, 264, 270, 276, 280, 312, 321, 361, 369, 526, 618, 636, 664, 667, 707, 777, 812, 887, 893, 935, 1108, 1186, 1214, 1217, 1260, 1265, 1278], "f32": [1, 50, 176, 259, 268, 274, 312, 618, 756, 777, 795, 848, 887, 893, 1114, 1260, 1285], "f4": [270, 312], "f5ed2452": [36, 312], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 176, 177, 178, 181, 183, 184, 185, 188, 193, 194, 197, 201, 202, 203, 204, 209, 210, 218, 219, 224, 225, 226, 227, 231, 237, 238, 239, 257, 258, 260, 262, 274, 283, 286, 291, 294, 296, 299, 300, 301, 302, 304, 305, 312, 320, 323, 329, 330, 331, 332, 333, 334, 352, 358, 363, 369, 373, 375, 376, 378, 379, 380, 388, 389, 393, 394, 422, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 455, 456, 461, 463, 470, 471, 479, 480, 481, 482, 484, 486, 498, 509, 510, 522, 528, 529, 530, 531, 533, 536, 537, 538, 551, 554, 556, 565, 566, 567, 568, 574, 578, 580, 581, 582, 583, 587, 588, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 621, 622, 623, 627, 628, 678, 682, 683, 687, 692, 701, 702, 706, 707, 709, 711, 724, 725, 739, 742, 743, 744, 756, 758, 766, 773, 777, 795, 796, 803, 805, 810, 811, 815, 816, 819, 820, 821, 827, 828, 835, 847, 849, 857, 859, 861, 864, 867, 869, 872, 873, 874, 875, 877, 878, 887, 893, 903, 904, 905, 906, 907, 908, 926, 932, 937, 942, 950, 951, 956, 957, 958, 966, 967, 970, 971, 1003, 1026, 1027, 1028, 1029, 1030, 1034, 1038, 1048, 1050, 1051, 1080, 1091, 1092, 1104, 1110, 1111, 1112, 1113, 1132, 1135, 1137, 1139, 1144, 1149, 1151, 1152, 1154, 1155, 1156, 1158, 1159, 1160, 1172, 1173, 1177, 1233, 1234, 1248, 1260, 1269, 1277, 1278, 1281, 1284, 1287, 1290], "f_string": 728, "fa1e": [669, 1219], "face": [139, 141, 143, 146, 147, 148], "facil": 131, "facilit": [179, 312], "factor": [442, 444, 445, 684, 777, 1026, 1028, 1029, 1243, 1260], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 172, 270, 277, 312, 338, 424, 526, 664, 666, 667, 671, 777, 853, 887, 1116, 1214, 1216, 1217, 1221, 1241, 1260, 1285], "fall": [148, 388, 580, 777, 798, 887, 966, 1137, 1260], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 172, 175, 176, 177, 178, 183, 189, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 220, 225, 226, 232, 233, 235, 237, 238, 245, 246, 247, 248, 250, 253, 256, 258, 259, 262, 265, 267, 270, 271, 275, 276, 277, 281, 282, 284, 286, 294, 296, 299, 300, 302, 305, 312, 324, 325, 326, 337, 340, 341, 344, 348, 349, 357, 362, 365, 368, 370, 372, 373, 382, 383, 384, 385, 386, 387, 388, 395, 407, 422, 439, 440, 441, 442, 444, 445, 463, 464, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 494, 498, 501, 503, 505, 514, 521, 527, 533, 534, 535, 539, 541, 543, 545, 548, 567, 568, 570, 572, 575, 576, 580, 583, 594, 595, 597, 599, 601, 603, 605, 606, 608, 610, 614, 616, 618, 623, 625, 626, 629, 630, 631, 632, 635, 640, 641, 643, 644, 650, 651, 652, 655, 656, 658, 664, 666, 667, 669, 686, 688, 691, 694, 695, 696, 697, 698, 700, 703, 704, 705, 708, 709, 712, 713, 718, 719, 721, 722, 733, 734, 737, 749, 752, 756, 759, 764, 765, 767, 768, 777, 793, 795, 796, 797, 798, 799, 803, 808, 815, 816, 820, 821, 823, 825, 834, 840, 843, 845, 847, 848, 852, 853, 856, 859, 867, 869, 872, 873, 875, 878, 887, 891, 893, 900, 901, 911, 914, 915, 918, 922, 923, 931, 936, 938, 939, 941, 943, 945, 947, 949, 952, 953, 960, 961, 962, 963, 964, 965, 966, 972, 984, 1003, 1021, 1023, 1024, 1026, 1028, 1029, 1036, 1037, 1042, 1044, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1071, 1072, 1076, 1080, 1083, 1085, 1087, 1096, 1103, 1109, 1122, 1128, 1130, 1133, 1134, 1137, 1139, 1140, 1141, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1161, 1165, 1169, 1174, 1176, 1179, 1180, 1181, 1182, 1185, 1190, 1191, 1193, 1194, 1200, 1201, 1202, 1205, 1206, 1208, 1214, 1216, 1217, 1219, 1236, 1241, 1242, 1246, 1249, 1251, 1260, 1270, 1272, 1278, 1282, 1287], "far": [36, 312], "fashion": [218, 312, 808, 834, 845, 887], "fast": [41, 43, 45, 162, 164, 312, 449, 616, 777, 887, 891, 1033, 1165, 1260, 1290], "fast_executemani": [34, 312], "faster": [42, 43, 44, 45, 131, 134, 192, 270, 280, 312, 535, 689, 777, 887, 1032, 1116, 1260], "fastexcel": [134, 151], "favor": [34, 312], "fay": 126, "feat1": [269, 274, 312], "feat2": [269, 274, 312], "feather": [37, 135, 146, 312, 789], "featur": [1, 41, 52, 63, 65, 269, 274, 312], "feature_0": [861, 887], "feature_0_train": [861, 887], "feature_1": [861, 887], "feature_nam": [274, 312], "feb": [151, 1282], "februari": 1282, "fed": 660, "feel": [631, 652, 1181, 1202], "fetch": [125, 798, 817, 824, 887], "fetch_california_h": [274, 312], "few": [202, 312], "fewer": [642, 665, 887, 1192, 1215], "ff": 1277, "ff00": [669, 1219], "fff": 1, "ffff00": [366, 367, 633, 939, 940, 1183], "ffffff": [36, 312], "ffi": [190, 312, 1025, 1260], "fgg": 893, "fghi": 1282, "fh": 130, "fiction": 1269, "field": [32, 33, 35, 42, 76, 109, 112, 119, 278, 312, 361, 526, 534, 535, 558, 560, 562, 591, 638, 639, 644, 656, 657, 677, 678, 691, 713, 714, 738, 759, 777, 854, 887, 935, 1108, 1116, 1147, 1189, 1206, 1207, 1228, 1230, 1260, 1283], "field_0": [361, 526, 935, 1108], "field_1": [361, 526, 935, 1108], "field_2": [935, 1108], "field_n": [361, 526, 935, 1108], "field_nam": [535, 777, 1116, 1260], "figsiz": [834, 845, 887], "figur": [613, 777, 845, 887, 1160, 1260], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 252, 312, 390, 458, 547, 550, 777, 804, 842, 887, 891, 1032, 1260], "file_cache_ttl": [139, 143, 146, 147], "filenam": 135, "filesystem": [35, 133, 144, 145, 312], "fill": [47, 55, 177, 193, 194, 255, 280, 312, 316, 364, 383, 386, 450, 451, 457, 470, 471, 595, 597, 599, 601, 603, 606, 608, 610, 617, 728, 749, 752, 768, 777, 810, 811, 844, 861, 887, 1034, 1035, 1050, 1051, 1129, 1150, 1151, 1153, 1156, 1157, 1158, 1167, 1260], "fill_char": [648, 649, 1198, 1199], "fill_nan": [194, 312, 451, 777, 811, 887, 1035, 1260], "fill_nul": [47, 193, 312, 450, 777, 810, 861, 887, 1034, 1260], "fill_valu": [255, 280, 312, 617, 777, 844, 887, 1167, 1260], "fillnullstrategi": [194, 312, 451, 777, 811, 887, 1035, 1260], "film": 1269, "filter": [1, 48, 133, 143, 144, 148, 149, 187, 211, 212, 213, 237, 298, 312, 544, 546, 635, 658, 693, 717, 720, 727, 756, 767, 777, 806, 818, 848, 871, 887, 893, 1164, 1260, 1276], "final": [13, 36, 47, 148, 219, 220, 312, 442, 444, 445, 777, 803, 821, 887, 891, 1026, 1028, 1029, 1260, 1288], "find": [55, 200, 312, 615, 630, 631, 777, 1163, 1181, 1260], "find_pat": 641, "fine": [798, 887], "finish": [192, 312, 1032, 1260], "finit": [474, 687, 709, 777, 1055, 1260], "first": [41, 47, 129, 130, 134, 135, 137, 140, 141, 143, 148, 152, 153, 154, 155, 173, 202, 204, 206, 219, 221, 222, 232, 236, 237, 244, 263, 267, 268, 276, 277, 282, 289, 295, 312, 337, 339, 348, 387, 391, 415, 417, 421, 437, 456, 466, 475, 488, 496, 498, 503, 504, 526, 534, 535, 545, 577, 578, 593, 615, 626, 630, 636, 637, 641, 642, 644, 645, 650, 651, 665, 672, 706, 713, 727, 731, 767, 773, 777, 798, 816, 817, 821, 824, 833, 838, 853, 861, 863, 868, 887, 893, 911, 922, 965, 967, 968, 996, 998, 1002, 1018, 1047, 1056, 1070, 1078, 1080, 1085, 1086, 1108, 1116, 1163, 1176, 1186, 1187, 1189, 1191, 1192, 1194, 1195, 1200, 1201, 1215, 1222, 1232, 1236, 1238, 1241, 1260, 1279, 1280, 1282, 1288, 1290], "first_column": [36, 312], "first_non_nul": [526, 1108], "first_part": [656, 657, 1206, 1207], "fisher": [484, 623, 777, 1067, 1174, 1260], "fit": [126, 216, 256, 280, 312, 618, 752, 777, 1168, 1169, 1260], "five": [273, 312, 1290], "fix": [10, 56, 65, 157, 437, 723, 1018], "flag": [52, 156, 270, 312, 616, 630, 637, 638, 641, 650, 651, 777, 808, 825, 887, 893, 1165, 1180, 1187, 1188, 1191, 1200, 1201, 1241, 1260, 1282], "flat": [126, 247, 312, 499, 589, 777, 1081, 1145, 1260], "flatten": 777, "flavour": [36, 131, 312], "flight": 131, "flight_sql": 131, "flightsql": 131, "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 172, 183, 190, 193, 219, 239, 248, 269, 270, 304, 312, 344, 376, 388, 393, 394, 422, 439, 440, 441, 442, 444, 445, 450, 455, 456, 461, 463, 470, 474, 477, 479, 480, 481, 482, 486, 494, 514, 529, 533, 536, 551, 565, 566, 567, 568, 578, 580, 581, 594, 595, 597, 599, 601, 603, 604, 606, 608, 610, 612, 614, 687, 750, 752, 777, 803, 810, 821, 835, 845, 877, 887, 893, 918, 945, 951, 966, 967, 969, 970, 971, 1003, 1021, 1025, 1026, 1028, 1029, 1034, 1038, 1048, 1067, 1076, 1096, 1111, 1125, 1126, 1135, 1136, 1137, 1138, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1161, 1164, 1174, 1178, 1231, 1241, 1250, 1260, 1287, 1290], "float16": [274, 312], "float32": [1, 10, 33, 42, 50, 176, 197, 268, 269, 270, 274, 312, 443, 737, 777, 795, 887, 893, 1027, 1054, 1114, 1239, 1241, 1244, 1260], "float4": [259, 312, 756, 848, 887, 1285], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 179, 188, 190, 197, 249, 274, 286, 312, 329, 330, 331, 332, 333, 334, 369, 373, 378, 379, 380, 389, 422, 443, 446, 479, 480, 582, 621, 622, 682, 683, 725, 749, 752, 768, 773, 777, 800, 807, 839, 859, 887, 893, 1003, 1027, 1242, 1248, 1260], "float_list": 72, "float_precis": [9, 10, 27, 33, 36, 42, 312, 887], "float_scientif": [33, 42, 312, 887], "floatfmt": 11, "floor": [49, 456, 777, 1260, 1280], "floor_a": 1281, "floordiv": [687, 777], "fmt": [11, 219, 312, 469, 728, 777, 818, 821, 887], "fmt_number": [312, 316], "fmt_str_length": [12, 718, 719, 721, 722], "fmt_table_cell_list_len": 13, "fmt_titl": [36, 312], "fn": [713, 714, 727, 751], "foggi": [650, 651, 1200, 1201], "fold": [312, 545, 706, 713, 714, 751], "folder": 149, "follow": [36, 41, 52, 129, 130, 131, 133, 134, 140, 143, 144, 145, 152, 204, 219, 222, 236, 244, 270, 282, 312, 417, 421, 434, 443, 534, 577, 578, 583, 593, 596, 598, 600, 602, 604, 605, 607, 609, 611, 677, 687, 702, 718, 719, 721, 722, 739, 764, 765, 767, 769, 770, 772, 777, 778, 779, 782, 784, 785, 786, 816, 821, 833, 838, 887, 893, 998, 1002, 1015, 1027, 1135, 1139, 1162, 1164, 1241, 1252, 1254, 1256, 1260, 1261, 1266, 1267, 1268, 1285, 1290], "font": [36, 312], "font_color": [36, 312], "font_siz": [36, 312], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 212, 218, 221, 222, 223, 224, 225, 226, 227, 230, 231, 234, 237, 239, 241, 242, 245, 248, 249, 250, 252, 254, 257, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 276, 277, 278, 283, 284, 285, 290, 312, 374, 388, 390, 417, 460, 466, 469, 488, 539, 541, 543, 544, 545, 546, 547, 548, 549, 580, 589, 629, 632, 634, 636, 638, 639, 643, 653, 655, 657, 659, 660, 661, 662, 663, 670, 673, 681, 699, 709, 710, 711, 726, 730, 731, 732, 735, 736, 740, 742, 744, 745, 747, 748, 750, 755, 758, 762, 766, 767, 773, 777, 795, 800, 801, 805, 806, 807, 812, 818, 819, 820, 832, 836, 839, 840, 853, 854, 858, 861, 887, 892, 893, 946, 966, 998, 1087, 1135, 1137, 1145, 1182, 1184, 1186, 1188, 1189, 1203, 1207, 1212, 1213, 1220, 1223, 1260, 1274, 1276, 1277, 1278, 1279, 1282, 1285], "foo1": 1282, "foo11": [197, 312], "foo_": [542, 655, 728], "foo_1": [267, 312], "foo_2": [267, 312], "foo_3_4": 1282, "foo_a": [237, 312], "foo_a_bar_1": 728, "foo_at_1": 1278, "foo_b": [237, 312], "foo_b_bar_2": 728, "foo_bar": [539, 543, 655, 737, 1274], "foo_bar2": [539, 543], "foo_bar_baz": 655, "foo_c_bar_3": 728, "foo_low": [670, 1282], "foo_mean": 1278, "foo_std": 1277, "foo_strip": 659, "foo_strip_end": 660, "foo_strip_start": 661, "foo_sum": [1277, 1278], "foo_uniqu": 1278, "foo_upp": [673, 1282], "foo_var": 1277, "foobar": [662, 663, 1212, 1213, 1282], "foobarbar": [663, 1213], "foofoobar": [662, 1212], "foral": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "forc": [219, 222, 270, 298, 312, 526, 820, 821, 871, 887, 1116, 1241, 1260], "force_parallel": [219, 312, 820, 821, 887], "form": [33, 42, 116, 118, 119, 120, 122, 138, 139, 147, 216, 246, 280, 312, 574, 672, 777, 887, 1132, 1222, 1260, 1282], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 41, 42, 87, 127, 129, 130, 131, 134, 135, 137, 140, 143, 149, 171, 184, 191, 202, 216, 228, 237, 246, 247, 252, 266, 279, 310, 312, 316, 390, 421, 423, 426, 547, 548, 664, 666, 667, 671, 723, 777, 804, 808, 809, 829, 842, 855, 887, 896, 1004, 1007, 1214, 1216, 1217, 1221, 1259, 1282, 1283], "formula": [36, 312, 439, 777, 1021, 1260], "fortran": [269, 270, 312], "forward": [194, 219, 255, 312, 356, 395, 414, 451, 457, 519, 617, 777, 811, 821, 844, 887, 930, 972, 995, 1035, 1101, 1167, 1260], "forward_fil": [282, 312, 364, 383, 386, 617, 777], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 188, 259, 312, 615, 641, 645, 662, 663, 664, 667, 777, 848, 887, 1163, 1191, 1195, 1212, 1213, 1214, 1217, 1260, 1272, 1287], "four": [273, 312, 1287], "fourth": [484, 777, 1067, 1260], "frac": [442, 444, 445, 623, 777, 1026, 1028, 1029, 1174, 1260], "fraction": [33, 42, 152, 153, 154, 155, 248, 312, 422, 514, 574, 614, 664, 667, 777, 887, 1003, 1096, 1132, 1161, 1214, 1217, 1260], "fragment": 1287, "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 176, 177, 183, 216, 217, 220, 222, 229, 233, 236, 245, 246, 247, 259, 274, 280, 281, 312, 756, 795, 796, 803, 830, 833, 848, 856, 887, 893, 953, 1260, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1286, 1290], "frame_data": [1271, 1274], "frameinittyp": [312, 887], "frametyp": [47, 1287], "framework": [237, 279, 312, 855, 887], "freedom": [260, 283, 312, 522, 528, 606, 607, 610, 611, 628, 692, 709, 711, 753, 754, 758, 766, 777, 849, 857, 887, 1156, 1158, 1178, 1250, 1260], "freeli": [756, 848, 887, 893], "freez": [36, 312], "freeze_pan": [36, 312], "frequenc": [282, 312, 691, 777, 1249, 1260], "frequent": [1162, 1164, 1260], "fri": [312, 315], "fridai": [204, 312, 395, 423, 426, 705, 816, 887, 972, 1004, 1007], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 173, 176, 183, 184, 185, 190, 192, 195, 196, 202, 204, 216, 217, 218, 219, 220, 228, 237, 241, 244, 245, 247, 248, 250, 251, 259, 267, 274, 276, 277, 279, 280, 281, 282, 288, 312, 315, 316, 361, 369, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 446, 456, 458, 470, 484, 502, 514, 526, 535, 565, 566, 568, 573, 574, 577, 580, 582, 593, 594, 596, 598, 600, 602, 604, 607, 609, 611, 614, 626, 637, 638, 642, 644, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 689, 701, 702, 705, 706, 717, 718, 719, 720, 721, 722, 723, 737, 752, 756, 763, 764, 765, 773, 776, 777, 795, 803, 804, 805, 812, 816, 820, 821, 829, 836, 838, 840, 841, 848, 853, 855, 856, 861, 862, 887, 893, 935, 942, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1025, 1027, 1032, 1067, 1084, 1096, 1108, 1125, 1126, 1128, 1129, 1132, 1137, 1149, 1161, 1187, 1188, 1192, 1194, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1221, 1236, 1251, 1260, 1269, 1270, 1271, 1272, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290], "from_arrai": 756, "from_arrow": 117, "from_json": 777, "from_panda": 117, "from_repr": [268, 312, 1238, 1260], "fromkei": [48, 50], "front": [204, 312, 816, 887], "fruit": [265, 312, 590, 635, 658, 665, 777, 1185, 1208, 1215], "fruits_revers": [590, 777], "fsspec": [129, 130, 135, 137, 144, 145, 151], "fsspecfileio": 145, "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 139, 143, 144, 145, 147, 149, 218, 281, 312, 642, 644, 664, 665, 666, 667, 671, 718, 719, 820, 825, 856, 887, 893, 1192, 1194, 1214, 1215, 1216, 1217, 1221, 1260, 1276, 1290], "full_sent": 708, "fulli": [161, 236, 248, 270, 312], "funcnam": [36, 312], "function": [0, 36, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 170, 172, 175, 181, 184, 190, 197, 222, 228, 236, 237, 241, 259, 269, 270, 271, 274, 275, 276, 279, 280, 281, 298, 312, 315, 316, 324, 361, 371, 372, 387, 388, 390, 421, 442, 444, 445, 467, 526, 534, 535, 557, 558, 573, 577, 580, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 623, 684, 685, 686, 695, 699, 710, 712, 713, 714, 726, 727, 729, 731, 732, 735, 738, 739, 742, 744, 747, 749, 751, 753, 754, 758, 762, 766, 768, 773, 777, 789, 793, 799, 804, 825, 829, 833, 836, 848, 852, 855, 856, 863, 871, 887, 891, 895, 935, 944, 949, 965, 966, 1002, 1025, 1026, 1028, 1029, 1048, 1108, 1116, 1137, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1162, 1164, 1169, 1174, 1239, 1242, 1244, 1245, 1260, 1265, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290], "function_nam": 891, "further": 773, "futur": [54, 172, 183, 253, 312, 799, 803, 843, 887], "g": [33, 42, 126, 129, 133, 135, 137, 144, 149, 161, 172, 184, 215, 270, 280, 312, 321, 390, 443, 446, 535, 618, 725, 777, 804, 836, 887, 1027, 1260, 1290], "g1": [452, 693, 777], "g2": [452, 693, 777], "g_1": [623, 777, 1174, 1260], "gag": 26, "gamma": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "gantt": [834, 887], "gather": [130, 198, 312, 337, 460, 502, 703, 777, 814, 887, 911, 1040, 1084, 1260], "gather_everi": [312, 777, 887, 1260], "gb": [190, 312, 369, 1025, 1260], "gbp": 1290, "gc": [35, 133, 144, 145, 312], "gca": 26, "gcaacgcatata": 26, "gcp": [139, 141, 143, 145, 146, 147, 148], "gdp": [219, 312, 821, 887], "gdp2": [219, 312, 821, 887], "gdp_date": [219, 312, 821, 887], "ge": [777, 1260], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 172, 179, 181, 237, 248, 267, 270, 276, 312, 373, 514, 614, 619, 700, 718, 721, 733, 734, 736, 752, 764, 765, 777, 887, 945, 1096, 1161, 1170, 1236, 1260, 1290], "geq": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "germani": [219, 312, 821, 887], "get": [47, 54, 136, 142, 149, 173, 175, 179, 180, 188, 196, 199, 201, 204, 206, 207, 211, 213, 214, 221, 224, 231, 232, 237, 244, 245, 249, 254, 257, 263, 271, 275, 285, 295, 306, 312, 322, 335, 336, 337, 339, 347, 350, 362, 369, 372, 374, 383, 384, 385, 386, 395, 405, 453, 459, 466, 483, 485, 488, 500, 506, 527, 536, 537, 538, 544, 546, 551, 565, 566, 575, 576, 581, 592, 593, 624, 628, 636, 680, 681, 685, 686, 688, 692, 703, 705, 726, 731, 735, 739, 740, 741, 742, 744, 745, 746, 748, 758, 762, 766, 777, 793, 798, 799, 801, 807, 813, 816, 817, 822, 824, 838, 839, 846, 851, 852, 858, 868, 879, 887, 891, 892, 897, 909, 910, 911, 912, 913, 921, 924, 936, 942, 946, 952, 961, 962, 963, 964, 972, 982, 1020, 1037, 1042, 1047, 1052, 1053, 1065, 1070, 1082, 1088, 1109, 1117, 1119, 1120, 1122, 1124, 1125, 1126, 1133, 1134, 1138, 1148, 1175, 1178, 1186, 1232, 1236, 1242, 1246, 1250, 1260], "get_chunk": 1260, "get_column": [172, 272, 312], "get_column_index": 312, "get_worksheet_by_nam": [36, 312], "gevent": [54, 151, 799, 887], "ghi": [321, 638, 777, 893, 1188], "gil": [535, 777], "git": 52, "github": [132, 312], "give": [139, 146, 147, 219, 228, 277, 279, 312, 405, 456, 484, 586, 687, 691, 777, 789, 821, 829, 853, 855, 887, 982, 1067, 1249, 1260, 1286], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 170, 190, 191, 193, 204, 214, 222, 235, 236, 245, 246, 247, 255, 258, 274, 281, 312, 344, 356, 361, 369, 372, 377, 396, 400, 423, 425, 426, 439, 443, 467, 472, 494, 519, 526, 529, 535, 573, 577, 583, 586, 587, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 617, 638, 639, 648, 649, 664, 667, 674, 677, 686, 725, 726, 735, 738, 739, 752, 753, 754, 777, 809, 816, 825, 833, 844, 847, 856, 871, 887, 892, 893, 895, 918, 930, 935, 942, 954, 973, 977, 1004, 1006, 1007, 1021, 1025, 1027, 1048, 1052, 1066, 1076, 1101, 1108, 1111, 1114, 1116, 1129, 1135, 1139, 1145, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1163, 1167, 1188, 1189, 1198, 1199, 1214, 1217, 1224, 1248, 1251, 1260, 1269, 1271, 1276, 1278, 1281, 1282, 1287, 1289, 1290], "glimps": [183, 206, 312], "glob": [129, 130, 141, 143, 146, 147, 148], "global": [46, 84, 85, 134, 150, 159, 167, 259, 312, 587, 588, 756, 777, 848, 887, 947, 948, 1143, 1144, 1260, 1270, 1272, 1286], "gmt": [400, 404, 420, 977, 981, 1001], "go": [12, 129, 130, 143, 635, 1185], "godfath": 1269, "goe": 12, "gonfruit": 1215, "good": [41, 43, 45, 216, 312, 887, 1281], "goodby": 1, "googl": [133, 144, 145], "gpu": [269, 312, 798, 887, 1239, 1260], "gpu_devic": [269, 312], "gpudevic": [269, 312], "gpuengin": [798, 887], "grade": [1067, 1260], "grain": [798, 887], "granular": 1287, "grape": 1282, "graph": [53, 131, 220, 312, 798, 818, 861, 887], "graphviz": [220, 312, 845, 887], "great": [312, 316], "great_tabl": [312, 316], "greater": [177, 219, 312, 461, 463, 472, 623, 648, 649, 657, 674, 777, 821, 887, 1052, 1174, 1198, 1199, 1207, 1224, 1260], "greatest": [1277, 1280], "greatli": [135, 146], "green": [46, 84, 85, 298, 691, 777, 871, 1249, 1260], "greenlet": [54, 799, 887], "greet": 1, "grid": [470, 777], "grid_point": [470, 777], "gridlin": [36, 312], "gross": 1269, "group": [9, 27, 41, 45, 130, 148, 176, 203, 204, 217, 233, 235, 237, 244, 247, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 322, 372, 387, 448, 454, 459, 462, 498, 534, 535, 544, 546, 573, 583, 592, 593, 625, 626, 630, 637, 638, 639, 641, 650, 651, 686, 691, 739, 777, 795, 815, 816, 838, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 891, 893, 965, 1080, 1148, 1180, 1187, 1188, 1189, 1191, 1200, 1201, 1249, 1260, 1269, 1277, 1286, 1287], "group_bi": [204, 233, 237, 244, 282, 311, 312, 322, 372, 452, 454, 459, 462, 534, 535, 573, 625, 626, 686, 693, 718, 721, 739, 777, 798, 799, 808, 816, 834, 838, 845, 885, 887, 893], "group_by_dynam": [244, 312, 838, 887], "group_by_partit": [834, 887], "group_col": [452, 693, 777], "group_df": [298, 871], "group_dtyp": [573, 777], "group_index": [637, 1187], "group_to_row": [573, 777], "groupbi": [203, 312, 535, 739, 777], "grow": [284, 312], "grown": [208, 312], "gt": [312, 316, 777, 1260], "gte": [452, 693, 777], "guarante": [41, 45, 129, 130, 175, 183, 205, 275, 277, 312, 371, 372, 465, 685, 686, 777, 793, 803, 852, 853, 887, 944, 1046, 1245, 1260], "guid": [777, 891, 1290], "gzip": [41, 45, 312, 887], "h": [280, 312, 321, 423, 426, 618, 650, 651, 664, 667, 671, 777, 1200, 1201, 1214, 1217, 1221, 1282, 1283], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 172, 282, 288, 293, 312, 371, 372, 387, 458, 534, 545, 550, 642, 665, 675, 685, 686, 726, 735, 773, 777, 799, 862, 866, 871, 887, 944, 953, 965, 967, 1192, 1215, 1245, 1260], "half": [274, 312, 421, 442, 443, 444, 445, 777, 1002, 1026, 1027, 1028, 1029, 1260], "half_lif": [442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260], "ham": [31, 33, 35, 37, 38, 41, 176, 179, 180, 181, 185, 186, 187, 188, 189, 195, 200, 205, 206, 208, 218, 221, 223, 225, 227, 230, 234, 239, 241, 242, 245, 248, 249, 250, 257, 260, 261, 263, 267, 268, 270, 271, 272, 277, 283, 284, 312, 374, 548, 773, 795, 800, 801, 805, 806, 807, 812, 820, 832, 836, 839, 840, 853, 861, 887, 946, 1276, 1277], "ham_a": [267, 312], "ham_b": [267, 312], "ham_right": [218, 312, 820, 887], "hamburg": 773, "hand": [36, 129, 130, 143, 312, 515, 516, 517, 518, 1097, 1098, 1099, 1100], "handi": [395, 705, 972], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 195, 199, 312, 391, 496, 636, 674, 777, 798, 799, 812, 887, 891, 968, 1078, 1186, 1224, 1260], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 312, 390, 777, 804, 887], "happen": [131, 400, 580, 777, 977, 1137, 1260], "hard": [143, 825, 887], "harder": [204, 312, 816, 887], "hardwar": 1290, "has_head": [129, 130, 134, 140, 143], "has_nul": [777, 1045, 1260], "has_prefix": 658, "has_suffix": 635, "has_two": 1278, "has_valid": 1260, "hash": [205, 312, 777, 1260], "hash_row": 312, "hat": [650, 651, 1200, 1201], "have": [5, 14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 184, 192, 216, 218, 219, 237, 240, 244, 246, 247, 266, 274, 289, 312, 387, 390, 442, 444, 445, 535, 545, 583, 587, 588, 593, 639, 652, 777, 804, 820, 821, 829, 838, 862, 863, 887, 891, 893, 965, 967, 1026, 1028, 1029, 1032, 1139, 1143, 1144, 1202, 1260, 1286, 1288, 1290], "haystack": [638, 1188], "he": 660, "head": [143, 202, 221, 263, 312, 327, 488, 573, 777, 824, 887, 1070, 1232, 1260], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 140, 143, 188, 276, 312, 887], "header_format": [36, 312], "header_nam": [276, 312], "headerless": 143, "heap": [190, 312, 777, 891, 1025, 1260], "heatmap": [36, 312], "heavili": 148, "height": [36, 126, 159, 187, 312], "hell": [659, 1209], "hello": [1, 20, 659, 660, 661, 893, 1087, 1209, 1210, 1211, 1271, 1274], "hello_": 728, "hello_data": 1274, "hello_world": 1274, "help": [36, 152, 153, 154, 155, 312, 887], "helper": [312, 316, 773], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 146, 147, 148, 157, 159, 163, 173, 237, 312, 395, 534, 535, 639, 645, 705, 777, 845, 887, 893, 972, 1195], "hex": [366, 367, 633, 634, 669, 939, 940, 1183, 1184, 1219], "hexadecim": [939, 940], "hf": [139, 141, 143, 146, 147, 148], "hf_token": [139, 141, 143, 146, 147, 148], "hi": [1, 1282], "hidden": [36, 312], "hidden_column": [36, 312], "hide": [21, 22, 23, 24, 36, 312], "hide_gridlin": [36, 312], "hide_password": 131, "high": [247, 312, 316, 580, 777, 789, 1137, 1260], "higher": [41, 45, 183, 239, 304, 312, 581, 603, 604, 750, 777, 803, 835, 877, 887, 967, 1138, 1154, 1260], "highest": [312, 316, 583, 690, 709, 777, 887, 1139, 1260], "highli": [777, 891], "hippopotamu": [648, 649, 1198, 1199], "hist": [777, 1260, 1265], "histogram": [1260, 1265], "hit": [794, 887], "hive": [141, 146, 148], "hive_partit": [141, 146, 148], "hive_schema": [141, 146, 148], "hmm": 893, "hold": [256, 270, 312, 1241, 1260], "holidai": [395, 705, 972], "home": [672, 1222], "horizont": [20, 55, 92, 197, 208, 224, 226, 231, 262, 280, 312, 696, 698, 707, 708, 713, 714, 716, 724, 727, 741, 743, 746, 751, 761, 861, 887], "host": [52, 129, 135, 137, 148], "hour": [139, 143, 146, 147, 204, 219, 244, 282, 312, 409, 411, 412, 416, 417, 421, 422, 428, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 720, 721, 722, 723, 763, 764, 765, 777, 816, 821, 838, 887, 893, 998, 1002, 1009, 1015, 1027, 1260, 1283], "hours_diff": 428, "hous": [274, 312], "how": [11, 35, 36, 47, 55, 92, 132, 139, 141, 143, 146, 147, 148, 187, 195, 218, 219, 237, 280, 281, 312, 345, 391, 420, 470, 495, 496, 573, 586, 605, 664, 667, 705, 720, 767, 777, 806, 812, 820, 821, 856, 861, 887, 891, 919, 968, 1001, 1077, 1078, 1155, 1214, 1217, 1260], "howev": [1, 119, 131, 190, 222, 270, 312, 798, 887, 1025, 1260], "hstack": [92, 312], "html": [36, 37, 38, 117, 131, 135, 137, 170, 171, 172, 181, 312, 895, 896], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 312, 637, 639, 845, 887, 895, 896, 1187, 1189], "hug": [139, 141, 143, 146, 147, 148], "hut": [650, 651, 1200, 1201], "hvplot": [312, 315, 1260, 1265], "hyperbol": [330, 332, 334, 379, 622, 683, 777, 904, 906, 908, 957, 1173, 1234, 1260], "hyperloglog": [174, 312, 328, 699, 777, 792, 887], "hyphen": [629, 1179], "hypothesi": [157, 159, 162, 163, 1290], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 173, 174, 175, 178, 179, 183, 184, 187, 189, 190, 192, 195, 199, 203, 204, 205, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 228, 229, 233, 235, 236, 237, 242, 244, 245, 246, 247, 248, 251, 252, 253, 255, 257, 258, 259, 260, 263, 264, 269, 270, 271, 274, 275, 276, 277, 279, 280, 281, 282, 283, 287, 289, 290, 298, 312, 315, 316, 321, 324, 326, 327, 328, 338, 341, 348, 349, 356, 361, 371, 372, 387, 388, 390, 393, 394, 395, 396, 399, 407, 414, 415, 417, 421, 423, 434, 442, 443, 444, 445, 448, 452, 456, 465, 467, 469, 472, 484, 490, 497, 498, 501, 503, 505, 514, 519, 520, 522, 526, 528, 531, 534, 535, 539, 541, 543, 544, 545, 547, 555, 573, 578, 580, 583, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 623, 624, 625, 626, 628, 629, 630, 631, 632, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 657, 659, 660, 661, 664, 665, 666, 667, 669, 671, 672, 674, 678, 685, 686, 691, 692, 695, 696, 697, 698, 699, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 721, 722, 727, 731, 732, 733, 734, 736, 737, 739, 742, 744, 747, 749, 752, 753, 754, 755, 756, 758, 762, 764, 765, 766, 767, 768, 773, 777, 792, 793, 794, 797, 798, 799, 801, 803, 804, 806, 807, 808, 812, 815, 816, 819, 820, 821, 823, 825, 829, 830, 834, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 860, 863, 871, 881, 887, 891, 893, 900, 901, 902, 915, 922, 923, 930, 935, 944, 947, 949, 954, 955, 965, 966, 967, 970, 971, 972, 973, 976, 984, 998, 1002, 1004, 1015, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1036, 1046, 1047, 1048, 1052, 1054, 1064, 1066, 1067, 1070, 1072, 1079, 1080, 1083, 1085, 1087, 1096, 1101, 1102, 1108, 1116, 1135, 1137, 1139, 1141, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1167, 1170, 1171, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1207, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1219, 1221, 1222, 1224, 1232, 1235, 1239, 1241, 1242, 1244, 1245, 1249, 1250, 1260, 1265, 1269, 1270, 1275, 1279, 1282, 1285, 1287, 1288, 1290], "i0e0": 1290, "i16": [1, 50, 403, 418, 436, 618, 777, 893, 999, 1238, 1260, 1290], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 250, 259, 312, 347, 348, 350, 373, 398, 406, 408, 409, 410, 411, 412, 416, 438, 618, 705, 767, 777, 840, 887, 921, 922, 924, 975, 985, 989, 990, 991, 997, 1019, 1114, 1260, 1279, 1283, 1290], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 173, 175, 176, 177, 178, 180, 184, 185, 187, 188, 191, 192, 194, 195, 198, 199, 201, 202, 203, 204, 206, 208, 209, 211, 213, 215, 218, 219, 221, 222, 223, 229, 230, 235, 236, 237, 238, 241, 242, 243, 244, 248, 250, 252, 255, 257, 258, 259, 261, 263, 265, 272, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 302, 305, 306, 312, 321, 323, 327, 337, 342, 343, 345, 346, 351, 353, 354, 355, 356, 357, 359, 362, 364, 371, 372, 377, 383, 384, 385, 386, 387, 388, 391, 392, 405, 425, 427, 428, 429, 430, 431, 432, 433, 443, 446, 448, 449, 451, 452, 453, 454, 456, 457, 459, 460, 462, 466, 468, 469, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 485, 488, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 532, 534, 535, 552, 553, 554, 556, 557, 559, 561, 563, 564, 569, 573, 574, 577, 578, 579, 580, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 614, 616, 617, 618, 619, 620, 624, 625, 626, 642, 650, 651, 665, 669, 674, 675, 677, 678, 679, 680, 681, 685, 686, 687, 688, 690, 693, 700, 703, 706, 707, 708, 713, 714, 715, 716, 717, 720, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 748, 751, 755, 756, 757, 760, 761, 762, 763, 767, 773, 777, 793, 795, 796, 798, 799, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 824, 825, 826, 830, 831, 833, 834, 836, 837, 838, 840, 842, 844, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 859, 862, 863, 864, 865, 867, 868, 869, 871, 872, 875, 878, 879, 887, 893, 897, 898, 899, 902, 920, 925, 927, 929, 930, 931, 933, 936, 944, 954, 955, 961, 962, 963, 964, 965, 966, 982, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1031, 1032, 1033, 1035, 1036, 1039, 1040, 1042, 1047, 1049, 1057, 1070, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1090, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1108, 1109, 1116, 1121, 1129, 1135, 1137, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1150, 1153, 1157, 1161, 1162, 1164, 1167, 1168, 1170, 1171, 1175, 1176, 1219, 1225, 1230, 1232, 1237, 1245, 1246, 1251, 1260, 1269, 1270, 1272, 1276, 1277, 1278, 1279, 1281, 1284, 1285, 1287, 1288, 1290], "i8": [360, 361, 403, 406, 409, 411, 412, 413, 416, 418, 419, 422, 435, 436, 525, 618, 749, 752, 768, 777, 934, 935, 968, 980, 983, 993, 994, 1000, 1003, 1016, 1017, 1107, 1146, 1168, 1248, 1260, 1283], "iceberg": [145, 789], "icon": [36, 312], "id": [26, 36, 55, 126, 129, 145, 269, 276, 289, 298, 312, 592, 650, 651, 689, 777, 863, 871, 887, 893, 1148, 1247, 1260, 1287, 1288, 1290], "id_char": 1290, "id_var": [228, 279, 312, 829, 855, 887], "ideal": 125, "ident": [123, 177, 178, 312, 423, 591, 592, 777, 796, 797, 887, 953, 955, 1004, 1147, 1148, 1260], "identifi": [123, 131, 228, 235, 277, 279, 290, 312, 829, 853, 855, 887], "idiograph": 893, "idiomat": [773, 801, 807, 839, 858, 871, 887], "idx": [143, 204, 217, 289, 312, 348, 361, 526, 816, 863, 887, 935, 1108, 1191], "idx_lit": 1191, "idx_rx": 1191, "ieee": [687, 777], "if_set": [5, 30], "if_table_exist": [34, 312], "ifnul": 1280, "ignor": [35, 131, 158, 159, 163, 226, 262, 281, 312, 324, 326, 349, 391, 420, 442, 444, 445, 496, 505, 565, 566, 629, 643, 695, 697, 708, 777, 856, 887, 893, 900, 901, 923, 968, 1001, 1026, 1028, 1029, 1078, 1087, 1125, 1126, 1179, 1193, 1260], "ignore_error": [129, 130, 139, 143, 147], "ignore_nul": [226, 262, 312, 324, 326, 349, 442, 444, 445, 505, 629, 643, 695, 697, 708, 777, 900, 901, 923, 1026, 1028, 1029, 1087, 1179, 1193, 1260], "ignore_spac": 893, "ijkl": 1282, "ilmsuxu": [630, 637, 638, 641, 650, 651, 1180, 1187, 1188, 1191, 1200, 1201], "imbal": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "imdb_scor": 1269, "immedi": [583, 700, 704, 718, 719, 721, 722, 733, 734, 749, 752, 759, 764, 765, 768, 777, 1139, 1260, 1270], "immut": [270, 312, 1241, 1260], "impact": [204, 312, 816, 887, 1269, 1287], "impl": 145, "implement": [41, 117, 131, 172, 205, 222, 298, 312, 315, 316, 465, 535, 556, 557, 559, 561, 563, 564, 675, 739, 777, 871, 1046, 1116, 1162, 1164, 1260, 1265], "implic": [390, 777, 804, 887], "implicit": [281, 312, 856, 887], "implicitli": [195, 312, 452, 767, 777, 812, 887, 1287], "implod": [777, 1260, 1278], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 176, 183, 184, 185, 187, 202, 204, 217, 219, 235, 237, 252, 259, 267, 269, 274, 279, 280, 282, 312, 315, 316, 369, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 452, 541, 547, 594, 596, 598, 600, 602, 604, 607, 609, 611, 705, 717, 718, 719, 720, 721, 722, 723, 756, 764, 765, 773, 777, 789, 795, 799, 803, 804, 805, 806, 816, 821, 825, 842, 855, 887, 942, 956, 958, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1027, 1055, 1058, 1060, 1061, 1149, 1172, 1233, 1260, 1265, 1270, 1284, 1287, 1290], "improv": [34, 45, 135, 146, 312, 534, 777, 887], "in_plac": [208, 256, 284, 312, 1140, 1169, 1176, 1260], "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 139, 143, 144, 145, 146, 147, 148, 159, 160, 179, 183, 190, 195, 235, 237, 247, 258, 274, 276, 280, 281, 312, 388, 422, 452, 456, 467, 472, 541, 580, 595, 597, 599, 601, 603, 605, 606, 608, 610, 655, 656, 659, 660, 705, 713, 753, 754, 777, 803, 812, 847, 856, 887, 893, 966, 967, 1003, 1025, 1036, 1048, 1052, 1137, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1205, 1206, 1209, 1260, 1287], "include_bom": [33, 42, 312, 887], "include_boundari": [204, 312, 816, 887], "include_break": [388, 580, 777, 966, 1137, 1260], "include_breakpoint": [467, 777, 1048, 1260], "include_categor": 893, "include_categori": [467, 777, 1048, 1260], "include_col": 159, "include_file_path": [139, 143, 146, 147, 148], "include_head": [33, 36, 42, 130, 276, 312, 887], "include_index": 121, "include_init": 713, "include_kei": [235, 247, 312], "include_nul": [281, 312, 856, 887], "inclus": [173, 204, 244, 312, 472, 593, 596, 598, 600, 602, 604, 607, 609, 611, 655, 656, 700, 718, 719, 721, 722, 733, 734, 764, 765, 777, 816, 838, 887, 1052, 1205, 1206, 1260], "incom": 131, "incompat": 110, "incomplet": [588, 777, 1144, 1260], "incorpor": 1287, "incorrect": [253, 312, 437, 534, 535, 616, 777, 843, 871, 887, 1018, 1165, 1260], "incorrectli": [129, 526], "increas": [36, 47, 129, 134, 140, 141, 148, 312, 387, 592, 777, 965, 1148, 1260], "independ": [53, 54, 156, 159, 163, 274, 312, 619, 777, 798, 799, 808, 834, 845, 887], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 151, 172, 198, 200, 204, 209, 214, 216, 237, 242, 244, 245, 246, 255, 257, 269, 270, 272, 279, 281, 282, 288, 289, 312, 322, 335, 336, 337, 339, 342, 343, 348, 356, 361, 443, 459, 460, 462, 491, 492, 501, 502, 503, 519, 520, 526, 593, 596, 598, 600, 602, 604, 607, 609, 611, 615, 617, 624, 630, 637, 641, 642, 654, 665, 675, 703, 733, 736, 777, 814, 816, 838, 844, 846, 855, 856, 862, 863, 887, 893, 909, 910, 911, 912, 913, 916, 917, 922, 930, 935, 1027, 1039, 1040, 1066, 1073, 1074, 1083, 1084, 1085, 1101, 1102, 1108, 1129, 1162, 1163, 1167, 1175, 1187, 1191, 1192, 1204, 1215, 1260, 1265, 1278, 1282], "index_column": [204, 244, 312, 593, 777, 816, 838, 887], "indexord": [269, 270, 312], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 156, 157, 163, 204, 244, 247, 253, 255, 267, 312, 338, 356, 459, 467, 473, 474, 475, 477, 478, 479, 480, 481, 482, 501, 519, 539, 540, 541, 542, 543, 593, 596, 598, 600, 602, 604, 607, 609, 611, 615, 617, 620, 703, 704, 748, 777, 816, 838, 843, 844, 887, 891, 893, 930, 1039, 1048, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1083, 1101, 1162, 1163, 1167, 1171, 1236, 1260, 1290], "indistinguish": [33, 42, 312, 887], "individu": [36, 45, 168, 244, 269, 270, 274, 312, 535, 638, 777, 798, 838, 887, 893, 952, 1188, 1260], "inequ": [567, 777], "inexact": [152, 153, 154, 155], "inf": [156, 159, 163, 334, 388, 467, 474, 477, 580, 687, 777, 908, 958, 966, 1055, 1058, 1114, 1132, 1137, 1248, 1260, 1284], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 146, 147, 148, 222, 312, 534, 535, 589, 644, 664, 666, 667, 668, 671, 723, 737, 752, 777, 887, 1116, 1145, 1194, 1214, 1216, 1217, 1218, 1221, 1260], "infer_schema": [129, 143], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 312, 644, 887, 1194], "inference_length": [668, 1218], "inference_s": [222, 312], "infin": [672, 687, 777, 1222], "infinit": [477, 687, 777, 1058, 1260], "influenc": [134, 825, 887], "influxdb": 131, "info": [133, 144, 145, 151], "inform": [19, 23, 34, 52, 133, 139, 141, 143, 144, 145, 146, 147, 148, 152, 154, 170, 181, 183, 312, 316, 484, 535, 623, 630, 637, 638, 641, 650, 651, 777, 798, 803, 834, 887, 891, 895, 948, 1067, 1174, 1180, 1187, 1188, 1191, 1200, 1201, 1260], "inherit": [245, 312, 390, 777, 804, 887], "init": [168, 1269], "initcap": 1280, "initi": [36, 76, 168, 312, 713, 727, 767, 1287], "initialis": [131, 168, 887], "inject": [36, 47, 312], "inlin": [18, 247, 312, 630, 637, 638, 641, 650, 651, 1180, 1187, 1188, 1191, 1200, 1201, 1278], "inner": [56, 72, 158, 218, 281, 312, 349, 360, 392, 505, 525, 535, 586, 684, 756, 777, 820, 856, 887, 923, 934, 969, 1087, 1107, 1116, 1243, 1260, 1276, 1287], "inner_dtyp": [158, 161], "innermost": [158, 161], "innter": 922, "inprocessqueri": [798, 887], "input": [0, 47, 53, 91, 119, 121, 129, 130, 175, 185, 203, 222, 226, 235, 237, 241, 250, 251, 255, 258, 262, 275, 286, 287, 291, 312, 321, 372, 377, 443, 446, 458, 472, 530, 534, 535, 545, 573, 587, 588, 626, 642, 652, 654, 660, 661, 662, 663, 665, 667, 678, 686, 694, 696, 698, 700, 703, 706, 707, 708, 716, 723, 725, 733, 734, 737, 738, 739, 741, 743, 746, 755, 759, 761, 767, 773, 777, 789, 793, 805, 815, 836, 840, 841, 844, 847, 852, 859, 860, 864, 887, 891, 954, 1027, 1052, 1112, 1113, 1116, 1135, 1143, 1144, 1167, 1192, 1204, 1215, 1217, 1260, 1281, 1282, 1284], "input_wildcard_expans": [777, 891], "insensit": [631, 638, 640, 650, 651, 652, 893, 1180, 1181, 1188, 1190, 1191, 1200, 1201, 1202], "insensitive_match": [630, 641], "insert": [34, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 209, 276, 278, 312, 615, 629, 643, 674, 777, 854, 887, 1163, 1179, 1193, 1224, 1260], "insert_aft": [36, 312], "insert_befor": [36, 312], "insert_chart": [36, 312], "insert_column": 312, "insid": [54, 534, 777, 799, 887], "inspect": [777, 887], "instal": [95, 121, 129, 130, 132, 135, 137, 181, 271, 312, 395, 705, 845, 887, 972, 1242, 1260], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 159, 163, 168, 176, 192, 197, 312, 545, 713, 727, 773, 795, 825, 862, 863, 887, 1032, 1260], "instanti": [34, 36, 131, 161, 250, 268, 269, 286, 312, 840, 859, 887, 892, 1238, 1239, 1260], "instantli": [54, 799, 887], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 149, 156, 157, 158, 159, 163, 174, 175, 202, 215, 216, 219, 222, 228, 233, 235, 245, 246, 247, 250, 251, 252, 255, 269, 270, 271, 275, 287, 288, 312, 315, 316, 337, 356, 372, 373, 388, 402, 443, 446, 456, 519, 547, 580, 587, 617, 629, 636, 646, 647, 650, 651, 659, 660, 661, 662, 663, 674, 686, 693, 700, 702, 704, 710, 718, 719, 721, 722, 723, 733, 734, 749, 752, 756, 759, 764, 765, 768, 777, 792, 793, 799, 808, 821, 829, 840, 841, 842, 844, 852, 860, 861, 862, 887, 893, 911, 930, 939, 945, 966, 979, 987, 988, 1027, 1045, 1101, 1137, 1143, 1162, 1164, 1167, 1176, 1179, 1186, 1196, 1197, 1200, 1201, 1209, 1210, 1211, 1224, 1241, 1242, 1260, 1265, 1269, 1270, 1274, 1287, 1288], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 177, 183, 190, 193, 194, 198, 200, 202, 205, 206, 207, 209, 214, 216, 217, 219, 221, 222, 232, 233, 242, 244, 245, 248, 254, 255, 257, 260, 263, 268, 272, 275, 280, 283, 285, 288, 289, 295, 306, 312, 321, 344, 348, 356, 358, 361, 363, 364, 371, 372, 387, 391, 395, 442, 444, 445, 449, 450, 451, 457, 459, 460, 462, 465, 466, 467, 488, 494, 496, 501, 502, 503, 504, 514, 519, 520, 522, 524, 525, 526, 528, 572, 574, 577, 578, 580, 583, 586, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 619, 624, 628, 637, 642, 644, 648, 649, 650, 654, 656, 657, 665, 668, 669, 674, 681, 685, 686, 692, 694, 700, 709, 711, 717, 720, 723, 729, 731, 733, 734, 748, 749, 752, 753, 754, 758, 759, 762, 763, 766, 768, 777, 793, 796, 803, 810, 811, 814, 817, 821, 824, 834, 844, 846, 849, 851, 852, 857, 858, 862, 863, 868, 879, 887, 892, 893, 909, 910, 918, 922, 930, 932, 935, 937, 944, 945, 952, 953, 959, 965, 968, 969, 972, 1025, 1026, 1028, 1029, 1033, 1034, 1035, 1039, 1040, 1046, 1047, 1048, 1066, 1069, 1070, 1076, 1078, 1083, 1084, 1085, 1086, 1096, 1101, 1102, 1104, 1106, 1107, 1108, 1110, 1122, 1123, 1125, 1126, 1129, 1131, 1132, 1135, 1136, 1137, 1139, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1170, 1175, 1178, 1187, 1192, 1194, 1198, 1199, 1200, 1204, 1206, 1207, 1215, 1218, 1219, 1224, 1231, 1232, 1238, 1245, 1250, 1260, 1272, 1275, 1287, 1290], "int16": [1, 50, 274, 312, 385, 386, 418, 680, 777, 893, 963, 964, 999, 1231, 1238, 1260], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 204, 217, 244, 269, 312, 347, 348, 350, 373, 398, 408, 409, 410, 411, 416, 438, 443, 593, 684, 752, 777, 816, 838, 887, 893, 918, 921, 922, 924, 975, 985, 989, 990, 991, 997, 1019, 1027, 1114, 1243, 1244, 1260], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 179, 188, 197, 204, 236, 244, 249, 250, 264, 271, 312, 342, 343, 345, 346, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 385, 386, 427, 428, 429, 430, 431, 432, 433, 437, 443, 446, 534, 535, 558, 560, 562, 577, 585, 593, 644, 669, 680, 684, 700, 725, 733, 734, 737, 752, 759, 773, 777, 800, 807, 816, 833, 838, 839, 840, 887, 893, 916, 917, 919, 920, 925, 926, 927, 928, 929, 930, 931, 932, 933, 936, 937, 963, 964, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1027, 1116, 1141, 1219, 1231, 1241, 1242, 1243, 1244, 1260], "int64arrai": [1235, 1260], "int8": [1, 50, 76, 197, 312, 360, 361, 385, 386, 403, 406, 412, 413, 419, 422, 435, 436, 525, 680, 749, 752, 768, 777, 892, 934, 935, 963, 964, 968, 980, 983, 993, 994, 1000, 1003, 1016, 1017, 1107, 1146, 1231, 1241, 1248, 1260], "int_rang": [204, 280, 289, 298, 312, 700, 736, 816, 825, 863, 871, 887], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 187, 204, 244, 267, 270, 312, 325, 376, 422, 455, 456, 572, 578, 580, 585, 592, 593, 605, 642, 665, 669, 694, 700, 729, 733, 734, 752, 777, 806, 816, 838, 887, 893, 951, 1003, 1038, 1135, 1137, 1141, 1148, 1155, 1162, 1192, 1215, 1219, 1241, 1260, 1281, 1287, 1290], "integer_list": 72, "integr": [36, 274, 312, 1290], "intend": [1, 152, 153, 154, 155, 674, 1224], "intens": [222, 298, 312, 573, 777, 1116, 1260], "interact": [159, 163, 183, 312, 315, 803, 887, 1260, 1265], "interchang": [117, 172], "interest": [130, 423, 426, 1004, 1007], "interfac": [0, 106, 107, 171, 789, 896, 1287], "interleav": 1282, "intermedi": [210, 312, 819, 887, 1290], "intern": [37, 38, 131, 150, 216, 264, 312, 456, 777, 1235, 1260, 1270], "interoper": [170, 895], "interpol": [183, 239, 304, 312, 451, 471, 538, 581, 603, 604, 750, 777, 803, 835, 877, 887, 967, 1051, 1138, 1154, 1260], "interpolate_bi": [777, 1260], "interpolationmethod": [470, 777, 1050, 1260], "interpret": [120, 122, 129, 130, 143, 312, 887], "intersect": [36, 312, 516, 893, 1098, 1286], "interv": [204, 244, 282, 312, 388, 421, 434, 467, 472, 580, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 838, 887, 966, 980, 982, 983, 989, 991, 993, 994, 997, 999, 1000, 1002, 1006, 1015, 1016, 1048, 1052, 1137, 1260], "intoexpr": [175, 203, 204, 244, 250, 251, 255, 258, 275, 286, 287, 291, 312, 327, 345, 365, 368, 370, 372, 395, 443, 449, 459, 467, 471, 472, 495, 515, 516, 517, 518, 573, 587, 588, 596, 598, 600, 602, 604, 607, 609, 611, 615, 617, 626, 631, 640, 652, 655, 656, 657, 662, 663, 678, 686, 696, 698, 703, 706, 707, 708, 709, 711, 713, 716, 720, 727, 741, 743, 746, 752, 755, 759, 761, 777, 793, 815, 816, 838, 840, 841, 844, 847, 852, 859, 860, 864, 887, 891, 919, 938, 941, 943, 972, 1027, 1033, 1051, 1052, 1077, 1143, 1144, 1163, 1167, 1205, 1206, 1207, 1212, 1213, 1260], "intoexprcolumn": [195, 312, 344, 348, 349, 356, 371, 372, 377, 421, 449, 452, 494, 502, 505, 514, 519, 574, 578, 614, 617, 637, 642, 645, 654, 659, 660, 661, 665, 669, 674, 685, 686, 700, 705, 718, 719, 721, 722, 733, 734, 764, 765, 767, 777, 812, 844, 887, 918, 922, 923, 930, 954, 1002, 1015, 1033, 1076, 1084, 1087, 1096, 1101, 1132, 1187, 1192, 1195, 1204, 1209, 1210, 1211, 1215, 1224, 1260], "introduc": [46, 85, 664, 666, 667, 1214, 1216, 1217], "introduct": 1286, "intuit": [456, 777, 893], "invalid": [33, 42, 107, 129, 130, 143, 312, 373, 644, 645, 669, 687, 777, 887, 939, 945, 1194, 1195, 1219, 1260], "invalid_valu": 939, "invalidoperationerror": [588, 777, 1144, 1260, 1285], "invari": [825, 887], "invers": [329, 330, 331, 332, 333, 334, 777, 903, 904, 905, 906, 907, 908, 1241, 1260, 1284], "invert": 893, "invok": [534, 777], "involv": [195, 312, 812, 887], "io": [31, 33, 36, 37, 38, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 184, 252, 312, 390, 458, 547, 777, 804, 842, 887], "iobas": [39, 40, 138, 139, 184, 252, 312, 390, 547, 550, 777, 804, 842, 887], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 312, 789, 887], "ipccompress": [37, 38, 312], "is_between": [777, 1260], "is_dupl": [312, 777, 1260], "is_elementwis": [534, 777, 891], "is_empti": [312, 1260], "is_finit": [777, 1260], "is_first_distinct": [777, 1260], "is_in": [93, 195, 312, 777, 1260], "is_infinit": [777, 1260], "is_last_distinct": [777, 1260], "is_nan": [777, 1260], "is_not_nan": [777, 1260], "is_not_nul": [777, 1260], "is_nul": [187, 312, 777, 806, 887, 1260], "is_numer": 1290, "is_odd": [250, 312, 840, 887, 893], "is_selector": 893, "is_sort": 1260, "is_uniqu": [312, 777, 1260], "isn": 767, "iso": [408, 435, 436, 985, 1016, 1017, 1282], "iso8601": [129, 130, 143], "iso_lang": 1282, "iso_year": 438, "isodow": 1283, "isoweek": 1283, "isoyear": 1283, "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 143, 312, 385, 386, 680, 777, 963, 964, 1231, 1260, 1287], "ital": [36, 312], "item": [13, 55, 130, 202, 245, 248, 312, 344, 348, 349, 391, 448, 494, 496, 503, 505, 514, 614, 657, 777, 918, 922, 923, 968, 1031, 1076, 1078, 1085, 1087, 1096, 1161, 1207, 1260], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 175, 185, 195, 203, 204, 215, 216, 217, 244, 245, 246, 247, 250, 251, 258, 275, 276, 286, 287, 290, 291, 312, 372, 387, 395, 452, 573, 626, 678, 686, 696, 698, 703, 705, 706, 707, 708, 716, 741, 743, 746, 755, 759, 761, 767, 773, 777, 793, 805, 812, 815, 816, 838, 840, 841, 847, 852, 859, 860, 864, 887, 891, 892, 965, 972, 1162, 1260, 1290], "iter_batch": 131, "iter_column": 312, "iter_row": [217, 245, 246, 247, 312], "iter_slic": 312, "its": [123, 151, 190, 270, 312, 399, 421, 434, 443, 534, 591, 626, 767, 777, 801, 807, 858, 887, 948, 976, 1002, 1015, 1025, 1027, 1147, 1241, 1260, 1289], "itself": [157, 312, 315, 316, 535, 595, 597, 599, 601, 603, 605, 606, 608, 610, 753, 754, 777, 823, 887, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1260, 1265, 1269, 1270, 1287], "ix": [237, 312], "j": [276, 312], "jax": [269, 312, 1239, 1260], "jax_enable_x64": [269, 312], "jaxexporttyp": [269, 312], "jjk": 893, "jkl": [638, 1188], "jklmn": 1282, "job": [794, 887], "join": [46, 47, 53, 54, 55, 85, 195, 219, 281, 312, 452, 470, 573, 629, 756, 777, 798, 799, 808, 812, 821, 834, 845, 856, 861, 887, 1179, 1270, 1272, 1278, 1286, 1287], "join_asof": [218, 312, 820, 887], "join_nul": [218, 312, 820, 887], "joinstrategi": [47, 218, 312, 820, 887], "joinvalid": [218, 312, 820, 887], "jpy": 1290, "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 184, 252, 312, 390, 458, 547, 550, 644, 645, 676, 777, 789, 804, 842, 887, 891, 1194, 1195, 1227], "json_path": [645, 1195], "json_path_match": [644, 1194], "json_stat": 5, "json_str": [138, 139], "json_val": [645, 1195], "jsonpath": [644, 645, 1194, 1195], "jst": [123, 893], "jul": [664, 1214, 1282], "juli": [1282, 1283], "just": [36, 121, 131, 143, 228, 279, 312, 829, 855, 887, 893], "k": [175, 247, 275, 276, 312, 371, 372, 382, 484, 685, 686, 777, 793, 852, 887, 944, 960, 1067, 1245, 1260], "k_2": [623, 777, 1174, 1260], "k_3": [623, 777, 1174, 1260], "kanji": 893, "karen": [237, 312], "kathmandu": [978, 979, 1005], "kb": [190, 312, 369, 942, 1025, 1260], "kde": [1260, 1265], "keep": [47, 129, 130, 139, 143, 146, 147, 195, 277, 281, 282, 312, 458, 534, 549, 557, 587, 706, 777, 812, 853, 856, 887, 1143, 1260], "kei": [36, 41, 45, 47, 52, 55, 139, 141, 143, 145, 146, 147, 148, 173, 204, 216, 218, 219, 229, 235, 237, 241, 243, 246, 247, 281, 312, 452, 535, 587, 588, 652, 718, 721, 759, 777, 816, 820, 821, 830, 836, 837, 856, 887, 893, 897, 1143, 1144, 1202, 1260, 1276], "kept": [277, 312, 853, 887], "keyerror": 16, "keystrok": 773, "keyword": [35, 133, 141, 144, 159, 163, 181, 203, 236, 245, 250, 251, 271, 286, 287, 291, 312, 452, 577, 678, 755, 759, 767, 777, 815, 833, 840, 841, 859, 860, 864, 887, 1242, 1260, 1273], "kleen": [324, 326, 695, 696, 697, 698, 777, 900, 901, 1260], "klmnoopqrstuvwxyz": [217, 312], "knight": 1269, "know": [47, 131, 237, 279, 312, 526, 534, 777, 855, 887], "known": [135, 361, 526, 871, 935, 1108], "kurtosi": [777, 1260], "kuzu_db_conn": 131, "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 181, 195, 236, 271, 312, 315, 577, 777, 812, 833, 887, 891, 1242, 1260, 1265, 1273, 1287], "k\u00f9zudb": 131, "l1": 55, "l2": 55, "label": [204, 269, 274, 312, 316, 388, 580, 594, 595, 597, 599, 601, 603, 606, 608, 610, 777, 816, 834, 887, 966, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1260], "label_column": [274, 312], "lag": [255, 312, 356, 519, 617, 707, 777, 844, 887, 930, 1101, 1167, 1260], "lake": [35, 133, 144, 312, 789], "lambda": [143, 197, 222, 236, 237, 241, 298, 312, 361, 442, 443, 444, 445, 526, 534, 535, 557, 558, 713, 714, 727, 738, 739, 751, 777, 825, 833, 836, 871, 887, 935, 1026, 1027, 1028, 1029, 1108, 1116, 1260], "land": [395, 972], "languag": [143, 204, 219, 244, 282, 312, 417, 421, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015, 1027, 1260], "larg": [10, 11, 14, 47, 131, 134, 140, 148], "large_str": [217, 264, 271, 312], "larger": [10, 42, 43, 44, 45, 53, 54, 456, 709, 777, 798, 799, 887], "largest": [175, 275, 312, 372, 685, 686, 777, 793, 852, 887, 1245, 1260], "last": [35, 139, 143, 146, 147, 152, 153, 154, 155, 206, 219, 221, 237, 247, 258, 263, 270, 277, 306, 312, 337, 348, 357, 387, 403, 414, 418, 435, 478, 503, 521, 524, 526, 556, 557, 559, 561, 563, 564, 588, 625, 626, 642, 657, 665, 681, 703, 762, 773, 777, 821, 847, 851, 853, 879, 887, 893, 911, 922, 931, 965, 980, 995, 999, 1016, 1047, 1059, 1070, 1085, 1103, 1106, 1144, 1176, 1192, 1207, 1215, 1232, 1241, 1260, 1280, 1282], "last_column": [36, 312], "later": [219, 252, 312, 547, 821, 842, 887], "latest": [117, 133, 144, 172, 420, 457, 545, 664, 667, 720, 777, 1001, 1214, 1217], "latt": 893, "latter": [36, 192, 312, 1032, 1260], "lazi": [1, 55, 143, 159, 219, 236, 237, 259, 312, 535, 729, 749, 752, 768, 777, 803, 820, 821, 861, 864, 865, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 887, 893, 1269, 1270, 1271, 1272, 1273, 1275, 1287, 1290], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 799, 887], "lazy_fram": [53, 54], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 179, 184, 220, 236, 237, 252, 259, 312, 390, 452, 526, 547, 756, 777, 789, 885, 886, 893, 1269, 1270, 1273, 1275, 1287, 1288, 1290], "lazygroupbi": [815, 816, 838, 887], "lbl": [269, 274, 312], "ldf": [1, 864, 865, 867, 869, 872, 873, 874, 875, 876, 877, 878], "ldot": [443, 777, 1027, 1260], "le": [635, 777, 1260], "lead": [14, 41, 123, 149, 226, 253, 255, 262, 312, 356, 459, 462, 519, 534, 535, 616, 617, 659, 661, 709, 777, 825, 843, 844, 871, 887, 930, 1101, 1116, 1165, 1167, 1209, 1211, 1260], "leap": [407, 417, 984, 998], "leap_year": 407, "learn": [274, 312], "least": [97, 237, 312, 574, 637, 639, 777, 1132, 1187, 1189, 1260, 1280], "leav": [6, 228, 279, 312, 526, 829, 855, 887], "left": [15, 16, 36, 47, 152, 153, 154, 155, 204, 218, 219, 244, 281, 312, 388, 442, 444, 445, 470, 472, 580, 593, 596, 598, 600, 602, 604, 607, 609, 611, 615, 684, 706, 713, 714, 718, 719, 721, 722, 727, 751, 764, 765, 767, 777, 816, 820, 821, 838, 856, 887, 966, 1026, 1028, 1029, 1052, 1137, 1163, 1243, 1260, 1272, 1276, 1280], "left_clos": [388, 580, 777, 966, 1137, 1260], "left_on": [218, 219, 281, 312, 820, 821, 856, 887], "leftmost": [615, 777, 1163, 1260, 1282], "len": [12, 36, 159, 163, 179, 217, 237, 289, 293, 298, 312, 381, 535, 544, 546, 591, 710, 733, 777, 800, 858, 863, 866, 871, 887, 892, 959, 1147, 1260], "len_byt": [12, 647, 1197], "len_char": [646, 1196], "length": [55, 56, 72, 134, 140, 143, 157, 161, 202, 204, 244, 257, 312, 315, 387, 421, 434, 520, 526, 545, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 624, 642, 646, 647, 648, 649, 652, 654, 665, 674, 749, 752, 753, 754, 768, 777, 816, 834, 838, 846, 887, 891, 952, 965, 976, 1002, 1015, 1102, 1108, 1129, 1143, 1144, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1175, 1192, 1196, 1197, 1198, 1199, 1202, 1204, 1215, 1224, 1260, 1278, 1280], "leq": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "less": [143, 219, 312, 456, 486, 533, 534, 657, 777, 821, 887, 1207, 1290], "letter": [191, 295, 306, 312, 446, 631, 638, 640, 652, 672, 725, 777, 809, 868, 879, 887, 893, 1181, 1188, 1190, 1202, 1222, 1282], "level": [10, 36, 37, 38, 41, 45, 126, 143, 146, 147, 148, 197, 222, 233, 259, 264, 312, 316, 452, 777, 789, 817, 824, 848, 887, 1235, 1260, 1287], "lexic": [59, 893, 949], "lf": [42, 43, 44, 45, 50, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 866, 870, 887, 1277, 1287, 1290], "lf1": [756, 848, 887, 1273, 1275, 1288], "lf2": [756, 848, 887, 1273, 1275, 1288], "lf3": [887, 1273], "lf4": [887, 1273], "lf5": 887, "lf6": 887, "lf_other": [861, 887], "lib": [777, 1235, 1260], "librari": [1, 99, 131, 134, 534, 777, 891, 1290], "life": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "lifetim": [168, 788, 1275], "light": [36, 312], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 184, 204, 211, 213, 218, 247, 252, 269, 270, 312, 315, 390, 396, 458, 498, 534, 549, 583, 637, 660, 661, 691, 773, 777, 794, 799, 804, 816, 887, 891, 973, 1080, 1139, 1187, 1249, 1260, 1265], "limit": [10, 11, 45, 131, 132, 165, 194, 312, 364, 451, 457, 777, 811, 817, 887, 1035, 1260, 1278, 1286], "line": [10, 20, 36, 129, 130, 134, 143, 202, 211, 213, 312, 315, 637, 1187, 1260, 1265], "line_termin": [33, 42, 312, 887], "linear": [183, 210, 239, 304, 312, 470, 471, 493, 538, 581, 603, 604, 707, 708, 750, 777, 803, 819, 835, 877, 887, 967, 1050, 1051, 1075, 1138, 1154, 1260], "lineitem": [125, 130, 132], "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 180, 185, 188, 190, 191, 195, 201, 203, 204, 208, 216, 232, 235, 244, 245, 246, 247, 250, 258, 265, 266, 274, 276, 277, 278, 280, 286, 291, 292, 312, 322, 349, 360, 361, 362, 388, 395, 448, 454, 459, 468, 476, 534, 535, 545, 546, 573, 580, 586, 589, 594, 595, 597, 599, 601, 603, 606, 608, 610, 625, 626, 636, 638, 640, 655, 675, 677, 684, 703, 705, 707, 718, 719, 721, 722, 724, 732, 734, 737, 739, 757, 759, 765, 773, 777, 801, 807, 809, 812, 815, 816, 840, 847, 853, 854, 859, 861, 864, 865, 887, 892, 893, 923, 934, 935, 936, 952, 966, 972, 1025, 1031, 1036, 1039, 1042, 1048, 1049, 1057, 1116, 1137, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1181, 1186, 1188, 1190, 1202, 1205, 1240, 1243, 1260, 1269, 1274, 1278, 1279, 1289, 1290], "list_of_seri": 739, "lit": [1, 323, 365, 472, 556, 641, 707, 713, 727, 749, 752, 768, 777, 1035, 1260], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 250, 251, 255, 281, 286, 287, 312, 323, 365, 377, 399, 440, 441, 449, 456, 461, 463, 472, 486, 533, 552, 554, 567, 568, 578, 587, 588, 630, 631, 632, 640, 641, 650, 651, 652, 678, 679, 687, 696, 698, 700, 706, 707, 708, 716, 717, 720, 733, 737, 741, 743, 746, 755, 759, 761, 763, 777, 811, 840, 841, 844, 856, 859, 860, 887, 893, 938, 954, 976, 1023, 1033, 1052, 1128, 1143, 1144, 1162, 1164, 1167, 1180, 1181, 1182, 1190, 1191, 1200, 1201, 1202, 1260, 1282], "littl": [246, 312], "lmn": 893, "ln": [442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260, 1280], "ln_a": 1281, "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 312, 777, 789, 817, 824, 887, 891, 1290], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 134, "load_workbook": 134, "loader": [274, 312], "lobster": [641, 1191], "loc": [312, 316], "local": [4, 35, 131, 133, 144, 145, 148, 312, 434, 575, 576, 777, 947, 948, 978, 979, 1002, 1005, 1015, 1133, 1134, 1260, 1270], "localhost": 131, "localis": [421, 434, 1015], "locat": [36, 141, 143, 146, 148, 192, 242, 272, 278, 312, 615, 777, 854, 887, 1032, 1039, 1162, 1163, 1260], "lock": 165, "log": [29, 49, 372, 439, 531, 554, 578, 686, 777, 1021, 1260, 1280], "log10": [777, 1260, 1280], "log10_a": 1281, "log16_a": 1281, "log1p": [777, 1260, 1280], "log1p_a": 1281, "log2": 1280, "logarithm": [529, 530, 531, 777, 1111, 1112, 1113, 1260, 1281], "logic": [55, 222, 298, 312, 315, 316, 324, 326, 390, 535, 684, 695, 696, 697, 698, 739, 777, 804, 808, 820, 842, 871, 887, 900, 901, 1116, 1241, 1243, 1260, 1265], "london": [400, 404, 420, 977, 981, 1001], "london_timezon": [420, 1001], "london_to_amsterdam": [420, 1001], "long": [191, 228, 237, 279, 280, 312, 809, 829, 855, 887], "longer": [129, 130, 143], "longest": 526, "look": [10, 204, 312, 365, 526, 816, 887, 938], "lookup": 773, "loop": [535, 777], "lose": [397, 974], "lossi": [129, 130, 143], "love": [631, 652, 1181, 1202], "low": [17, 131, 580, 777, 1137, 1260], "low_memori": [129, 130, 139, 141, 143, 147, 148], "lower": [143, 183, 204, 239, 304, 312, 377, 472, 532, 557, 581, 585, 603, 604, 700, 718, 719, 721, 722, 750, 764, 765, 777, 803, 816, 835, 877, 887, 954, 967, 1052, 1114, 1138, 1141, 1154, 1248, 1260, 1278, 1280], "lower_bound": [204, 312, 377, 472, 777, 816, 887, 954, 1052, 1248, 1260], "lowercas": [563, 670, 672, 1220, 1222, 1282], "lowest": [532, 777], "lru_cach": [222, 312, 535, 777, 1116, 1260], "lst": 158, "lt": [452, 693, 777, 1260], "ltrim": 1280, "lyric": [631, 652, 1181, 1202], "lz4": [37, 38, 41, 43, 45, 312, 887], "lzo": [41, 45, 312, 887], "m": [62, 64, 218, 312, 396, 397, 399, 404, 405, 423, 425, 426, 437, 637, 664, 666, 667, 671, 720, 721, 722, 723, 729, 820, 887, 892, 893, 973, 974, 976, 981, 982, 1004, 1006, 1007, 1018, 1187, 1214, 1216, 1217, 1221, 1273, 1282, 1283], "m_2": [623, 777, 1174, 1260], "m_3": [623, 777, 1174, 1260], "m_i": [623, 777, 1174, 1260], "machin": 1290, "maco": 151, "made": [36, 131, 312], "mai": [1, 35, 41, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 183, 184, 190, 192, 204, 219, 222, 244, 252, 259, 269, 271, 274, 280, 281, 282, 312, 315, 316, 387, 388, 390, 395, 396, 397, 408, 417, 421, 423, 426, 434, 446, 467, 501, 526, 534, 535, 544, 547, 580, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 640, 644, 646, 705, 713, 714, 718, 719, 721, 722, 727, 751, 753, 754, 764, 765, 777, 798, 799, 803, 804, 808, 816, 821, 825, 838, 842, 848, 856, 862, 863, 871, 887, 948, 949, 965, 966, 967, 972, 973, 974, 985, 998, 1002, 1004, 1007, 1015, 1025, 1032, 1048, 1083, 1116, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1190, 1194, 1196, 1239, 1242, 1244, 1260, 1265, 1290], "main": [151, 799, 887], "maintain": [42, 43, 44, 45, 258, 312, 362, 527, 615, 626, 688, 703, 777, 803, 847, 887, 936, 1109, 1163, 1246, 1260], "maintain_ord": [42, 43, 44, 45, 203, 235, 237, 258, 277, 282, 292, 294, 296, 299, 300, 301, 302, 303, 304, 305, 312, 322, 362, 372, 459, 462, 527, 535, 626, 686, 688, 703, 777, 799, 808, 815, 834, 845, 847, 853, 865, 867, 869, 872, 873, 874, 875, 876, 877, 878, 887, 936, 1109, 1246, 1260], "major": [134, 269, 312], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 229, 233, 240, 270, 282, 312, 444, 445, 467, 563, 564, 573, 586, 656, 777, 830, 887, 891, 1028, 1029, 1048, 1206, 1241, 1260], "man": [653, 1203], "manag": [46, 84, 85, 788, 789, 1275, 1287], "mandatori": [36, 312], "mango": [635, 658, 1185, 1208], "mani": [131, 132, 148, 192, 312, 640, 652, 1032, 1190, 1202, 1260, 1264], "manner": 131, "many_to_mani": [218, 312, 820, 887], "many_to_on": [218, 312, 820, 887], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 176, 179, 196, 216, 222, 241, 245, 246, 247, 249, 265, 312, 323, 421, 434, 534, 535, 556, 558, 559, 561, 563, 564, 587, 588, 652, 691, 738, 777, 795, 836, 839, 887, 892, 893, 967, 1002, 1015, 1116, 1143, 1144, 1202, 1249, 1260, 1270, 1272, 1273, 1287], "map_": 103, "map_batch": [777, 887], "map_el": [94, 222, 312, 534, 694, 777, 1260], "map_field": [560, 562], "map_row": 312, "mapelementsstrategi": [535, 777], "mapping_strategi": [573, 777], "march": [423, 426, 1004, 1007], "mariadb": 132, "mark": [126, 373, 777, 945, 1260], "mark_area": [1260, 1265], "mark_attr": [312, 315, 1260, 1265], "mark_bar": [312, 315, 1260, 1265], "mark_lin": [312, 315], "mark_point": [312, 315], "markdown": 20, "marker": [36, 312], "mask": [148, 211, 213, 312, 366, 473, 475, 478, 483, 575, 576, 630, 633, 641, 777, 939, 1036, 1052, 1053, 1056, 1059, 1065, 1133, 1134, 1164, 1180, 1183, 1191, 1251, 1260], "mass": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "massag": [228, 279, 312, 829, 855, 887], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 131, 138, 139, 147, 152, 153, 154, 155, 176, 194, 218, 219, 245, 281, 312, 541, 542, 587, 588, 605, 630, 631, 632, 635, 637, 638, 640, 641, 644, 645, 650, 651, 652, 658, 664, 666, 667, 767, 773, 777, 795, 811, 820, 821, 856, 887, 893, 1024, 1143, 1144, 1155, 1180, 1181, 1182, 1185, 1187, 1188, 1190, 1191, 1194, 1195, 1200, 1201, 1202, 1208, 1214, 1216, 1217, 1260, 1282], "matches_overlap": 640, "matches_supertyp": [194, 312, 811, 887], "materi": [222, 247, 298, 312, 798, 834, 871, 881, 887, 893, 1116, 1260], "materialis": [216, 217, 245, 246, 312], "math": [1, 10, 51, 237, 312, 389, 777, 956, 958, 1172, 1233, 1260, 1280, 1284, 1286], "mathemat": [687, 724, 777, 1280], "mathshortcut": [1, 51], "matplotlib": [151, 834, 845, 887], "matter": [204, 216, 244, 246, 247, 266, 312, 593, 660, 661, 777, 816, 838, 887], "max": [25, 36, 41, 45, 126, 183, 194, 203, 224, 237, 244, 312, 316, 383, 451, 526, 534, 573, 583, 587, 588, 593, 595, 596, 616, 657, 718, 721, 741, 757, 777, 803, 811, 815, 838, 887, 961, 967, 1035, 1108, 1139, 1150, 1165, 1207, 1260, 1269, 1278, 1280], "max_a": [244, 312, 593, 777, 838, 887], "max_binary_s": 131, "max_col": [157, 159], "max_colname_length": [202, 312], "max_color": [36, 312], "max_data_s": 163, "max_elem": 1278, "max_horizont": [312, 740], "max_items_per_column": [202, 312], "max_level": 126, "max_siz": [158, 159, 161, 163, 1290], "max_text_s": 131, "max_valu": 1290, "max_width": [526, 1108], "maxim": [299, 335, 777, 872, 909, 1260], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 149, 157, 158, 159, 161, 163, 202, 204, 223, 224, 312, 342, 491, 536, 565, 575, 583, 642, 644, 647, 654, 665, 740, 741, 777, 816, 826, 887, 916, 986, 1073, 1117, 1125, 1133, 1139, 1192, 1194, 1197, 1204, 1215, 1260, 1277], "mb": [190, 312, 369, 1025, 1260], "me": [631, 652, 672, 1181, 1202, 1222], "mean": [41, 45, 129, 130, 135, 141, 143, 146, 183, 194, 203, 204, 219, 226, 237, 244, 282, 291, 312, 417, 421, 434, 448, 451, 456, 593, 596, 597, 598, 600, 602, 604, 607, 609, 611, 623, 629, 637, 643, 718, 719, 721, 722, 723, 743, 764, 765, 767, 777, 803, 811, 815, 816, 821, 825, 838, 864, 887, 967, 998, 1002, 1015, 1031, 1035, 1151, 1174, 1179, 1187, 1193, 1260, 1277, 1278], "mean_horizont": [312, 742], "measur": [228, 279, 312, 316, 829, 855, 887], "measure_a": [312, 316], "measure_b": [312, 316], "median": [183, 237, 312, 451, 599, 600, 777, 803, 861, 887, 967, 1152, 1260, 1280], "mediat": 1287, "medium": [36, 312], "megan": [229, 312, 830, 887], "melt": [279, 312, 855, 887], "member": [204, 312, 816, 887, 1057, 1260], "membership": [344, 494, 918, 1076], "memori": [14, 41, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 139, 141, 143, 146, 147, 148, 172, 192, 222, 246, 247, 256, 270, 298, 312, 573, 584, 618, 777, 798, 799, 887, 1032, 1116, 1140, 1168, 1169, 1241, 1260], "memory_map": [135, 141, 146], "merg": [35, 218, 219, 229, 312, 820, 821, 830, 887], "merge_sort": [312, 887], "messi": [637, 639, 1187, 1189], "met": 767, "meta": [390, 777], "metadata": [0, 145, 789], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 170, 179, 183, 184, 187, 192, 199, 203, 210, 216, 222, 233, 239, 245, 246, 247, 255, 277, 286, 293, 298, 304, 312, 321, 324, 325, 356, 377, 390, 423, 426, 440, 441, 449, 456, 458, 461, 463, 470, 486, 519, 533, 535, 550, 552, 554, 556, 557, 559, 561, 563, 564, 567, 568, 569, 572, 578, 581, 583, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 617, 631, 640, 652, 660, 661, 662, 663, 668, 674, 679, 687, 689, 694, 709, 739, 750, 769, 770, 772, 773, 777, 778, 779, 782, 783, 784, 785, 786, 789, 799, 803, 804, 806, 819, 835, 844, 853, 859, 866, 871, 877, 887, 892, 895, 902, 930, 954, 967, 1004, 1007, 1022, 1023, 1032, 1033, 1041, 1043, 1050, 1068, 1101, 1115, 1116, 1127, 1128, 1138, 1139, 1154, 1167, 1181, 1190, 1202, 1218, 1224, 1243, 1252, 1254, 1256, 1260, 1261, 1264, 1266, 1267, 1268, 1270, 1274], "metric": 131, "micro": [422, 1003], "microsecond": [62, 64, 204, 216, 219, 244, 246, 247, 266, 282, 312, 417, 421, 429, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 720, 721, 722, 723, 763, 764, 765, 777, 816, 821, 834, 838, 887, 893, 998, 1002, 1010, 1015, 1027, 1260, 1283], "microsoft": [36, 312], "mid_color": [36, 312], "midnight": 77, "midpoint": [183, 239, 304, 312, 581, 603, 604, 750, 777, 803, 835, 877, 887, 967, 1138, 1154, 1260], "might": [129, 130, 143, 165, 237, 270, 279, 312, 535, 689, 777, 847, 855, 887], "millennia": 1283, "millennium": 1283, "milli": [422, 1003], "millisecond": [204, 219, 244, 282, 312, 406, 412, 417, 421, 430, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 893, 998, 1002, 1011, 1015, 1027, 1260, 1283], "milliseconds_diff": [429, 430, 432], "mimic": 707, "min": [36, 41, 45, 183, 194, 231, 237, 244, 312, 384, 451, 535, 573, 583, 593, 601, 602, 718, 721, 746, 755, 777, 803, 811, 838, 887, 891, 962, 967, 1035, 1139, 1153, 1260, 1278, 1280, 1283, 1290], "min_a": [244, 312, 593, 777, 838, 887], "min_col": [157, 159], "min_color": [36, 312], "min_elem": 1278, "min_horizont": [312, 745, 755], "min_period": [387, 442, 444, 445, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 753, 754, 777, 965, 1026, 1028, 1029, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1260], "min_siz": [158, 159, 161, 163, 1290], "min_valu": 1290, "mincol": 157, "minim": [302, 336, 343, 492, 618, 626, 777, 875, 910, 917, 1074, 1120, 1168, 1260], "minimum": [41, 45, 157, 158, 159, 161, 163, 197, 230, 231, 312, 442, 444, 445, 551, 566, 576, 583, 745, 746, 777, 831, 887, 992, 1026, 1028, 1029, 1126, 1134, 1139, 1260, 1277, 1290], "minu": [417, 569, 777, 998], "minut": [204, 219, 244, 282, 312, 406, 409, 411, 416, 417, 421, 422, 431, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 720, 721, 722, 723, 763, 764, 765, 777, 816, 821, 838, 887, 893, 998, 1002, 1012, 1015, 1027, 1260, 1283], "minutes_diff": 431, "misc": 1275, "miscellan": 789, "mismatch": [55, 108, 139, 147, 152, 154], "miss": [55, 129, 130, 143, 193, 199, 312, 364, 442, 444, 445, 450, 457, 479, 480, 526, 777, 810, 887, 1026, 1028, 1029, 1034, 1260], "missing_utf8_is_empty_str": [129, 130, 143], "mix": [11, 219, 270, 312, 756, 821, 848, 887, 893, 967, 1260], "mixin": 1, "mlnm": 410, "mm": [36, 312], "mn": 1282, "mno": [16, 20], "mnop": 1282, "mo": 723, "mocha": 893, "mod": [777, 1280], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 237, 259, 312, 638, 749, 752, 768, 777, 798, 799, 808, 887, 1188, 1260, 1269, 1270, 1287], "model": [274, 312], "modifi": [129, 130, 143, 165, 168, 192, 208, 215, 216, 284, 312, 338, 420, 437, 630, 637, 638, 641, 650, 651, 670, 672, 673, 777, 902, 1001, 1018, 1032, 1180, 1187, 1188, 1191, 1200, 1201, 1220, 1222, 1223, 1260], "modul": [87, 95, 134, 776, 893, 1290], "modulu": [552, 777], "moment": [41, 181, 312, 484, 623, 777, 1067, 1174, 1260], "mon": [312, 315, 1283], "mondai": [204, 312, 395, 434, 436, 705, 816, 887, 972, 1015, 1017], "monkei": [648, 649, 1198, 1199], "month": [204, 219, 244, 282, 312, 403, 414, 415, 417, 421, 423, 426, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 717, 718, 719, 720, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 980, 995, 996, 998, 1002, 1004, 1007, 1015, 1027, 1260, 1283], "month_nam": [423, 426], "monthbegin": [415, 996], "monthend": [414, 995], "moos": 893, "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 147, 152, 154, 159, 168, 170, 181, 183, 195, 215, 216, 222, 228, 233, 245, 246, 248, 259, 269, 270, 274, 277, 279, 298, 312, 316, 325, 362, 452, 456, 464, 484, 514, 527, 531, 534, 535, 572, 614, 623, 638, 646, 664, 666, 667, 688, 699, 710, 726, 732, 735, 742, 744, 747, 748, 757, 767, 773, 777, 803, 812, 829, 848, 853, 855, 887, 891, 893, 895, 936, 948, 967, 1044, 1045, 1067, 1096, 1109, 1116, 1161, 1174, 1188, 1196, 1214, 1216, 1217, 1239, 1241, 1246, 1260, 1275, 1276, 1285, 1288, 1289, 1290], "more_bi": [235, 258, 312, 626, 777, 847, 887], "more_column": [191, 278, 312, 446, 725, 777, 809, 854, 887, 893], "more_expr": [573, 703, 706, 707, 708, 777], "more_nam": [675, 773], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 270, 312, 545, 553, 574, 588, 657, 777, 1121, 1132, 1144, 1207, 1241, 1260, 1272, 1287], "mostli": [264, 312, 452, 777], "move": [18, 237, 247, 312, 395, 442, 443, 444, 445, 595, 597, 601, 608, 777, 972, 1026, 1027, 1028, 1029, 1150, 1151, 1153, 1157, 1260], "mssql": [34, 312], "much": [222, 280, 298, 312, 387, 501, 535, 646, 647, 739, 777, 871, 965, 1083, 1116, 1196, 1197, 1260], "mul": 777, "multi": [8, 36, 129, 130, 274, 312, 446, 637, 777, 1187], "multi_fram": [36, 312], "multicolselector": 173, "multiindexselector": [173, 897], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 185, 190, 192, 195, 203, 204, 208, 217, 235, 237, 247, 250, 253, 258, 281, 286, 291, 312, 372, 501, 534, 540, 545, 553, 554, 573, 587, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 626, 675, 686, 703, 710, 727, 738, 740, 745, 751, 757, 760, 767, 773, 777, 798, 799, 805, 812, 815, 816, 840, 843, 847, 856, 859, 864, 871, 887, 902, 931, 1025, 1032, 1083, 1103, 1121, 1143, 1145, 1176, 1260, 1273, 1278], "multipli": [534, 594, 595, 597, 599, 601, 603, 606, 608, 610, 678, 777, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1260], "multithread": [258, 312, 626, 703, 777, 847, 887, 931, 1103, 1176, 1260], "must": [36, 65, 117, 118, 133, 144, 145, 149, 183, 191, 204, 219, 229, 237, 244, 245, 312, 388, 526, 535, 580, 587, 588, 593, 596, 598, 600, 602, 604, 607, 609, 611, 652, 718, 719, 767, 777, 803, 809, 816, 821, 825, 830, 838, 845, 887, 891, 966, 967, 1137, 1143, 1144, 1202, 1260], "mutual": [245, 312], "my": [145, 149], "my_column": 871, "my_column_": [276, 312], "my_column_0": [276, 312], "my_column_1": [276, 312], "my_column_2": [276, 312], "my_custom_aggreg": 739, "my_fil": 135, "my_holidai": [395, 705, 972], "my_larger_than_ram_fil": [42, 43, 44, 45, 887], "my_long_fil": 143, "my_struct": 759, "mydf": 143, "myrol": 132, "mysql": 132, "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 177, 192, 198, 204, 206, 216, 217, 221, 222, 246, 247, 248, 255, 260, 263, 266, 268, 283, 295, 297, 306, 312, 328, 356, 361, 369, 371, 372, 387, 391, 395, 397, 399, 405, 425, 437, 449, 452, 460, 466, 488, 496, 502, 504, 514, 515, 519, 522, 524, 526, 528, 574, 577, 586, 606, 607, 610, 611, 614, 617, 623, 628, 642, 646, 647, 650, 656, 657, 659, 660, 665, 667, 681, 685, 686, 687, 691, 692, 694, 709, 711, 720, 721, 722, 723, 729, 731, 749, 752, 753, 754, 758, 762, 766, 768, 777, 796, 798, 814, 816, 817, 824, 844, 849, 851, 857, 868, 870, 879, 887, 893, 930, 935, 942, 944, 953, 965, 968, 972, 974, 976, 982, 1006, 1018, 1032, 1033, 1040, 1047, 1070, 1078, 1084, 1086, 1096, 1097, 1101, 1106, 1108, 1132, 1156, 1158, 1161, 1167, 1174, 1178, 1192, 1196, 1197, 1200, 1206, 1207, 1215, 1217, 1232, 1238, 1245, 1249, 1250, 1260, 1272, 1273, 1279, 1282, 1283, 1285, 1287, 1290], "n0": [361, 526], "n00": [935, 1108], "n01": [935, 1108], "n02": [935, 1108], "n1": [361, 526], "n2": [1, 361], "n3": 1, "n_1": [452, 777], "n_2": [452, 777], "n_3": [452, 777], "n_bar": 1277, "n_bit": 1282, "n_byte": [369, 646, 647, 1282], "n_char": [646, 647, 1282], "n_chunk": [312, 902, 1032, 1140, 1260], "n_elem": 1278, "n_even": 893, "n_field_strategi": [526, 1108], "n_film": 1269, "n_foo_uniqu": 1277, "n_kilobyt": 369, "n_row": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 217, 312, 887], "n_thread": [129, 130], "n_uniqu": [312, 328, 777, 1260], "na": [271, 312, 658, 1242, 1260], "naiv": [399, 400, 667, 976, 977, 1217], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 175, 176, 179, 180, 185, 186, 187, 191, 195, 196, 199, 200, 202, 203, 214, 215, 216, 218, 219, 222, 224, 226, 228, 229, 231, 235, 237, 241, 245, 246, 247, 249, 250, 251, 258, 259, 262, 265, 267, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 286, 287, 288, 289, 290, 291, 297, 312, 316, 323, 361, 365, 366, 368, 370, 372, 388, 423, 426, 446, 452, 472, 479, 480, 481, 482, 526, 535, 540, 542, 544, 546, 549, 573, 580, 590, 626, 638, 639, 650, 651, 652, 675, 677, 678, 686, 691, 695, 696, 697, 698, 699, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 715, 716, 725, 726, 731, 732, 735, 740, 741, 742, 743, 744, 745, 746, 747, 750, 753, 754, 755, 756, 758, 759, 760, 761, 762, 766, 767, 773, 777, 793, 795, 800, 801, 805, 806, 809, 812, 815, 820, 821, 829, 830, 836, 839, 840, 841, 847, 848, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 870, 887, 891, 892, 893, 899, 935, 953, 966, 1004, 1007, 1024, 1108, 1137, 1142, 1187, 1188, 1189, 1200, 1201, 1225, 1228, 1236, 1237, 1242, 1249, 1260, 1265, 1270, 1271, 1272, 1273, 1274, 1275, 1286, 1287, 1290], "name_gener": [276, 312], "named_agg": [291, 864], "named_bi": [203, 312, 815, 887], "named_expr": [250, 251, 286, 287, 312, 678, 755, 759, 840, 841, 859, 860, 887], "named_fram": [1273, 1287], "nameless": 121, "namespac": [1, 131, 311, 312, 315, 675, 756, 776, 789, 885, 886, 1260, 1265, 1290], "nan": [121, 159, 172, 193, 270, 271, 312, 393, 394, 440, 441, 450, 461, 463, 470, 479, 480, 481, 482, 486, 533, 536, 551, 565, 566, 567, 568, 594, 687, 709, 777, 810, 887, 904, 908, 970, 971, 1034, 1060, 1061, 1125, 1126, 1149, 1241, 1242, 1260, 1290], "nan_as_nul": 172, "nan_max": [777, 1260], "nan_min": [777, 1260], "nan_to_nul": [121, 312, 887, 1260], "nana": 1282, "nanmax": [565, 566, 777, 1125, 1126, 1260], "nanosecond": [77, 204, 219, 244, 282, 312, 417, 421, 422, 432, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1003, 1013, 1015, 1027, 1260, 1283], "nansum": [594, 777, 1149, 1260], "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 216, 222, 246, 247, 266, 270, 298, 312, 535, 739, 756, 777, 783, 848, 871, 887, 1116, 1241, 1260, 1264, 1287, 1290], "natur": [531, 777, 1113, 1260, 1276, 1281], "ndarrai": [120, 170, 195, 270, 312, 459, 615, 777, 812, 887, 895, 1039, 1162, 1163, 1241, 1260], "ndjson": [44, 887], "ne": [568, 777, 1023, 1128, 1260], "ne_miss": [195, 312, 777, 812, 887, 1023, 1260], "nearest": [49, 183, 219, 239, 304, 312, 376, 455, 470, 581, 603, 604, 750, 777, 803, 821, 835, 877, 887, 951, 967, 1038, 1050, 1138, 1154, 1260, 1281], "nearest_pow2": 49, "necessari": [33, 34, 42, 46, 85, 134, 270, 312, 887, 1241, 1260], "need": [55, 86, 95, 123, 129, 130, 132, 141, 143, 146, 148, 204, 244, 247, 256, 312, 315, 526, 593, 618, 652, 668, 723, 749, 752, 768, 777, 816, 838, 887, 1168, 1202, 1218, 1260, 1265, 1290], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 206, 221, 244, 255, 257, 263, 289, 312, 356, 519, 520, 577, 578, 593, 617, 624, 642, 654, 665, 777, 838, 844, 846, 862, 863, 887, 893, 930, 1047, 1070, 1101, 1102, 1135, 1167, 1175, 1192, 1204, 1215, 1232, 1260], "negat": [570, 777, 1130, 1260], "neither": [123, 134, 140, 248, 312, 361, 526, 935, 1108], "nest": [46, 123, 126, 160, 161, 190, 312, 789, 1025, 1260, 1287, 1290], "nest_asyncio": 151, "nesting_level": 160, "net": [638, 1188], "netherland": [219, 312, 821, 887], "never": [33, 42, 131, 218, 219, 245, 312, 820, 821, 887], "new": [34, 35, 36, 143, 168, 173, 198, 208, 209, 222, 233, 234, 237, 241, 276, 278, 280, 281, 286, 287, 312, 323, 399, 448, 458, 460, 470, 557, 558, 573, 587, 588, 592, 650, 651, 656, 657, 675, 677, 773, 777, 789, 814, 836, 854, 856, 859, 860, 871, 887, 897, 899, 976, 1031, 1040, 1129, 1142, 1143, 1144, 1148, 1200, 1201, 1206, 1207, 1225, 1228, 1237, 1260, 1287, 1289], "new_column": [129, 130, 134, 143], "new_dat": 417, "new_df": [281, 312, 856, 887], "new_fil": [31, 33, 37, 38, 41, 312], "new_from_index": 1260, "new_id": [276, 312], "new_lf": [856, 887], "new_tabl": 1289, "new_valu": [713, 714, 727, 751], "new_york": 721, "newli": 47, "newlin": [40, 139, 147, 312], "next": [49, 204, 219, 244, 282, 312, 364, 395, 417, 421, 434, 583, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 972, 998, 1002, 1015, 1139, 1260], "next_batch": 130, "next_pow2": 49, "nfruit": 665, "nl": [395, 705, 972], "nnel_id": 123, "no1": 893, "no_default": [199, 312, 587, 588, 652, 777, 1143, 1144, 1202, 1260], "no_optim": [42, 43, 44, 45, 53, 54, 798, 799, 825, 834, 887], "nodataerror": [129, 130, 134, 140, 143], "nodd": [637, 1187], "node": [794, 798, 818, 825, 829, 834, 836, 887], "nodefault": [199, 312, 587, 588, 652, 777, 1143, 1144, 1202, 1260], "non": [4, 5, 33, 35, 36, 42, 47, 62, 63, 121, 150, 175, 182, 217, 228, 244, 250, 251, 255, 275, 276, 279, 281, 286, 287, 312, 371, 372, 377, 381, 382, 395, 420, 472, 526, 534, 535, 574, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 632, 638, 646, 652, 672, 674, 678, 685, 686, 696, 698, 706, 707, 708, 710, 712, 716, 723, 741, 743, 746, 753, 754, 755, 759, 761, 777, 793, 802, 829, 838, 840, 841, 844, 852, 855, 856, 859, 860, 887, 891, 893, 944, 954, 959, 960, 967, 972, 1001, 1052, 1108, 1116, 1132, 1143, 1144, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1167, 1182, 1188, 1196, 1222, 1224, 1241, 1245, 1260, 1279, 1287], "non_exist": [420, 1001], "non_numer": [33, 42, 312, 887], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 54, 56, 59, 62, 63, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 171, 177, 182, 183, 187, 193, 194, 195, 197, 199, 202, 204, 205, 210, 214, 218, 219, 220, 222, 225, 228, 233, 234, 237, 244, 245, 248, 252, 255, 257, 258, 264, 265, 267, 269, 270, 271, 274, 276, 277, 278, 279, 280, 281, 282, 293, 297, 312, 324, 326, 327, 339, 340, 341, 348, 349, 361, 364, 377, 381, 382, 383, 386, 388, 393, 394, 402, 417, 420, 441, 442, 443, 444, 445, 446, 449, 450, 451, 457, 464, 465, 467, 470, 471, 472, 479, 480, 481, 482, 487, 489, 490, 497, 503, 505, 507, 514, 515, 516, 517, 518, 520, 526, 534, 535, 544, 547, 548, 550, 555, 568, 569, 570, 571, 573, 574, 580, 583, 584, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 617, 618, 619, 620, 624, 625, 629, 630, 632, 634, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 654, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 669, 671, 674, 675, 676, 677, 684, 691, 696, 697, 698, 700, 706, 707, 708, 710, 712, 716, 718, 719, 720, 721, 722, 723, 725, 726, 733, 734, 735, 736, 737, 738, 739, 741, 743, 746, 752, 753, 754, 759, 761, 763, 764, 765, 767, 777, 796, 797, 799, 802, 803, 806, 808, 810, 811, 812, 816, 819, 820, 821, 823, 825, 829, 832, 838, 842, 844, 845, 846, 847, 853, 854, 855, 856, 861, 866, 870, 871, 880, 881, 887, 891, 892, 893, 895, 896, 900, 901, 909, 910, 914, 915, 922, 923, 935, 953, 954, 959, 960, 966, 967, 969, 970, 971, 979, 986, 987, 988, 992, 1001, 1021, 1023, 1026, 1027, 1028, 1029, 1033, 1034, 1035, 1044, 1046, 1048, 1050, 1051, 1052, 1062, 1063, 1066, 1067, 1069, 1071, 1072, 1075, 1079, 1085, 1087, 1089, 1096, 1097, 1098, 1099, 1100, 1102, 1108, 1116, 1117, 1118, 1119, 1120, 1128, 1131, 1137, 1138, 1139, 1143, 1144, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1161, 1162, 1163, 1164, 1167, 1170, 1171, 1174, 1175, 1178, 1179, 1180, 1182, 1184, 1185, 1188, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1219, 1221, 1224, 1227, 1235, 1237, 1238, 1239, 1241, 1242, 1243, 1249, 1250, 1260, 1269, 1271, 1272, 1273, 1275, 1278, 1279, 1283, 1287], "nonexist": [420, 1001], "nor": [134, 140, 248, 312], "normal": [35, 126, 204, 312, 439, 484, 623, 691, 777, 816, 887, 1021, 1067, 1174, 1249, 1260], "normalised_scor": 131, "norowsreturnederror": [245, 312], "not_": [286, 312, 777, 859, 887, 893, 1260], "not_c": [286, 312, 859, 887], "notabl": 131, "notat": [11, 36, 312], "note": [4, 10, 20, 35, 36, 41, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 147, 149, 152, 154, 157, 159, 163, 165, 168, 172, 179, 181, 183, 184, 193, 195, 204, 205, 214, 215, 216, 218, 219, 222, 233, 236, 237, 244, 245, 246, 247, 252, 255, 259, 266, 269, 271, 274, 276, 277, 279, 281, 282, 286, 288, 289, 312, 356, 377, 385, 386, 390, 393, 394, 400, 414, 415, 417, 421, 434, 443, 450, 456, 458, 465, 472, 479, 480, 498, 501, 519, 526, 535, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 619, 623, 629, 630, 631, 636, 637, 638, 639, 640, 641, 642, 646, 647, 650, 651, 652, 654, 659, 660, 661, 664, 665, 672, 674, 675, 680, 687, 696, 698, 705, 713, 718, 719, 721, 722, 723, 727, 737, 749, 751, 752, 756, 764, 765, 767, 768, 773, 777, 788, 799, 803, 804, 810, 812, 816, 817, 820, 821, 824, 836, 838, 842, 844, 845, 847, 848, 853, 855, 856, 859, 862, 863, 887, 893, 930, 954, 963, 964, 967, 970, 971, 977, 995, 996, 998, 1002, 1015, 1027, 1034, 1046, 1052, 1080, 1083, 1101, 1116, 1143, 1144, 1148, 1155, 1162, 1164, 1167, 1169, 1174, 1179, 1180, 1181, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1196, 1197, 1200, 1201, 1202, 1204, 1209, 1210, 1211, 1214, 1215, 1222, 1224, 1231, 1242, 1244, 1260, 1269, 1270, 1274, 1275, 1285, 1287], "noth": [20, 637, 645, 1187, 1195], "notic": [131, 195, 312, 812, 887, 1260], "notimplementederror": 172, "now": [47, 134, 244, 270, 312, 838, 887, 1241, 1260], "np": [120, 170, 195, 270, 312, 459, 534, 615, 777, 812, 887, 895, 1039, 1055, 1058, 1060, 1061, 1162, 1163, 1260], "npt": [170, 895], "nr": [295, 306, 868, 879], "nth": [198, 312, 460, 657, 773, 777, 814, 887, 1040, 1207, 1260], "nthe": [637, 1187], "nthose": [637, 1187], "nu": 635, "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 143, 147, 149, 156, 159, 163, 172, 175, 177, 182, 183, 187, 189, 194, 195, 197, 210, 218, 225, 226, 227, 234, 237, 239, 255, 258, 260, 261, 262, 265, 270, 271, 275, 278, 281, 283, 286, 293, 312, 324, 326, 327, 337, 340, 341, 348, 349, 356, 357, 364, 366, 371, 372, 373, 377, 381, 382, 383, 386, 391, 393, 394, 417, 420, 427, 428, 429, 430, 431, 432, 433, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 457, 464, 470, 471, 479, 480, 481, 482, 487, 489, 490, 496, 497, 500, 501, 503, 505, 506, 507, 515, 516, 517, 518, 519, 521, 526, 534, 535, 555, 568, 569, 570, 571, 574, 584, 588, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 618, 620, 625, 626, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 654, 656, 657, 658, 664, 665, 667, 669, 674, 675, 676, 677, 684, 685, 686, 695, 696, 697, 698, 703, 706, 707, 708, 710, 712, 716, 720, 725, 736, 737, 741, 743, 746, 753, 754, 759, 761, 767, 777, 793, 796, 802, 803, 806, 811, 812, 819, 820, 832, 844, 847, 852, 854, 856, 859, 861, 866, 887, 893, 900, 901, 911, 914, 915, 922, 923, 930, 931, 939, 944, 945, 953, 954, 959, 960, 968, 970, 971, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1023, 1024, 1026, 1027, 1028, 1029, 1033, 1035, 1036, 1044, 1045, 1050, 1051, 1062, 1063, 1064, 1069, 1071, 1072, 1075, 1078, 1079, 1082, 1083, 1085, 1087, 1088, 1089, 1098, 1100, 1101, 1103, 1108, 1116, 1128, 1131, 1132, 1144, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1167, 1171, 1176, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1204, 1206, 1207, 1208, 1214, 1215, 1217, 1219, 1224, 1227, 1238, 1241, 1242, 1243, 1245, 1260, 1272, 1276, 1278, 1279, 1283, 1285, 1287, 1288, 1290], "null_behavior": [391, 496, 777, 968, 1078, 1260], "null_count": [41, 45, 183, 187, 312, 387, 777, 803, 887, 965, 967, 1260], "null_equ": [189, 312, 1024, 1260], "null_on_oob": [348, 501, 503, 922, 1083, 1085], "null_prob": [156, 159, 163], "null_valu": [33, 42, 129, 130, 143, 312, 887], "nullabl": [35, 312], "nullbehavior": [391, 496, 777, 968, 1078, 1260], "nullif": 1280, "nulls_last": [258, 312, 337, 357, 521, 625, 626, 703, 777, 847, 887, 911, 931, 1064, 1103, 1176, 1260], "num": [13, 36, 273, 312, 472, 777, 1052, 1260], "num_row": 172, "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 175, 177, 182, 190, 191, 193, 194, 202, 206, 207, 216, 217, 221, 232, 233, 244, 248, 255, 260, 263, 275, 280, 283, 285, 293, 295, 297, 306, 312, 338, 354, 356, 361, 364, 371, 372, 381, 387, 388, 391, 395, 398, 406, 408, 410, 412, 413, 422, 435, 436, 438, 442, 443, 444, 445, 449, 450, 451, 457, 466, 479, 480, 487, 488, 496, 504, 507, 512, 514, 519, 522, 524, 526, 528, 573, 577, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 619, 628, 642, 644, 646, 647, 650, 654, 656, 657, 665, 668, 681, 685, 686, 692, 705, 709, 710, 711, 723, 731, 736, 753, 754, 758, 762, 766, 777, 793, 796, 802, 809, 810, 811, 817, 824, 834, 844, 849, 851, 852, 857, 858, 866, 868, 870, 879, 887, 892, 928, 930, 935, 944, 953, 959, 965, 966, 968, 972, 975, 983, 985, 990, 993, 994, 1003, 1016, 1017, 1019, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1035, 1047, 1069, 1070, 1078, 1086, 1089, 1094, 1096, 1101, 1106, 1108, 1122, 1123, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1167, 1170, 1178, 1192, 1194, 1196, 1197, 1200, 1204, 1206, 1207, 1215, 1218, 1232, 1245, 1250, 1260, 1276, 1281, 1290], "number_of_two": [345, 495], "numbers_decim": 668, "numer": [10, 16, 33, 36, 42, 133, 144, 176, 185, 219, 270, 271, 279, 280, 312, 321, 373, 377, 456, 472, 531, 552, 554, 578, 586, 618, 639, 674, 679, 687, 777, 789, 795, 805, 821, 855, 887, 893, 945, 954, 967, 1052, 1168, 1189, 1224, 1241, 1260, 1281, 1290], "numeric_dtyp": 1290, "numericliter": [377, 777, 954, 1260], "numpi": [90, 120, 151, 170, 181, 216, 246, 247, 266, 270, 271, 312, 534, 565, 566, 594, 777, 887, 895, 1055, 1058, 1060, 1061, 1125, 1126, 1149, 1241, 1242, 1260], "nworld": 659, "o": [135, 146, 369, 371, 372, 387, 636, 685, 686, 777, 942, 944, 965, 1186, 1209, 1245, 1260, 1273], "oauth": 145, "obj": 893, "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 171, 172, 179, 184, 203, 204, 219, 220, 235, 244, 247, 252, 259, 269, 270, 271, 312, 390, 547, 718, 719, 721, 722, 737, 756, 764, 765, 777, 789, 798, 804, 816, 821, 823, 838, 848, 887, 893, 896, 1235, 1260, 1270, 1272, 1275, 1287, 1289], "observ": [388, 442, 443, 444, 445, 580, 777, 966, 1026, 1027, 1028, 1029, 1137, 1260], "obtain": 526, "obvious": 677, "occur": [36, 53, 54, 91, 100, 106, 312, 345, 495, 553, 583, 777, 798, 799, 808, 834, 845, 887, 919, 1077, 1121, 1139, 1241, 1260], "occurr": [467, 475, 478, 691, 777, 1048, 1056, 1059, 1249, 1260], "oct": 1282, "octet_length": 1280, "octob": 1282, "od": [140, 789], "odbc": [34, 131, 312], "odd": 637, "odi": 640, "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 312, 395, 705, 798, 799, 808, 820, 821, 825, 834, 887, 972], "offer": [236, 312, 577, 777, 833, 887, 1283, 1287], "offic": [36, 312], "offset": [64, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 198, 204, 244, 257, 288, 289, 312, 395, 396, 404, 414, 415, 417, 421, 434, 460, 502, 520, 593, 624, 654, 667, 777, 814, 816, 838, 846, 862, 863, 887, 972, 973, 981, 995, 996, 998, 1002, 1015, 1040, 1084, 1102, 1175, 1204, 1217, 1260, 1286], "offset_bi": 723, "often": [132, 168, 204, 244, 312, 345, 495, 586, 593, 777, 816, 838, 887, 919, 1077, 1275, 1287], "ok": 526, "old": [35, 241, 312, 587, 588, 777, 836, 887, 1143, 1144, 1260], "old_tabl": 1289, "older": [41, 45, 312, 887], "oldw": 660, "omit": [27, 119, 123, 157, 168, 233, 247, 269, 274, 312, 718, 721, 733, 734, 764, 765, 893, 1288], "onc": [129, 130, 165, 222, 246, 248, 291, 312, 514, 534, 535, 614, 662, 663, 777, 794, 864, 887, 1096, 1116, 1161, 1212, 1213, 1260, 1273], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 147, 162, 164, 168, 176, 184, 194, 195, 202, 203, 204, 216, 220, 228, 237, 244, 245, 246, 252, 253, 255, 270, 273, 279, 292, 312, 322, 356, 388, 390, 451, 452, 456, 459, 462, 464, 519, 526, 531, 547, 556, 557, 559, 561, 563, 564, 592, 593, 617, 625, 637, 638, 639, 652, 675, 718, 721, 739, 757, 767, 773, 777, 795, 804, 811, 812, 815, 816, 829, 838, 842, 843, 844, 855, 861, 865, 887, 902, 930, 935, 966, 1035, 1044, 1045, 1101, 1108, 1113, 1137, 1148, 1167, 1187, 1188, 1189, 1202, 1225, 1241, 1260, 1275, 1276, 1278, 1281, 1289], "one_to_mani": [218, 312, 820, 887], "one_to_on": [218, 312, 820, 887], "oneormoredatatyp": [36, 157, 312], "ones": 893, "onf": [654, 1204], "onli": [1, 5, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 139, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 187, 192, 204, 205, 216, 219, 222, 237, 244, 246, 247, 266, 268, 269, 270, 281, 282, 298, 312, 322, 324, 326, 338, 376, 377, 390, 395, 417, 424, 446, 455, 465, 534, 535, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 573, 585, 631, 640, 652, 689, 705, 739, 777, 798, 801, 804, 806, 807, 816, 817, 821, 824, 838, 839, 856, 858, 871, 887, 891, 893, 900, 901, 902, 951, 954, 972, 998, 1032, 1038, 1046, 1116, 1141, 1181, 1190, 1202, 1235, 1238, 1241, 1260, 1269, 1272, 1287, 1288, 1290], "onlin": [192, 312, 1032, 1260], "ont": [640, 1190], "onto": 159, "oof": [653, 1203, 1278, 1282], "op": [20, 163, 312, 541, 586, 777, 823, 887, 1260], "opaqu": 871, "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 312, 390, 777, 804, 887], "openoffic": 140, "openpyxl": [134, 151], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 178, 192, 195, 197, 203, 209, 220, 222, 229, 233, 235, 236, 237, 240, 242, 244, 247, 248, 253, 255, 264, 270, 271, 276, 279, 280, 290, 291, 312, 321, 322, 325, 356, 382, 383, 384, 385, 386, 387, 440, 441, 456, 458, 461, 463, 486, 514, 515, 516, 517, 518, 519, 526, 533, 549, 552, 554, 555, 556, 557, 559, 561, 563, 564, 567, 568, 569, 572, 573, 578, 585, 614, 617, 679, 687, 694, 695, 697, 707, 708, 712, 724, 756, 767, 777, 789, 797, 801, 803, 807, 812, 815, 817, 820, 824, 829, 830, 839, 843, 844, 848, 855, 858, 864, 887, 891, 930, 955, 960, 961, 962, 963, 964, 965, 1022, 1023, 1032, 1041, 1043, 1068, 1096, 1097, 1098, 1099, 1100, 1101, 1115, 1127, 1128, 1141, 1161, 1167, 1235, 1240, 1241, 1242, 1260, 1286, 1287], "operand": [687, 777], "opp": 893, "oppos": 705, "opposit": [255, 312, 356, 519, 617, 777, 844, 887, 930, 1101, 1167, 1260], "opt": [274, 312], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 216, 220, 236, 240, 246, 277, 312, 794, 798, 799, 808, 825, 834, 845, 853, 862, 863, 871, 887, 950, 1162, 1260], "optimis": [131, 222, 247, 298, 312, 887, 1116, 1164, 1260, 1290], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 184, 199, 204, 214, 219, 228, 252, 259, 265, 276, 279, 281, 312, 390, 395, 484, 541, 547, 594, 595, 597, 599, 601, 603, 606, 608, 610, 623, 631, 640, 652, 654, 691, 759, 767, 777, 789, 798, 804, 816, 820, 821, 829, 842, 848, 855, 856, 887, 893, 972, 1067, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1174, 1181, 1190, 1202, 1204, 1237, 1249, 1260, 1278, 1282], "optional_memb": [476, 777, 1057, 1260], "or_": 777, "oracl": 132, "orang": [180, 293, 294, 296, 297, 299, 300, 302, 304, 305, 312, 372, 686, 777, 866, 867, 869, 870, 872, 873, 875, 877, 878, 1282], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 131, 150, 152, 153, 154, 155, 175, 179, 180, 187, 188, 195, 203, 204, 218, 235, 236, 237, 244, 246, 248, 249, 253, 258, 269, 270, 275, 277, 282, 312, 337, 357, 362, 371, 372, 393, 394, 452, 497, 514, 521, 527, 573, 578, 583, 593, 614, 615, 616, 625, 626, 653, 660, 661, 662, 663, 677, 685, 686, 688, 689, 691, 703, 756, 767, 777, 788, 793, 801, 806, 807, 812, 815, 816, 820, 829, 838, 839, 843, 847, 848, 852, 853, 887, 892, 893, 911, 931, 936, 944, 949, 970, 971, 1036, 1064, 1079, 1096, 1103, 1109, 1135, 1139, 1146, 1161, 1163, 1165, 1176, 1203, 1228, 1245, 1246, 1247, 1249, 1260, 1269, 1272, 1278, 1286, 1287, 1290], "order_bi": [573, 777], "ordin": [418, 583, 777, 999, 1139, 1260, 1288], "ordinal_dai": [403, 436], "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 312, 845, 887, 895, 896], "orient": [48, 50, 91, 120, 122, 233, 312, 887, 1269], "origin": [47, 129, 130, 143, 187, 195, 277, 312, 393, 394, 420, 421, 434, 452, 497, 535, 556, 573, 585, 586, 587, 588, 589, 591, 632, 637, 645, 701, 702, 777, 806, 812, 853, 887, 970, 971, 1001, 1002, 1015, 1036, 1079, 1143, 1144, 1145, 1147, 1182, 1187, 1195, 1260], "orld": 1210, "other": [1, 20, 32, 36, 41, 54, 128, 129, 130, 131, 134, 143, 148, 152, 153, 154, 155, 187, 189, 192, 195, 218, 219, 228, 229, 237, 245, 247, 250, 251, 274, 279, 281, 284, 286, 287, 310, 312, 315, 321, 325, 327, 337, 338, 377, 392, 440, 441, 452, 456, 461, 463, 472, 476, 486, 493, 515, 516, 517, 518, 533, 539, 543, 552, 554, 567, 568, 572, 587, 588, 619, 626, 652, 678, 679, 684, 687, 694, 696, 698, 703, 706, 707, 708, 716, 723, 741, 743, 746, 755, 759, 761, 777, 789, 799, 806, 812, 820, 821, 829, 830, 840, 841, 855, 856, 859, 860, 861, 887, 893, 902, 954, 969, 1022, 1023, 1024, 1032, 1041, 1043, 1057, 1068, 1075, 1097, 1098, 1099, 1100, 1115, 1127, 1128, 1143, 1144, 1243, 1251, 1259, 1260, 1265, 1275, 1287], "other_df": [218, 312], "other_lf": [820, 887], "otherwis": [34, 131, 134, 141, 146, 158, 161, 165, 199, 222, 229, 247, 250, 269, 274, 298, 312, 361, 366, 377, 388, 442, 443, 444, 445, 526, 535, 544, 573, 577, 578, 580, 585, 630, 633, 636, 641, 642, 647, 654, 665, 691, 695, 723, 726, 735, 739, 767, 777, 830, 840, 871, 887, 935, 939, 954, 966, 1026, 1027, 1028, 1029, 1108, 1116, 1135, 1137, 1141, 1162, 1164, 1180, 1183, 1186, 1191, 1192, 1197, 1204, 1215, 1249, 1260, 1279], "our": 173, "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 148, 151, 195, 244, 247, 312, 348, 366, 501, 503, 630, 633, 641, 767, 812, 838, 887, 922, 939, 1083, 1085, 1180, 1183, 1191, 1285], "outcom": [573, 777], "outer": [47, 55, 281, 312, 856, 887], "outermost": 46, "outlin": 7, "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 41, 42, 175, 183, 216, 222, 226, 229, 235, 237, 246, 250, 252, 262, 275, 282, 286, 312, 324, 326, 349, 371, 372, 388, 505, 526, 534, 535, 544, 547, 557, 580, 587, 629, 643, 647, 685, 686, 691, 695, 696, 697, 698, 707, 708, 709, 738, 739, 777, 789, 793, 803, 808, 825, 829, 830, 840, 842, 852, 859, 871, 887, 900, 901, 923, 944, 966, 1087, 1116, 1137, 1179, 1193, 1197, 1245, 1249, 1260], "output_path": [845, 887], "outsid": [377, 777, 954, 1260], "over": [125, 129, 130, 131, 133, 134, 140, 143, 148, 159, 160, 175, 192, 215, 216, 217, 222, 245, 246, 247, 259, 275, 276, 290, 298, 312, 316, 371, 372, 387, 390, 443, 451, 534, 535, 544, 546, 547, 548, 549, 557, 558, 583, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 685, 686, 713, 714, 727, 738, 739, 751, 756, 777, 793, 798, 848, 852, 871, 887, 893, 944, 965, 1027, 1032, 1116, 1150, 1151, 1153, 1157, 1245, 1260, 1287], "overflow": [176, 312, 373, 385, 386, 669, 680, 777, 795, 887, 945, 963, 964, 1219, 1231, 1260], "overhead": [46, 85, 143, 146, 147, 148], "overlap": [632, 638, 640, 1182, 1188, 1190], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 147, 156, 157, 163, 165, 312, 887], "overridden": [36, 116, 118, 120, 122, 138, 139, 147, 165, 312, 887], "overview": [312, 777, 789, 887, 1260, 1286, 1290], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 172, 281, 312, 323, 678, 777, 856, 887], "overwrite_schema": [35, 312], "ow": 659, "own": [767, 1241, 1260, 1290], "p": [49, 236, 312, 577, 759, 777, 833, 887, 893, 1191, 1192, 1273], "pa": [35, 116, 149, 312, 756], "pa_tabl": 756, "pacif": [396, 973], "pack": [233, 312], "packag": [131, 312, 316, 395, 705, 891, 972], "pad": [648, 649, 674, 1198, 1199, 1224], "pad_end": [649, 1199], "pad_start": [648, 674, 1198, 1224], "page": [41, 45, 135, 141, 146, 148, 312, 777, 789, 887, 1260, 1286], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 241, 312, 836, 887, 1290], "pairwis": [181, 312], "panda": [34, 117, 121, 126, 151, 195, 204, 271, 277, 279, 312, 414, 415, 684, 756, 777, 812, 816, 853, 855, 887, 995, 996, 1242, 1243, 1260, 1270, 1272, 1287], "pandas_df": 1287, "pane": [36, 312], "panic": 99, "pap": 1192, "papa": 642, "papai": [642, 1192], "papaya": [642, 654, 665, 1192, 1204, 1215], "parallel": [53, 55, 125, 132, 141, 148, 204, 219, 220, 236, 251, 287, 312, 387, 498, 691, 767, 777, 789, 816, 820, 821, 841, 860, 871, 887, 965, 1080, 1249, 1260], "parallelis": [222, 298, 312, 1116, 1260], "parallelstrategi": [141, 148], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 147, 158, 159, 163, 245, 312, 887], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 175, 176, 177, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 214, 216, 217, 218, 219, 221, 222, 226, 228, 229, 232, 233, 235, 236, 237, 239, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 295, 297, 298, 304, 306, 312, 321, 323, 324, 325, 326, 327, 337, 344, 345, 348, 349, 356, 357, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 395, 397, 399, 400, 405, 417, 420, 421, 422, 423, 425, 426, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 471, 472, 476, 484, 486, 488, 493, 494, 495, 496, 498, 501, 502, 503, 504, 505, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 533, 534, 535, 541, 547, 548, 552, 554, 557, 558, 559, 560, 561, 562, 567, 568, 572, 573, 574, 577, 578, 580, 581, 583, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 677, 678, 679, 681, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 793, 795, 796, 798, 799, 803, 804, 805, 806, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 824, 825, 829, 830, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 868, 870, 871, 877, 879, 887, 891, 892, 893, 897, 899, 900, 901, 902, 911, 918, 919, 922, 923, 930, 931, 935, 936, 938, 939, 940, 941, 943, 944, 945, 953, 954, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 976, 977, 982, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1015, 1018, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1046, 1047, 1048, 1050, 1051, 1052, 1064, 1067, 1070, 1075, 1076, 1077, 1078, 1080, 1083, 1084, 1085, 1086, 1087, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1108, 1109, 1116, 1128, 1132, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1170, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1224, 1225, 1228, 1232, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1245, 1246, 1249, 1250, 1251, 1260, 1269, 1270, 1271, 1272, 1273, 1275, 1279, 1282, 1287], "parameteris": 131, "parametr": 789, "paramount": [825, 887], "parent": [36, 197, 312], "parenthes": 18, "parquet": [41, 45, 141, 142, 148, 312, 789, 887], "parquetcompress": [41, 312], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 141, 143, 146, 147, 148, 175, 203, 250, 251, 255, 258, 275, 286, 287, 291, 312, 372, 377, 472, 573, 587, 588, 626, 644, 652, 668, 669, 678, 686, 696, 698, 703, 706, 707, 708, 716, 729, 741, 743, 746, 755, 757, 759, 761, 767, 777, 793, 815, 840, 841, 844, 847, 852, 859, 860, 864, 887, 954, 1052, 1143, 1144, 1167, 1194, 1218, 1219, 1260, 1269], "parseerror": [669, 1219], "parser": [129, 134], "part": [116, 134, 173, 269, 274, 312, 573, 638, 656, 657, 777, 808, 834, 845, 861, 887, 897, 1188, 1206, 1207, 1283], "parti": [534, 777], "partial": [119, 129, 143, 312, 887], "particip": [36, 312], "particular": [129, 135, 137, 175, 190, 275, 312, 371, 372, 685, 686, 777, 793, 852, 887, 944, 1025, 1245, 1260], "partit": [41, 132, 133, 141, 144, 146, 148, 149, 217, 235, 312, 573, 777], "partition_bi": [41, 130, 217, 312, 573, 777], "partition_chunk_size_byt": [41, 312], "partition_col": [41, 132, 312], "partition_df": 130, "partition_num": 132, "partition_on": 132, "partition_rang": 132, "partitioned_object": [41, 312], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 146, 149, 152, 154, 157, 159, 161, 163, 175, 181, 185, 203, 204, 206, 219, 221, 235, 236, 237, 244, 250, 255, 258, 263, 271, 274, 275, 282, 286, 291, 312, 356, 372, 395, 405, 417, 420, 449, 469, 519, 534, 535, 573, 577, 587, 588, 593, 617, 626, 652, 659, 660, 661, 686, 695, 703, 705, 729, 759, 767, 773, 777, 793, 805, 815, 816, 818, 821, 825, 833, 838, 840, 844, 845, 847, 852, 859, 864, 871, 887, 891, 892, 930, 972, 982, 1001, 1033, 1047, 1070, 1101, 1116, 1143, 1144, 1167, 1202, 1209, 1210, 1211, 1232, 1242, 1260, 1273, 1287], "pass_nam": [535, 777], "pass_name_to_appli": [777, 891], "password": [129, 132, 135, 137], "past": [32, 312, 825, 887], "pat": [641, 1191], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 252, 312, 390, 547, 550, 616, 645, 777, 804, 842, 845, 887, 891, 1165, 1195, 1260, 1290], "pathlib": [31, 33, 37, 38, 41, 143, 312], "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 216, 312, 542, 630, 631, 632, 635, 637, 638, 639, 640, 641, 650, 651, 652, 658, 871, 893, 1162, 1164, 1180, 1181, 1182, 1185, 1187, 1188, 1189, 1190, 1191, 1200, 1201, 1202, 1208, 1260, 1282], "paya": 665, "pct": 159, "pct_chang": [777, 1260], "pd": [117, 121, 684, 756, 777, 1242, 1243, 1260, 1270, 1287], "pd_df": 121, "pd_frame": 756, "pd_seri": 121, "pea": 642, "peak": [246, 312, 575, 576, 777, 1133, 1134, 1260], "peak_max": [777, 1260], "peak_min": [777, 1260], "pear": [642, 654, 665, 1192, 1204, 1215], "pearson": [181, 312, 484, 623, 709, 777, 1067, 1174, 1260], "penalti": [664, 666, 667, 1214, 1216, 1217], "per": [14, 33, 36, 42, 134, 157, 159, 175, 202, 233, 234, 237, 251, 258, 275, 287, 301, 303, 304, 312, 348, 372, 498, 501, 503, 534, 535, 556, 557, 559, 561, 563, 564, 626, 686, 691, 703, 777, 793, 841, 847, 852, 860, 874, 876, 877, 887, 891, 922, 1080, 1083, 1085, 1249, 1260], "percent": [574, 777, 1132, 1260], "percentag": [156, 159, 163, 574, 777, 1132, 1260], "percentil": [183, 312, 803, 887, 967, 1260], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 139, 141, 143, 146, 147, 148, 172, 195, 203, 204, 219, 222, 240, 244, 246, 247, 270, 298, 312, 456, 526, 534, 535, 573, 593, 631, 640, 646, 647, 652, 664, 666, 667, 777, 812, 816, 821, 838, 847, 862, 863, 887, 1116, 1181, 1190, 1196, 1197, 1202, 1214, 1216, 1217, 1241, 1260], "perhap": [276, 312], "period": [129, 130, 143, 204, 244, 312, 421, 434, 442, 444, 445, 574, 593, 718, 719, 721, 722, 764, 765, 777, 816, 838, 887, 1002, 1015, 1026, 1028, 1029, 1132, 1260], "persist": 1275, "phase": [34, 280, 312], "philadelphia": [650, 651], "phone": [672, 1222], "physic": [46, 59, 85, 129, 130, 219, 237, 312, 684, 777, 794, 820, 821, 887, 948, 1243, 1260], "pi": [10, 389, 777, 956, 958, 1172, 1233, 1260, 1280, 1284], "pick": [160, 767], "pickl": [390, 777, 804, 887], "pip": [395, 705, 972], "pipe": [312, 777, 887], "pipelin": [134, 274, 312], "pitfal": 101, "pivot": [280, 312, 893], "pivot_long": [279, 312, 855, 887], "pivot_wid": [237, 312], "pivotagg": [237, 312], "pixel": [36, 312], "pk": [439, 777, 1021, 1260], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1260, 1265, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1290], "pl_frame": 756, "place": [10, 11, 33, 42, 186, 192, 208, 209, 237, 242, 247, 258, 284, 312, 316, 337, 349, 357, 505, 521, 625, 626, 703, 777, 847, 887, 902, 911, 923, 931, 1032, 1087, 1103, 1140, 1176, 1260], "placehold": 728, "plai": [12, 708], "plain": [808, 887], "plan": [219, 220, 312, 390, 777, 794, 798, 804, 808, 820, 821, 842, 845, 887, 1289], "plane": [701, 702], "platform": 151, "ple": 1282, "pleas": [121, 131, 132, 195, 204, 228, 312, 316, 443, 710, 723, 777, 812, 816, 829, 887, 1027, 1260], "plenti": 893, "plot": [312, 834, 845, 887, 1260], "plu": [388, 531, 777, 966, 1113, 1137, 1260, 1281], "plugin": [0, 777, 789], "plugin_path": 891, "point": [10, 11, 36, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 193, 204, 220, 259, 269, 274, 280, 281, 312, 315, 316, 376, 387, 388, 393, 421, 422, 450, 455, 456, 467, 479, 480, 514, 535, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 753, 754, 777, 798, 799, 808, 810, 816, 825, 836, 848, 856, 887, 949, 951, 965, 966, 970, 1002, 1003, 1034, 1038, 1048, 1096, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1239, 1244, 1260, 1265, 1287], "poison": [565, 566, 777, 1125, 1126, 1260], "pola": 312, "polar": [1, 312, 315, 316, 776, 777, 783, 789, 887, 891, 892, 893, 1260, 1264, 1265, 1286, 1287, 1289], "polars_df": 1287, "polars_file_cache_ttl": [139, 143, 146, 147], "polars_hypothesis_profil": [162, 164], "polars_max_thread": 165, "polars_seri": 1287, "polars_verbos": [798, 887], "polarsdatafram": 172, "polarsdataset": [274, 312], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 176, 222, 269, 274, 312, 373, 446, 534, 535, 587, 588, 644, 725, 737, 738, 739, 749, 752, 768, 773, 777, 795, 887, 893, 945, 1116, 1143, 1144, 1194, 1260], "polarsintegertyp": [700, 733, 734], "polarstemporaltyp": [664, 1214], "polarstyp": 55, "pool": [14, 54, 165, 166, 799, 887], "poor": 131, "pop2": [219, 312, 821, 887], "popul": [219, 312, 821, 887], "port": [34, 129, 131, 132, 135, 137, 312], "portion": 1282, "pos_a": 1282, "posit": [36, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 173, 185, 191, 203, 235, 250, 251, 255, 258, 278, 286, 287, 291, 312, 356, 442, 444, 445, 446, 519, 573, 578, 580, 617, 626, 639, 641, 650, 651, 669, 678, 701, 702, 703, 706, 707, 708, 725, 755, 759, 773, 777, 805, 809, 815, 840, 841, 844, 847, 854, 859, 860, 864, 887, 893, 930, 1026, 1028, 1029, 1101, 1135, 1137, 1167, 1189, 1219, 1260, 1288], "position": 1260, "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 203, 216, 222, 246, 277, 298, 312, 532, 535, 544, 594, 657, 690, 777, 798, 815, 847, 853, 887, 1116, 1149, 1207, 1260], "post": 47, "postgresql": [34, 131, 132, 312, 573, 777, 1285], "potenti": [101, 103, 134, 143, 146, 147, 216, 245, 247, 312, 556, 801, 803, 807, 839, 858, 887, 891], "pow": [777, 1260, 1280], "pow_n": 49, "power": [757, 1135, 1260, 1281], "powersofn": 49, "pre": [526, 535, 580, 749, 752, 768, 777, 1137, 1260], "preced": [159, 893], "precis": [10, 11, 33, 36, 42, 63, 131, 216, 246, 247, 266, 269, 274, 312, 397, 668, 887, 893, 974, 1218], "predefin": [237, 312], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 195, 214, 245, 312, 452, 693, 727, 767, 777, 798, 799, 808, 812, 825, 834, 836, 845, 862, 863, 887, 1036, 1162, 1164, 1260], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 798, 799, 808, 825, 834, 845, 887], "predict": [237, 240, 282, 312], "prefer": [129, 130, 133, 134, 143, 164, 175, 192, 216, 222, 245, 246, 275, 298, 312, 371, 372, 446, 535, 685, 686, 777, 793, 852, 887, 944, 1032, 1116, 1245, 1260, 1270, 1290], "prefilt": 148, "prefix": [35, 129, 130, 143, 168, 312, 323, 370, 542, 557, 560, 561, 563, 564, 658, 661, 662, 674, 777, 893, 943, 1208, 1212, 1224], "prefix_": 560, "prefix_a": 560, "prefix_b": 560, "prefix_field": [558, 562], "presenc": [726, 735, 893], "present": [119, 159, 199, 312, 476, 660, 661, 777, 845, 887], "preserv": [187, 195, 203, 218, 222, 270, 271, 312, 393, 394, 395, 414, 415, 452, 497, 587, 620, 636, 777, 806, 812, 820, 887, 970, 971, 972, 1036, 1079, 1143, 1171, 1186, 1242, 1260], "pressur": [45, 129, 130, 139, 141, 143, 147, 148, 618, 777, 887, 1168, 1260], "presum": [534, 777], "prev_pow2": 49, "prevent": [270, 312, 323, 385, 386, 556, 680, 777, 887, 963, 964, 1231, 1260], "preview": [202, 312], "previou": [49, 168, 312, 315, 395, 556, 557, 559, 561, 563, 564, 574, 677, 777, 972, 1132, 1260, 1265], "previous": [2, 3], "price": [312, 315, 1290], "primari": [134, 1287, 1290], "primarili": 1, "primit": [35, 312, 476, 777], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 188, 202, 203, 217, 220, 268, 290, 312, 469, 548, 718, 721, 777, 798, 818, 887, 893, 1057, 1238, 1260, 1290], "prior": [121, 312, 315, 1260, 1265], "prioriti": 160, "probabl": [439, 580, 777, 1021, 1137, 1260], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 246, 312, 798, 799, 887], "process_index": [269, 312], "produc": [2, 3, 159, 163, 218, 312, 345, 495, 544, 738, 820, 825, 887, 919, 1077], "product": [47, 181, 218, 312, 385, 392, 777, 820, 887, 963, 969, 1260], "profil": [162, 164, 798, 887], "programmat": [183, 312, 803, 887], "progress": [63, 65], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 625, 626, 777, 798, 799, 808, 825, 834, 836, 845, 887], "projection_pushdown": [42, 43, 44, 45, 53, 54, 798, 799, 808, 825, 834, 845, 887], "prompt": 123, "propag": [349, 441, 505, 565, 566, 568, 629, 643, 707, 708, 777, 923, 1023, 1087, 1125, 1126, 1128, 1179, 1193, 1260], "propagate_nan": 709, "properti": [36, 172, 179, 180, 188, 196, 207, 249, 254, 285, 289, 312, 315, 316, 800, 801, 807, 839, 858, 863, 887, 892, 893, 1020, 1037, 1124, 1166, 1260, 1265, 1290], "proport": [691, 777, 1249, 1260], "protocol": [35, 117, 132, 172, 312], "prototyp": 773, "provid": [34, 36, 129, 130, 132, 133, 134, 139, 141, 143, 144, 145, 146, 147, 148, 159, 163, 195, 199, 214, 259, 269, 312, 315, 366, 367, 446, 467, 526, 534, 535, 633, 634, 637, 644, 645, 660, 661, 662, 663, 729, 759, 777, 789, 798, 812, 848, 887, 939, 940, 1048, 1066, 1116, 1183, 1184, 1187, 1194, 1195, 1239, 1260, 1273, 1279, 1282, 1287, 1290], "prune": [141, 146, 148, 825, 887], "public": [132, 312, 777, 789, 887, 1260, 1286], "pulp": 1269, "pure": [36, 312, 541], "purpos": [555, 777, 798, 887], "push": [143, 146, 147, 148, 149], "pushdown": [42, 43, 44, 45, 53, 54, 798, 799, 808, 825, 834, 836, 845, 862, 863, 887, 1162, 1164, 1260], "put": [33, 42, 312, 316, 887], "pwd": 131, "py": 145, "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 264, 270, 271, 312, 756, 789, 1235, 1241, 1242, 1260, 1270, 1272, 1287], "pyarrow_opt": [41, 133, 141, 144, 312], "pyarrow_t": 1287, "pycapsul": [171, 896], "pycapsuleinterfac": [171, 896], "pydant": 151, "pyiceberg": [145, 151], "pyodbc": [34, 312], "pyodbc_uri": [34, 312], "pyspark": 165, "pytest": [152, 154], "python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 172, 216, 222, 246, 247, 266, 298, 312, 390, 395, 399, 456, 534, 535, 639, 705, 718, 719, 721, 722, 764, 765, 767, 777, 783, 804, 871, 887, 892, 972, 976, 986, 987, 988, 992, 1116, 1189, 1240, 1260, 1264, 1286], "pythondatatyp": [56, 72, 892], "pythonliter": [1117, 1118, 1119, 1120, 1162, 1260], "pytorch": [274, 312, 1244, 1260], "q": [247, 312, 759, 1260, 1265, 1273], "q1": [36, 312], "q2": [36, 312], "q3": [36, 312], "q4": [36, 312], "qcut": [388, 777, 966, 1260], "qhoo": 1290, "qmark": 131, "qqr": 893, "quad": [443, 777, 1027, 1260], "qualifi": [34, 312], "quantifi": [638, 1188], "quantil": [312, 580, 603, 604, 777, 887, 1137, 1154, 1260], "quarter": [204, 219, 244, 282, 312, 417, 421, 434, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015, 1283], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 192, 220, 236, 259, 312, 534, 535, 645, 756, 777, 798, 799, 808, 817, 824, 834, 845, 848, 862, 863, 871, 880, 887, 1032, 1116, 1195, 1260, 1269, 1270, 1272, 1276, 1286, 1288, 1289], "quick": [773, 967, 1260, 1290], "quit": [219, 312, 821, 887], "quot": [33, 34, 42, 129, 130, 132, 143, 312, 672, 887, 1222], "quote_char": [33, 42, 129, 130, 143, 312, 887], "quote_plu": 132, "quote_styl": [33, 42, 312, 887], "quotes_titl": 672, "quotient": 1281, "r": [129, 130, 143, 312, 577, 632, 636, 637, 638, 639, 650, 651, 777, 893, 1182, 1186, 1187, 1188, 1189, 1200, 1201, 1215, 1273, 1282], "r1": 55, "r2": 55, "r3": 55, "rab": [630, 653, 1180, 1203, 1278], "rad": 1284, "radian": [389, 701, 777, 1280], "radix": [669, 1219], "rai": [701, 702], "raini": [650, 651, 1200, 1201], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 143, 152, 154, 172, 199, 237, 245, 270, 312, 348, 366, 395, 420, 501, 503, 544, 578, 580, 588, 630, 633, 641, 664, 666, 667, 669, 671, 720, 737, 777, 922, 939, 972, 1001, 1083, 1085, 1135, 1137, 1144, 1180, 1183, 1191, 1214, 1216, 1217, 1219, 1221, 1241, 1260], "raise_if_empti": [129, 130, 134, 140, 143], "raise_if_undetermin": 544, "raker": 126, "ram": [42, 43, 44, 45, 887], "ran": [777, 891], "random": [36, 37, 135, 150, 157, 205, 248, 312, 465, 514, 583, 614, 619, 691, 777, 789, 1046, 1096, 1139, 1161, 1170, 1249, 1260], "randomli": 158, "rang": [17, 36, 131, 132, 183, 190, 204, 217, 312, 328, 389, 395, 403, 413, 418, 419, 421, 434, 435, 470, 700, 705, 707, 717, 718, 719, 720, 721, 722, 733, 734, 763, 764, 765, 777, 803, 816, 887, 893, 967, 972, 980, 994, 999, 1000, 1002, 1015, 1016, 1025, 1132, 1260, 1282], "rank": [337, 498, 703, 709, 724, 777, 911, 1080, 1260], "rankmethod": [583, 777, 1139, 1260], "rare": [396, 973], "rather": [219, 312, 458, 534, 548, 580, 592, 674, 777, 821, 887, 1137, 1148, 1224, 1260], "raw": 132, "raw_output": [845, 887], "re": [199, 204, 215, 277, 279, 312, 414, 415, 423, 426, 816, 853, 855, 887, 995, 996, 1004, 1007, 1287], "reach": [648, 649, 674, 1198, 1199, 1224], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 312, 390, 458, 767, 777, 804, 887, 1032, 1260], "read_arrow_batches_from_odbc": 131, "read_clipboard": [32, 312], "read_csv": [128, 134, 143], "read_csv_batch": 125, "read_databas": 132, "read_database_uri": 131, "read_excel": 140, "read_ndjson": 138, "read_od": 134, "read_opt": 134, "read_parquet": 148, "read_tabl": 141, "readabl": 773, "reader": [41, 45, 125, 129, 130, 135, 137, 141, 312, 887], "readi": 881, "readthedoc": [36, 312], "real": [638, 1188], "realli": [387, 631, 652, 777, 965, 1181, 1202, 1260], "realloc": [139, 143, 146, 147, 192, 312, 1032, 1260], "rearrang": [222, 312], "reason": [165, 183, 312, 526, 534, 777, 803, 887], "receiv": [47, 131, 143, 222, 236, 298, 312, 535, 577, 777, 833, 887, 1290], "recent": [152, 153, 154, 155, 270, 312, 574, 588, 777, 1132, 1144, 1241, 1260, 1272, 1287], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 192, 312, 777, 952, 1032, 1042, 1122, 1260], "recognis": [15, 16, 20, 893], "recommend": [36, 165, 183, 216, 220, 236, 312, 794, 803, 887, 893], "record": [33, 38, 42, 126, 137, 149, 312, 887], "record_batch": [217, 312], "recordbatch": [116, 217, 312, 756, 1270, 1272, 1287], "recurs": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "red": [46, 84, 85, 298, 691, 777, 871, 1249, 1260], "redempt": 1269, "redshift": 132, "reduc": [45, 129, 130, 139, 141, 143, 146, 147, 148, 246, 299, 300, 302, 305, 312, 618, 714, 727, 777, 872, 873, 875, 878, 887, 1118, 1136, 1168, 1231, 1260], "reduct": [197, 312, 535, 777], "ref": [637, 639, 1187, 1189], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 184, 312, 316, 390, 423, 426, 583, 637, 650, 651, 664, 666, 667, 671, 777, 804, 887, 1004, 1007, 1139, 1200, 1201, 1214, 1216, 1217, 1221, 1260], "referenc": [36, 312, 534, 677, 777, 1270, 1287], "refin": 134, "reg": 126, "regard": [129, 709], "regardless": [121, 175, 203, 219, 275, 312, 372, 400, 645, 686, 767, 777, 793, 821, 852, 887, 977, 1195], "regex": [446, 541, 542, 630, 632, 637, 638, 639, 641, 650, 651, 675, 725, 777, 893, 1180, 1182, 1187, 1188, 1189, 1191, 1200, 1201], "regexp_lik": 1280, "region": [36, 145, 312], "regist": [1, 48, 49, 50, 51, 162, 164, 259, 312, 777, 848, 887, 891, 1269, 1270, 1272, 1273, 1274, 1275, 1287, 1289], "register_dataframe_namespac": [1, 49, 50, 51], "register_expr_namespac": [1, 48, 50, 51], "register_glob": [1271, 1273, 1275, 1287], "register_lazyframe_namespac": [1, 48, 49, 51], "register_mani": [1271, 1272, 1275], "register_plugin": 777, "register_plugin_funct": [777, 891], "register_series_namespac": [1, 48, 49, 50], "registr": [259, 312, 756, 789, 848, 887, 1275, 1287], "regrid": [470, 777], "regular": [124, 216, 245, 246, 282, 289, 312, 446, 630, 631, 632, 637, 638, 639, 640, 641, 650, 651, 652, 705, 725, 773, 777, 863, 887, 893, 1180, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1200, 1201, 1202, 1285], "reinterpret": [777, 1260], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 312, 417, 442, 444, 445, 691, 777, 998, 1026, 1028, 1029, 1249, 1260], "relat": [131, 168, 650, 651, 893, 1200, 1201, 1276], "releas": [54, 535, 777, 799, 887, 1290], "release_year": 1269, "relev": 55, "reliabl": [84, 85], "remain": [129, 130, 143, 187, 190, 195, 237, 312, 393, 394, 452, 497, 587, 656, 657, 777, 806, 812, 825, 887, 970, 971, 1025, 1036, 1079, 1143, 1206, 1207, 1260, 1275], "remaind": [657, 1207, 1281], "remap": 86, "remot": [129, 130, 135, 137], "remov": [4, 129, 130, 143, 172, 185, 267, 312, 446, 557, 659, 660, 661, 662, 663, 725, 777, 805, 887, 1209, 1210, 1211, 1212, 1213, 1236, 1260, 1289], "removes_pronoun": 652, "renam": [1, 119, 129, 130, 166, 203, 250, 251, 286, 287, 291, 293, 312, 323, 458, 549, 550, 556, 557, 558, 559, 561, 563, 564, 677, 678, 755, 759, 777, 815, 840, 841, 859, 860, 864, 866, 887, 899, 1191, 1228, 1237, 1260, 1287], "rename_field": [656, 657, 1206, 1207], "render": [845, 887], "render_as_str": 131, "reoconstruct": [247, 312], "repeat": [135, 146, 584, 586, 749, 768, 777], "repeat_bi": 777, "replac": [34, 35, 129, 130, 143, 193, 194, 242, 276, 279, 286, 287, 312, 315, 399, 420, 450, 534, 535, 588, 651, 652, 667, 777, 810, 855, 859, 860, 887, 976, 1001, 1034, 1144, 1162, 1164, 1201, 1202, 1217, 1260, 1265, 1280], "replace_al": [588, 650, 777, 1143, 1144, 1200, 1260], "replace_column": 312, "replace_strict": [587, 777, 1143, 1260], "replace_time_zon": [396, 402, 404, 978, 979, 1005], "replace_with": [652, 1202], "replic": [684, 777, 1243, 1260], "report": 131, "repr": 123, "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 237, 259, 260, 269, 270, 283, 290, 312, 456, 479, 480, 522, 528, 534, 628, 642, 647, 654, 665, 692, 695, 709, 711, 723, 725, 737, 738, 739, 748, 753, 754, 758, 766, 773, 777, 848, 849, 857, 887, 893, 1162, 1178, 1192, 1197, 1204, 1215, 1241, 1250, 1260, 1287], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 252, 268, 312, 398, 403, 406, 408, 409, 410, 411, 412, 413, 416, 418, 419, 422, 435, 436, 438, 547, 684, 777, 808, 823, 842, 887, 948, 975, 980, 983, 984, 985, 989, 990, 991, 993, 994, 997, 999, 1000, 1003, 1016, 1017, 1019, 1238, 1243, 1260], "requested_schema": [171, 896], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 181, 245, 269, 270, 271, 274, 312, 362, 442, 444, 445, 527, 535, 573, 618, 664, 666, 667, 688, 752, 777, 801, 807, 847, 858, 887, 936, 1024, 1026, 1028, 1029, 1109, 1168, 1214, 1216, 1217, 1241, 1242, 1246, 1260], "require_al": 893, "rerais": [54, 799, 887], "rerun": [192, 312, 1032, 1260], "resampl": [204, 312, 816, 887], "reset": [4, 168], "reset_index": [121, 204, 312, 816, 887], "reshap": [237, 270, 312, 499, 777, 1081, 1260], "resolv": [399, 800, 801, 807, 839, 858, 887], "resourc": 891, "respect": [36, 312, 631, 640, 652, 893, 1181, 1190, 1202, 1244, 1260], "respons": [132, 229, 312, 830, 887], "rest": [672, 1222], "restor": [168, 312, 315, 1260, 1265], "restore_default": 168, "restrict": [30, 657, 1207], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 192, 195, 204, 205, 218, 219, 233, 237, 244, 247, 252, 253, 255, 269, 270, 271, 282, 289, 291, 297, 312, 395, 421, 423, 426, 434, 442, 443, 444, 445, 449, 456, 465, 472, 484, 525, 526, 534, 535, 547, 573, 578, 580, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 616, 617, 636, 655, 656, 667, 687, 691, 713, 714, 718, 720, 721, 722, 723, 737, 738, 749, 752, 753, 754, 756, 768, 777, 794, 798, 803, 812, 816, 820, 821, 825, 834, 838, 842, 843, 844, 863, 864, 870, 881, 882, 887, 893, 902, 1002, 1004, 1007, 1015, 1026, 1028, 1029, 1032, 1033, 1046, 1052, 1067, 1107, 1116, 1135, 1137, 1143, 1144, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1165, 1167, 1186, 1205, 1206, 1217, 1241, 1242, 1249, 1260, 1270, 1276, 1287, 1288, 1290], "resultset": 131, "retri": [139, 141, 143, 146, 147, 148], "retriev": [199, 269, 312, 342, 343, 491, 492, 675, 748, 916, 917, 1073, 1074, 1225, 1239, 1260, 1276], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 165, 166, 170, 173, 175, 177, 180, 181, 182, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 220, 221, 222, 224, 226, 231, 232, 233, 235, 236, 237, 241, 244, 245, 246, 247, 248, 252, 259, 262, 263, 269, 270, 271, 274, 275, 276, 277, 282, 285, 286, 287, 293, 295, 297, 298, 301, 306, 312, 324, 326, 329, 330, 331, 332, 333, 334, 337, 338, 342, 343, 344, 346, 348, 349, 360, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 380, 381, 382, 388, 389, 395, 396, 398, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 443, 448, 456, 459, 460, 462, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 491, 492, 494, 499, 501, 503, 504, 505, 507, 514, 524, 525, 532, 534, 535, 545, 547, 548, 553, 577, 580, 582, 586, 587, 588, 589, 591, 592, 614, 615, 620, 621, 622, 629, 630, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 665, 669, 674, 681, 682, 683, 685, 686, 687, 689, 690, 691, 694, 695, 700, 701, 702, 703, 704, 705, 710, 712, 717, 718, 719, 720, 721, 722, 723, 726, 729, 731, 733, 734, 735, 736, 737, 738, 739, 749, 752, 755, 756, 759, 762, 763, 764, 765, 767, 768, 777, 793, 796, 798, 799, 801, 802, 803, 807, 808, 814, 816, 817, 820, 823, 824, 825, 833, 834, 836, 838, 842, 845, 851, 852, 853, 858, 859, 860, 866, 868, 870, 874, 879, 881, 887, 891, 892, 893, 895, 897, 900, 901, 902, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 934, 936, 938, 939, 940, 942, 944, 947, 949, 953, 959, 960, 966, 967, 972, 973, 975, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1025, 1027, 1031, 1032, 1040, 1047, 1048, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1081, 1083, 1085, 1086, 1087, 1089, 1096, 1106, 1107, 1114, 1116, 1121, 1130, 1137, 1143, 1144, 1145, 1146, 1147, 1148, 1161, 1163, 1171, 1179, 1180, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1203, 1204, 1205, 1206, 1207, 1215, 1219, 1224, 1232, 1235, 1242, 1245, 1247, 1248, 1249, 1251, 1260, 1269, 1270, 1274, 1276, 1277, 1278, 1279, 1281, 1282, 1285, 1287, 1288, 1289, 1290], "return_as_str": [202, 312, 548], "return_dtyp": [36, 222, 312, 534, 535, 587, 588, 694, 738, 739, 777, 1116, 1143, 1144, 1260], "return_typ": [269, 274, 312], "returns_scalar": [534, 535, 739, 777, 891], "reus": [53, 54, 798, 799, 808, 834, 845, 887], "revers": [175, 190, 275, 312, 372, 382, 383, 384, 385, 386, 557, 559, 561, 686, 712, 777, 793, 852, 887, 960, 961, 962, 963, 964, 1260, 1278, 1280], "reverse_": 559, "reverse_a": 559, "reverse_b": 559, "revert": [7, 9, 10], "rhap": 640, "rhapsodi": 640, "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 204, 218, 219, 244, 281, 312, 388, 442, 444, 445, 472, 515, 516, 517, 518, 580, 593, 596, 598, 600, 602, 604, 607, 609, 611, 615, 623, 706, 718, 719, 721, 722, 764, 765, 777, 816, 820, 821, 838, 856, 887, 966, 1026, 1028, 1029, 1052, 1097, 1098, 1099, 1100, 1137, 1163, 1174, 1260, 1276, 1280], "right_on": [218, 219, 281, 312, 820, 821, 856, 887], "rightmost": [615, 777, 1163, 1260, 1282], "rld": [659, 661, 1211], "rle": [592, 777, 1148, 1260], "rle_id": [591, 777, 1260], "rle_id_a": [592, 777], "rle_id_ab": [592, 777], "rn": [129, 130, 143], "role": 132, "roll": [204, 312, 395, 414, 415, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 707, 753, 754, 777, 816, 887, 972, 995, 996, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1260], "rollback": [415, 996], "rolled_forward": 395, "rollforward": [414, 995], "rolling_map": [777, 1260], "rolling_max": [777, 1260], "rolling_max_bi": 777, "rolling_mean": [777, 1260], "rolling_mean_bi": 777, "rolling_median": [777, 1260], "rolling_median_bi": 777, "rolling_min": [777, 1260], "rolling_min_bi": 777, "rolling_quantil": [777, 1260], "rolling_quantile_bi": 777, "rolling_row_max": [596, 777], "rolling_row_mean": [598, 777], "rolling_row_median": [600, 777], "rolling_row_min": [602, 777], "rolling_row_quantil": [604, 777], "rolling_row_std": [607, 777], "rolling_row_sum": [609, 777], "rolling_row_var": [611, 777], "rolling_skew": [777, 1260], "rolling_std": [777, 1260], "rolling_std_bi": 777, "rolling_sum": [594, 777, 1149, 1260], "rolling_sum_bi": 777, "rolling_var": [777, 1260], "rolling_var_bi": 777, "rollinggroupbi": [244, 312], "rollinginterpolationmethod": [183, 239, 304, 312, 581, 603, 604, 750, 777, 803, 835, 877, 887, 967, 1138, 1154, 1260], "ronaldo": [637, 1187], "root": [133, 144, 375, 546, 556, 557, 559, 561, 563, 564, 627, 776, 777, 950, 1177, 1260, 1281], "round": [20, 36, 49, 123, 131, 312, 376, 380, 455, 613, 682, 777, 951, 1038, 1160, 1260, 1280], "round_sig_fig": [777, 1260], "round_str": 1002, "round_td": 1002, "rounded_corn": 20, "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 173, 175, 177, 187, 192, 195, 197, 198, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 228, 233, 237, 244, 247, 248, 257, 263, 266, 268, 269, 274, 275, 277, 279, 280, 281, 288, 289, 293, 295, 297, 298, 306, 312, 316, 337, 338, 346, 361, 372, 448, 456, 460, 466, 488, 499, 526, 573, 574, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 624, 626, 636, 644, 681, 686, 700, 703, 708, 710, 727, 731, 733, 734, 736, 751, 753, 754, 762, 767, 777, 793, 796, 798, 806, 812, 813, 814, 816, 817, 820, 821, 822, 824, 825, 829, 846, 851, 852, 853, 855, 856, 862, 863, 866, 868, 870, 871, 879, 887, 897, 911, 920, 1031, 1032, 1040, 1047, 1070, 1081, 1132, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1175, 1186, 1194, 1232, 1260, 1269, 1276, 1278, 1288, 1290], "row_group": [141, 148], "row_group_s": [41, 45, 312, 887], "row_height": [36, 312], "row_index": [36, 312], "row_index_nam": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_nr": [288, 312, 862, 887], "row_tot": [36, 312], "rowname_col": [312, 316], "rows_by_kei": [216, 246, 312], "rowserror": [245, 312], "rowtotalsdefinit": [36, 312], "rpc": 131, "rstrip": 557, "rtol": [152, 153, 154, 155], "rtrim": 1280, "ru": 1282, "rule": [129, 141, 143, 148, 197, 312, 631, 652, 667, 1181, 1202, 1217], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 203, 220, 222, 251, 277, 287, 298, 312, 387, 498, 534, 535, 591, 592, 647, 755, 777, 798, 799, 808, 815, 825, 829, 834, 841, 845, 853, 860, 887, 893, 965, 1080, 1116, 1147, 1148, 1197, 1260, 1287, 1290], "runtimeerror": [270, 312, 1241, 1260], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 222, 298, 312, 639, 887, 891, 1116, 1189, 1260], "s1": [46, 84, 85, 154, 155, 197, 312, 935, 1023, 1024, 1042, 1066, 1075, 1108, 1128, 1140, 1251, 1260], "s2": [1, 46, 84, 85, 154, 155, 197, 312, 935, 952, 969, 1023, 1024, 1042, 1057, 1066, 1075, 1108, 1122, 1128, 1140, 1251, 1260], "s3": [1, 35, 133, 144, 145, 148, 149, 312, 935, 1108, 1260], "s_bar": 1278, "s_dt": [1282, 1283], "s_dt1": 1282, "s_dt2": 1282, "s_foo": 1278, "s_from_str_repr": [1238, 1260], "s_head_5": 642, "s_head_n": 642, "s_tail_5": 665, "s_tail_n": 665, "s_tm": [1282, 1283], "safe": [585, 777, 1141, 1260], "sam": 12, "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 195, 203, 222, 237, 246, 247, 258, 277, 286, 287, 291, 298, 312, 320, 327, 360, 393, 394, 452, 456, 458, 459, 462, 525, 539, 543, 573, 587, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 619, 626, 636, 646, 677, 773, 777, 798, 799, 812, 815, 823, 825, 847, 853, 859, 860, 864, 887, 893, 898, 934, 970, 971, 976, 1107, 1116, 1143, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1186, 1196, 1251, 1260, 1274, 1276, 1283], "samoa": [396, 973], "sampl": [129, 130, 298, 312, 619, 623, 777, 871, 1174, 1260, 1277], "sample_s": [129, 130], "sampled_from": 1290, "sandwich": [200, 312], "sat": [312, 315], "satisfi": [472, 777, 1052, 1260], "saturdai": [204, 312, 816, 887], "save": [2, 3, 6, 204, 219, 244, 282, 312, 396, 404, 417, 421, 434, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 723, 764, 765, 773, 777, 789, 816, 821, 838, 887, 981, 998, 1002, 1015], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [173, 214, 222, 245, 312, 534, 615, 642, 647, 654, 665, 737, 739, 777, 891, 897, 1066, 1163, 1192, 1197, 1204, 1215, 1260], "scale": [28, 63, 190, 312, 369, 535, 577, 668, 777, 893, 1025, 1218, 1260], "scale_negative_even": [577, 777], "scan": [119, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 312, 644, 817, 824, 887, 1194], "scan_csv": [42, 43, 44, 45, 129, 130, 887], "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "scatter": [312, 315, 1260], "scenario": 1260, "schedul": [54, 799, 887], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 177, 178, 179, 185, 188, 190, 217, 220, 222, 229, 233, 270, 274, 312, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 402, 525, 526, 535, 544, 558, 560, 562, 644, 694, 759, 777, 789, 796, 797, 800, 801, 805, 807, 825, 830, 858, 871, 887, 893, 955, 1194, 1260, 1269], "schema_mod": [35, 312], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 217, 270, 312, 887, 893], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 312, 887], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 146, 148, 312, 759, 825, 871, 887], "schindler": 1269, "scientif": [11, 33, 42, 312, 887], "scikit": [274, 312], "scipi": [484, 623, 777, 1067, 1174, 1260], "scope": [168, 788, 893, 1272, 1275, 1287], "score": [36, 237, 312], "script": [312, 315, 1260, 1265], "scroll": [36, 312], "sdiff": 517, "search": [219, 312, 526, 631, 640, 652, 821, 847, 887, 1181, 1190, 1202], "search_sort": [777, 1260], "searchsortedsid": [615, 777, 1163, 1260], "searchstrategi": [156, 158, 159, 160, 161, 163], "season": [650, 651], "sec": [1283, 1290], "second": [33, 42, 139, 143, 146, 147, 152, 153, 154, 155, 204, 219, 244, 282, 312, 406, 409, 411, 412, 416, 417, 421, 433, 434, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 650, 651, 664, 667, 720, 721, 722, 723, 763, 764, 765, 767, 777, 816, 821, 838, 887, 893, 998, 1002, 1014, 1015, 1027, 1200, 1201, 1214, 1217, 1260, 1282, 1283, 1288, 1290], "second_part": [656, 657, 1206, 1207], "seconds_diff": 433, "secret": [145, 148], "section": [237, 312, 630, 637, 638, 641, 650, 651, 718, 719, 721, 722, 764, 765, 1180, 1187, 1188, 1191, 1200, 1201], "secur": [390, 777, 804, 887], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 159, 163, 170, 181, 195, 204, 218, 236, 237, 312, 316, 377, 451, 484, 534, 623, 630, 637, 638, 641, 642, 650, 651, 665, 718, 719, 721, 722, 751, 764, 765, 773, 777, 798, 799, 812, 816, 887, 891, 893, 895, 948, 954, 1067, 1174, 1180, 1187, 1188, 1191, 1192, 1200, 1201, 1215, 1260, 1290], "seed": [150, 205, 248, 312, 465, 514, 583, 614, 619, 777, 1046, 1096, 1139, 1161, 1170, 1260], "seed_1": [205, 312, 465, 777, 1046, 1260], "seed_2": [205, 312, 465, 777, 1046, 1260], "seed_3": [205, 312, 465, 777, 1046, 1260], "seen": [364, 457, 777], "seen_group": 130, "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 173, 174, 214, 215, 219, 222, 233, 236, 245, 251, 257, 259, 272, 278, 282, 289, 312, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 346, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 387, 389, 391, 392, 393, 394, 397, 399, 400, 408, 414, 415, 417, 420, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 442, 444, 445, 446, 447, 448, 449, 453, 455, 457, 460, 464, 465, 466, 467, 468, 469, 470, 473, 474, 477, 483, 484, 485, 487, 488, 498, 499, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 541, 551, 553, 555, 556, 558, 560, 562, 565, 566, 570, 571, 572, 573, 575, 576, 579, 581, 582, 583, 584, 585, 586, 589, 590, 591, 594, 605, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 636, 637, 638, 639, 640, 641, 643, 664, 675, 677, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 695, 697, 699, 702, 703, 704, 707, 709, 710, 711, 712, 715, 722, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 740, 742, 744, 745, 747, 748, 751, 752, 756, 757, 758, 759, 760, 762, 766, 773, 777, 792, 798, 801, 821, 833, 841, 846, 848, 854, 861, 863, 887, 893, 897, 1001, 1039, 1080, 1162, 1164, 1175, 1195, 1214, 1260, 1269, 1270, 1271, 1272, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289], "select_from": [158, 161, 163], "select_seq": [312, 887], "selector": [0, 36, 176, 185, 187, 191, 228, 235, 237, 258, 267, 269, 274, 277, 279, 280, 312, 316, 446, 452, 541, 777, 789, 795, 805, 806, 809, 829, 847, 853, 855, 887], "selectortyp": [36, 312, 893], "self": [1, 48, 49, 50, 51, 53, 54, 259, 290, 312, 756, 777, 798, 799, 808, 834, 845, 848, 861, 887, 902, 945, 955, 960, 1032, 1036, 1049, 1114, 1116, 1129, 1133, 1134, 1140, 1143, 1144, 1162, 1164, 1165, 1176, 1248, 1251, 1260, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287], "semi": [126, 218, 312, 820, 887, 1276], "semigraph": 20, "sens": [129, 135, 137, 229, 282, 312, 573, 777, 830, 887], "sensit": [630, 638, 641, 650, 651, 1180, 1188, 1191, 1200, 1201], "sep": 126, "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 235, 237, 267, 276, 278, 312, 346, 349, 499, 505, 535, 636, 708, 713, 714, 777, 854, 887, 920, 923, 1081, 1087, 1186, 1230, 1236, 1260, 1282], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [36, 41, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 175, 183, 191, 192, 218, 219, 228, 233, 235, 236, 237, 247, 258, 267, 269, 274, 275, 279, 280, 281, 282, 312, 361, 372, 388, 459, 476, 526, 534, 577, 580, 587, 588, 626, 652, 662, 663, 677, 686, 703, 713, 714, 727, 729, 738, 739, 748, 751, 757, 777, 793, 803, 809, 820, 821, 829, 833, 847, 852, 855, 856, 887, 893, 935, 966, 967, 1032, 1108, 1137, 1143, 1144, 1202, 1228, 1260], "sequenti": [53, 54, 251, 287, 312, 798, 799, 808, 834, 841, 845, 860, 887], "ser": [978, 979, 1005], "seri": [0, 1, 11, 25, 36, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 152, 154, 155, 159, 173, 186, 195, 197, 199, 201, 204, 205, 208, 209, 211, 213, 215, 224, 226, 231, 242, 244, 248, 262, 265, 268, 270, 272, 273, 292, 312, 327, 338, 361, 365, 374, 376, 420, 449, 452, 455, 459, 460, 469, 474, 476, 477, 479, 480, 481, 482, 493, 499, 501, 526, 532, 534, 535, 583, 584, 585, 586, 587, 588, 593, 594, 605, 616, 618, 642, 652, 664, 665, 666, 667, 671, 675, 685, 690, 700, 704, 713, 714, 718, 719, 721, 722, 727, 729, 733, 734, 737, 738, 739, 749, 751, 752, 755, 756, 759, 764, 765, 768, 777, 789, 812, 816, 838, 865, 887, 891, 1252, 1254, 1256, 1259, 1261, 1264, 1265, 1266, 1267, 1268, 1270, 1272, 1287, 1290], "serial": [39, 40, 184, 312, 390, 550, 777, 804, 887], "serializ": [777, 891], "serializationformat": [184, 252, 312, 390, 547, 777, 804, 842, 887], "seriesplot": [1260, 1265], "server": [34, 131, 132, 312], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "session": 131, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 172, 180, 187, 196, 199, 203, 205, 216, 219, 226, 228, 246, 248, 250, 252, 257, 262, 267, 269, 270, 274, 276, 277, 279, 280, 281, 286, 312, 324, 326, 348, 349, 361, 377, 388, 420, 437, 465, 476, 501, 503, 505, 514, 515, 516, 517, 518, 520, 526, 534, 535, 541, 547, 577, 580, 587, 588, 594, 595, 597, 599, 601, 603, 606, 608, 610, 614, 619, 623, 624, 629, 643, 644, 650, 651, 654, 659, 660, 661, 662, 663, 664, 666, 667, 671, 691, 695, 697, 700, 704, 708, 718, 719, 720, 721, 722, 723, 733, 734, 737, 749, 752, 753, 754, 759, 764, 765, 767, 768, 777, 789, 798, 799, 806, 808, 815, 820, 821, 825, 829, 840, 842, 846, 853, 855, 856, 859, 871, 887, 891, 900, 901, 922, 923, 935, 939, 954, 966, 1001, 1018, 1037, 1046, 1057, 1064, 1083, 1085, 1087, 1096, 1097, 1098, 1099, 1100, 1102, 1108, 1116, 1137, 1143, 1144, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1161, 1162, 1163, 1170, 1174, 1175, 1179, 1193, 1194, 1200, 1201, 1204, 1209, 1210, 1211, 1214, 1216, 1217, 1221, 1241, 1249, 1260, 1286, 1290], "set_": 168, "set_ascii_t": 168, "set_auto_structifi": [250, 286, 312, 840, 859, 887], "set_decimal_separ": 27, "set_environ": 162, "set_except": [54, 799, 887], "set_fmt_float": 30, "set_fmt_str_length": [631, 640, 652, 1181, 1202], "set_index": [204, 312, 816, 887], "set_legend": [36, 312], "set_sort": [244, 282, 312, 593, 777, 838, 887, 1260], "set_stat": 30, "set_streaming_chunk_s": [798, 887], "set_styl": [36, 312], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 47, "set_tbl_row": 168, "set_tbl_width_char": 652, "set_thousands_separ": 9, "set_titl": [36, 312], "set_verbos": 168, "setosa": [312, 315], "setup": 1290, "sever": [116, 118, 119, 120, 122, 138, 139, 147, 312, 887, 1290], "sfu": 132, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 248, 250, 252, 255, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 551, 552, 553, 554, 555, 556, 557, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 792, 793, 795, 796, 798, 799, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 893, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1121, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1167, 1168, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1230, 1232, 1233, 1234, 1236, 1237, 1238, 1243, 1245, 1246, 1247, 1248, 1249, 1251, 1260, 1269, 1270, 1271, 1272, 1274, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288], "share": [152, 153, 154, 155, 190, 312, 1025, 1260], "shawshank": 1269, "sheet": [36, 134, 140, 312], "sheet1": [36, 312], "sheet_id": [134, 140], "sheet_nam": [134, 140], "sheet_zoom": [36, 312], "sheetnam": [134, 140], "shift": [204, 312, 364, 391, 457, 496, 574, 707, 777, 816, 887, 968, 1078, 1132, 1260], "short": [152, 154], "shorten": [152, 154], "shorter": [129, 130, 143, 526, 733, 734], "shorthand": [312, 315, 1260, 1265], "should": [10, 34, 36, 41, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 185, 216, 219, 222, 245, 246, 247, 258, 266, 267, 278, 298, 312, 322, 387, 390, 437, 443, 446, 479, 480, 498, 535, 547, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 615, 623, 626, 691, 703, 723, 725, 737, 739, 753, 754, 767, 773, 777, 798, 804, 805, 820, 821, 825, 842, 847, 854, 887, 893, 965, 1018, 1027, 1080, 1116, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1163, 1174, 1249, 1260, 1270], "show": [30, 36, 183, 187, 202, 220, 234, 312, 467, 777, 803, 806, 834, 845, 887, 1048, 1260, 1274, 1286], "show_graph": [220, 312, 887], "show_plot": [834, 887], "shrink": [256, 312, 618, 777, 1168, 1169, 1260], "shrink_dtyp": [777, 1260], "shrink_to_fit": [312, 1260], "shuffl": [150, 248, 274, 298, 312, 514, 614, 777, 871, 1096, 1161, 1260], "side": [36, 204, 244, 312, 472, 515, 516, 517, 518, 593, 596, 598, 600, 602, 604, 607, 609, 611, 615, 718, 719, 721, 722, 764, 765, 777, 816, 838, 887, 891, 1052, 1097, 1098, 1099, 1100, 1163, 1260], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 417, 585, 650, 651, 674, 777, 893, 998, 1141, 1200, 1201, 1224, 1260, 1280], "sign_x": 1281, "signed_integ": 893, "signific": [148, 216, 222, 312, 535, 613, 777, 1116, 1160, 1260], "significantli": [134, 222, 298, 312, 1116, 1260, 1290], "silenc": 91, "silent": [669, 1219], "similar": [32, 41, 128, 165, 197, 219, 255, 277, 279, 312, 356, 423, 426, 519, 573, 617, 678, 736, 767, 777, 821, 844, 853, 855, 887, 930, 1004, 1007, 1101, 1167, 1260], "similarli": [36, 119, 204, 219, 244, 282, 312, 417, 421, 434, 593, 596, 598, 600, 602, 604, 607, 609, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 998, 1002, 1015], "simpl": [36, 233, 312], "simpler": 893, "simpli": [143, 713, 727], "simplifi": [42, 43, 44, 45, 53, 54, 798, 799, 808, 834, 845, 887], "simplify_express": [42, 43, 44, 45, 53, 54, 798, 799, 808, 834, 845, 887], "sin": [777, 1260, 1280], "sinc": [35, 61, 62, 77, 131, 133, 139, 143, 144, 146, 147, 156, 157, 158, 159, 163, 166, 174, 228, 270, 288, 293, 312, 402, 405, 437, 458, 534, 550, 587, 629, 636, 693, 702, 729, 777, 792, 808, 829, 847, 861, 862, 866, 887, 979, 982, 987, 988, 1018, 1045, 1143, 1179, 1186, 1241, 1260], "sind": 1280, "sine": [331, 332, 534, 621, 622, 777, 905, 906, 1172, 1173, 1260, 1284], "singl": [36, 41, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 146, 157, 176, 185, 186, 187, 192, 199, 205, 214, 222, 235, 245, 247, 258, 269, 270, 312, 345, 377, 395, 417, 459, 462, 465, 495, 501, 534, 535, 584, 587, 589, 591, 626, 629, 642, 643, 647, 654, 665, 693, 703, 707, 708, 734, 738, 739, 757, 765, 773, 777, 795, 798, 799, 805, 806, 847, 887, 893, 919, 954, 972, 998, 1032, 1046, 1077, 1083, 1140, 1143, 1145, 1147, 1179, 1192, 1193, 1197, 1204, 1215, 1235, 1241, 1260, 1271], "singlecolselector": 173, "singleindexselector": [173, 897], "sinh": [777, 1260], "sink_csv": 887, "sink_ipc": 887, "sink_ndjson": 887, "sink_parquet": 887, "site_id": [312, 316], "six": [615, 777], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 190, 280, 312, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 700, 733, 734, 753, 754, 777, 798, 887, 1025, 1145, 1155, 1260, 1290], "sizeunit": [190, 312, 369, 942, 1025, 1260], "skew": [605, 777, 1155, 1260], "skewtest": [623, 777, 1174, 1260], "skip": [129, 130, 134, 141, 143, 148, 219, 280, 312, 821, 887, 1116, 1260, 1276], "skip_empty_lin": 134, "skip_nul": [535, 777, 1116, 1260], "skip_row": [129, 130, 143], "skip_rows_after_head": [129, 130, 143], "sklearn": [274, 312], "slice": [42, 43, 44, 45, 48, 53, 54, 190, 206, 217, 263, 312, 504, 524, 535, 544, 546, 594, 595, 597, 599, 601, 603, 606, 608, 610, 642, 665, 777, 798, 799, 808, 825, 834, 845, 887, 891, 1025, 1047, 1086, 1106, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1192, 1215, 1232, 1260, 1282], "slice_pushdown": [42, 43, 44, 45, 53, 54, 798, 799, 808, 825, 834, 845, 887], "slide": [387, 777, 965, 1260], "slightli": [42, 43, 44, 45, 87, 456, 777, 887, 1283], "slot": [387, 391, 496, 777, 965, 968, 1078, 1260], "slow": [103, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 148, 312, 387, 535, 594, 644, 777, 871, 887, 965, 1149, 1194, 1260], "slower": [120, 122, 134, 203, 222, 235, 282, 298, 312, 535, 739, 777, 815, 871, 887, 1116, 1260], "small": [11, 132, 421, 887, 1290], "smaller": [41, 45, 190, 312, 887, 1025, 1260], "smallest": [175, 275, 312, 371, 372, 686, 777, 793, 852, 887, 944, 1260, 1277, 1279], "smooth": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "snappi": [31, 41, 45, 312, 887], "snippet": [806, 887], "snowflak": [131, 132], "snowi": [650, 651], "so": [1, 36, 132, 143, 165, 202, 204, 237, 244, 312, 338, 348, 390, 456, 472, 503, 526, 535, 593, 650, 651, 652, 659, 660, 661, 675, 777, 804, 816, 838, 887, 893, 922, 1085, 1200, 1201, 1202, 1209, 1210, 1211], "softwar": [32, 128, 312], "solut": [34, 312], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 143, 172, 187, 237, 247, 270, 312, 316, 773, 806, 887, 1057, 1260, 1290], "some_account": [638, 1188], "some_t": 1289, "someth": [534, 777], "sometim": [723, 776], "somewher": [638, 1188], "sort": [47, 48, 175, 204, 219, 229, 236, 237, 244, 253, 275, 282, 295, 306, 312, 337, 371, 372, 443, 452, 535, 573, 593, 616, 626, 685, 686, 691, 693, 703, 718, 721, 739, 777, 793, 808, 816, 821, 830, 833, 834, 838, 843, 845, 852, 868, 879, 887, 893, 911, 944, 1027, 1064, 1165, 1245, 1246, 1249, 1260, 1276, 1288, 1290], "sort_bi": [573, 777], "sort_column": [237, 312], "sorted_asc": [1037, 1260], "sorted_desc": [1037, 1260], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 887, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1260, 1265, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1287], "source_ac": 123, "source_actor_id": 123, "source_alia": [35, 312], "source_cha": 123, "source_channel_id": 123, "space": [20, 204, 312, 816, 887, 893], "spam": [225, 312, 638, 1188], "span": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "spanner": [312, 316], "spark": [41, 312], "sparklin": [36, 312], "speak": [623, 777, 1174, 1260], "spearman": 709, "speci": [312, 315], "special": [34, 129, 130, 132, 143, 274, 289, 312, 594, 638, 650, 651, 777, 863, 887, 1116, 1149, 1188, 1200, 1201, 1260], "specif": [1, 30, 35, 36, 37, 38, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 147, 176, 216, 218, 264, 269, 312, 423, 426, 664, 666, 667, 671, 691, 777, 795, 820, 887, 892, 893, 1004, 1007, 1214, 1216, 1217, 1221, 1235, 1239, 1249, 1260, 1276, 1287, 1290], "specifi": [33, 35, 36, 41, 42, 47, 88, 91, 94, 109, 112, 129, 134, 140, 143, 160, 175, 176, 190, 191, 194, 199, 203, 204, 218, 235, 237, 244, 245, 247, 250, 251, 255, 258, 269, 275, 278, 286, 287, 291, 312, 372, 377, 442, 444, 445, 446, 451, 573, 586, 588, 595, 597, 599, 601, 603, 606, 608, 610, 617, 626, 678, 686, 703, 706, 707, 708, 718, 719, 721, 722, 723, 725, 755, 759, 764, 765, 773, 777, 793, 795, 809, 811, 815, 816, 820, 838, 840, 841, 844, 847, 852, 854, 859, 860, 864, 887, 893, 954, 1025, 1026, 1028, 1029, 1035, 1144, 1167, 1239, 1260, 1276, 1289], "speed": [45, 253, 312, 535, 777, 843, 887, 1290], "speedup": [47, 148, 216, 222, 312, 535, 777, 1116, 1260], "split": [1, 36, 41, 48, 217, 312, 636, 656, 657, 1186, 1206, 1207], "split_by_column_dtyp": 50, "split_inclus": 655, "splitfram": [1, 48], "spreadsheet": [32, 128, 134, 140, 237, 312], "spring": [650, 651], "sql": [0, 34, 106, 107, 115, 131, 132, 218, 255, 312, 356, 519, 617, 736, 757, 777, 789, 844, 887, 930, 1101, 1167, 1260, 1269, 1270, 1272, 1274, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1288, 1289], "sql_expr": 1287, "sqlalchemi": [34, 131, 151, 312], "sqlcontext": [259, 312, 756, 848, 887, 1286], "sqlite": [34, 131, 312], "sqrt": [535, 623, 678, 777, 1116, 1174, 1260, 1280], "sqrt_x": 1281, "squar": [1, 51, 298, 484, 589, 627, 777, 871, 1067, 1145, 1177, 1260, 1281], "st": 1290, "stabil": [205, 312, 465, 777, 1046, 1260], "stabl": [141, 170, 181, 183, 184, 205, 248, 252, 259, 312, 390, 465, 531, 547, 777, 803, 804, 829, 842, 847, 848, 887, 895, 1046, 1260], "stack": [55, 208, 284, 312, 1270], "stai": [534, 619, 777], "standalon": [157, 893], "standard": [10, 36, 260, 269, 274, 312, 408, 444, 606, 607, 623, 628, 645, 758, 773, 777, 849, 887, 985, 1023, 1028, 1128, 1174, 1178, 1195, 1260, 1277, 1290], "standardis": [36, 312], "start": [36, 127, 129, 130, 132, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 165, 198, 203, 204, 220, 257, 282, 288, 289, 312, 365, 368, 370, 395, 403, 413, 418, 421, 434, 435, 446, 460, 502, 520, 592, 596, 598, 600, 602, 604, 607, 609, 611, 624, 630, 635, 638, 649, 654, 658, 659, 661, 662, 665, 674, 700, 705, 713, 717, 718, 719, 720, 721, 722, 725, 727, 733, 734, 764, 765, 767, 773, 777, 814, 815, 816, 834, 846, 862, 863, 887, 893, 943, 972, 974, 977, 980, 982, 983, 989, 991, 993, 994, 997, 999, 1002, 1006, 1015, 1016, 1040, 1084, 1102, 1148, 1175, 1185, 1188, 1199, 1204, 1208, 1209, 1211, 1215, 1224, 1260, 1276, 1282, 1290], "start_bi": [204, 312, 816, 887], "startbi": [204, 312, 816, 887], "starts_a": 1282, "starts_with": [48, 237, 312, 316, 365, 368, 541, 630, 635, 756, 848, 887, 893, 1185, 1280], "starts_with_expr": 370, "starts_with_lit": 370, "startup": [269, 312], "stat": [484, 623, 777, 1067, 1174, 1260], "state": [4, 5, 99, 713, 789, 808, 834, 845, 887, 1287], "statement": [767, 1274, 1288], "static": [82, 871], "statist": [41, 45, 129, 130, 141, 146, 148, 183, 312, 444, 445, 484, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 623, 777, 803, 887, 967, 1028, 1029, 1067, 1155, 1174, 1260], "std": [183, 312, 606, 607, 777, 803, 887, 967, 1156, 1260], "std_dev": [36, 312], "stddev": 1280, "stddev_samp": 1277, "stdev": [36, 312, 1277], "stdev_samp": 1277, "stdout": [168, 202, 312, 548], "step": [280, 312, 456, 700, 733, 734, 777], "steve": [229, 312, 830, 887], "still": [131, 132], "stock": [312, 315], "stop": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 596, 598, 600, 602, 604, 607, 609, 611, 777, 974, 977, 982, 983, 989, 991, 993, 997, 1002, 1006], "storag": [35, 129, 133, 135, 137, 144, 145, 312], "storage_opt": [35, 129, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 312], "store": [35, 129, 145, 192, 216, 246, 312, 374, 591, 777, 946, 1032, 1147, 1260], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 175, 176, 180, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 197, 199, 200, 202, 203, 204, 206, 208, 211, 213, 214, 216, 218, 219, 221, 223, 225, 227, 228, 229, 230, 232, 233, 235, 237, 239, 241, 242, 243, 244, 245, 246, 248, 252, 253, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 321, 322, 323, 344, 349, 361, 365, 366, 367, 368, 370, 372, 374, 382, 388, 390, 392, 400, 417, 420, 421, 423, 426, 434, 443, 446, 452, 454, 458, 459, 462, 469, 472, 493, 494, 503, 504, 505, 520, 524, 526, 535, 544, 546, 547, 548, 550, 557, 558, 559, 560, 561, 562, 563, 564, 570, 573, 577, 580, 586, 587, 588, 590, 592, 593, 596, 598, 600, 602, 604, 607, 609, 611, 618, 625, 626, 675, 676, 677, 686, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 707, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 773, 777, 784, 793, 795, 798, 799, 801, 803, 804, 805, 806, 808, 809, 812, 815, 816, 818, 820, 821, 829, 830, 833, 834, 836, 837, 838, 842, 843, 845, 846, 847, 848, 852, 853, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 891, 892, 893, 899, 918, 923, 935, 940, 945, 946, 966, 967, 977, 998, 1001, 1002, 1004, 1007, 1015, 1027, 1035, 1037, 1075, 1076, 1087, 1108, 1124, 1125, 1126, 1137, 1142, 1143, 1144, 1164, 1225, 1227, 1228, 1236, 1237, 1238, 1239, 1249, 1260, 1266, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1282, 1283, 1287, 1288, 1290], "str_date": 1282, "str_timestamp": 1282, "strategi": [33, 42, 47, 55, 129, 148, 156, 157, 158, 159, 160, 161, 163, 194, 204, 218, 219, 232, 281, 312, 451, 526, 535, 777, 811, 816, 820, 821, 856, 887, 1035, 1108, 1260], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 203, 218, 277, 312, 534, 777, 798, 799, 808, 815, 820, 825, 829, 834, 845, 847, 853, 887], "streamabl": [825, 829, 855, 887], "strftime": [87, 426, 1007, 1280, 1282], "strict": [118, 119, 122, 126, 176, 185, 312, 366, 373, 630, 633, 641, 664, 666, 667, 669, 671, 777, 795, 805, 887, 893, 939, 945, 1180, 1183, 1191, 1214, 1216, 1217, 1219, 1221, 1260], "strictli": [33, 42, 46, 85, 312, 887], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 175, 176, 179, 184, 188, 190, 197, 199, 202, 203, 204, 219, 235, 237, 244, 247, 249, 250, 251, 252, 258, 268, 269, 275, 276, 280, 282, 286, 287, 291, 312, 321, 344, 349, 366, 367, 368, 372, 390, 417, 421, 423, 426, 434, 443, 446, 454, 458, 472, 505, 547, 548, 573, 577, 587, 588, 593, 596, 598, 600, 602, 604, 607, 609, 611, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 686, 694, 696, 698, 703, 706, 707, 708, 716, 718, 719, 721, 722, 728, 741, 743, 746, 755, 759, 761, 764, 765, 767, 773, 777, 789, 793, 795, 800, 804, 807, 808, 815, 816, 821, 838, 839, 840, 841, 842, 847, 852, 859, 860, 864, 887, 892, 893, 923, 939, 940, 941, 947, 998, 1002, 1004, 1007, 1015, 1027, 1052, 1087, 1143, 1144, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1238, 1239, 1260, 1269, 1270, 1278, 1280, 1283, 1286, 1290], "stringcach": [84, 85, 218, 312, 789, 947, 948], "stringio": [138, 139, 458, 777], "strings_hex": 634, "strip": [28, 659, 660, 661, 662, 663, 1209, 1210, 1211, 1282], "strip_chars_end": [661, 663], "strip_chars_start": [660, 662], "strip_prefix": [661, 663], "strip_suffix": [660, 662], "strongli": [36, 165, 222, 245, 298, 312, 535, 777, 1116, 1260], "strpo": 1280, "strpost": 1282, "strptime": [244, 312, 420, 593, 777, 838, 887, 1001, 1280], "struct": [8, 112, 123, 233, 250, 273, 278, 286, 312, 361, 388, 467, 526, 534, 535, 558, 560, 562, 580, 591, 592, 639, 644, 656, 657, 691, 713, 714, 716, 738, 777, 840, 854, 859, 871, 887, 935, 966, 1108, 1116, 1137, 1147, 1189, 1194, 1206, 1207, 1241, 1260], "struct_col": [675, 677], "struct_seri": 871, "structarrai": [190, 312, 1025, 1260], "structfieldnotfounderror": 677, "structur": [36, 37, 38, 93, 96, 110, 126, 192, 236, 247, 264, 270, 312, 577, 777, 833, 887, 1032, 1235, 1260, 1287], "student": [237, 312], "style": [7, 20, 36, 131, 237, 312], "sub": [298, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 363, 505, 512, 777, 916, 917, 918, 921, 922, 923, 924, 925, 926, 927, 928, 932, 933, 937, 1087, 1094], "subarrai": [340, 341, 914, 915], "subclass": [1, 312], "subexpress": [53, 54, 798, 799, 808, 834, 845, 887], "subject": [41, 237, 312], "sublist": [348, 491, 492, 494, 496, 500, 501, 502, 503, 504, 505, 506, 515, 520, 524, 526, 922, 1057, 1073, 1074, 1076, 1078, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1097, 1102, 1106, 1108, 1260], "subplan": [53, 54, 798, 799, 808, 834, 845, 887], "subsequ": [36, 240, 271, 312, 526, 756, 767, 808, 887, 1242, 1260, 1275], "subset": [187, 233, 277, 312, 806, 853, 887], "substr": [365, 368, 370, 630, 635, 641, 650, 651, 654, 655, 656, 657, 658, 893, 938, 941, 943, 1180, 1185, 1191, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1280], "subtl": [36, 312], "subtli": [456, 777], "subtract": [484, 679, 777, 1067, 1260], "succe": [129, 130, 143], "success": [632, 638, 1182, 1188], "successfulli": [798, 887], "suffix": [218, 219, 250, 286, 291, 312, 323, 368, 372, 479, 480, 481, 482, 540, 557, 559, 562, 563, 564, 573, 590, 635, 660, 663, 686, 777, 820, 821, 840, 859, 861, 864, 887, 893, 941, 1185, 1213], "suffix_field": [558, 560], "sugar": [281, 312, 587, 588, 652, 695, 697, 699, 710, 712, 715, 725, 730, 731, 732, 740, 742, 744, 745, 747, 749, 750, 755, 758, 760, 762, 766, 768, 777, 856, 887, 1143, 1144, 1177, 1202, 1260], "suitabl": [47, 55, 131, 157, 222, 312, 535, 615, 777, 1116, 1163, 1260], "sum": [36, 190, 197, 203, 204, 214, 237, 244, 262, 291, 312, 385, 386, 390, 439, 452, 526, 535, 544, 546, 547, 548, 549, 587, 588, 593, 608, 609, 693, 695, 713, 715, 716, 727, 739, 751, 761, 777, 798, 799, 804, 808, 815, 816, 832, 834, 838, 842, 845, 864, 887, 891, 893, 963, 964, 1021, 1025, 1157, 1260, 1269, 1276, 1278, 1280, 1287], "sum_": [623, 777, 1174, 1260], "sum_a": [244, 312, 593, 777, 838, 887], "sum_horizont": [47, 312, 760], "summari": [183, 312, 803, 887, 967, 1260, 1276], "summer": [650, 651], "sun": [312, 315, 664, 1214], "sundai": [204, 312, 395, 423, 426, 436, 705, 816, 887, 972, 1004, 1007, 1017], "sunni": [650, 651, 1200, 1201], "supercast": [197, 312], "supertyp": [55, 194, 270, 274, 312, 327, 707, 777, 811, 887, 891, 1260], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 195, 245, 269, 312, 452, 577, 777, 812, 887, 1239, 1260], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 156, 160, 163, 168, 216, 217, 218, 219, 246, 247, 257, 258, 266, 271, 274, 312, 443, 520, 573, 587, 588, 624, 626, 631, 640, 642, 650, 651, 652, 654, 665, 773, 777, 783, 798, 820, 821, 846, 847, 887, 893, 1027, 1102, 1143, 1144, 1175, 1181, 1190, 1192, 1200, 1201, 1202, 1204, 1215, 1242, 1244, 1260, 1264, 1278, 1282, 1283, 1285, 1286, 1287], "supportsinterchang": 117, "suppos": [173, 237, 312, 535, 777, 1116, 1260], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 240, 312, 777, 891], "surreal": 131, "surreal_query_to_fram": 131, "surrealdb": 131, "surrealhttp": 131, "surrealql": 131, "suscept": 887, "swap": [836, 887], "swim": 708, "switch": [396, 798, 887, 973], "sy": 168, "sydnei": 720, "symbol": [32, 33, 42, 312, 777, 887], "symmetr": [517, 893, 1099], "symmetri": [801, 807, 839, 858, 887], "synchron": 882, "syntact": [281, 312, 587, 588, 652, 695, 697, 699, 710, 712, 715, 725, 730, 731, 732, 740, 742, 744, 745, 747, 749, 750, 755, 758, 760, 762, 766, 768, 777, 856, 887, 1143, 1144, 1177, 1202, 1260], "syntax": [36, 107, 195, 222, 233, 312, 630, 637, 638, 641, 650, 651, 733, 734, 773, 812, 845, 887, 1180, 1187, 1188, 1191, 1200, 1201, 1260, 1283, 1285], "system": [32, 129, 130, 312, 400, 798, 887, 977], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 204, 219, 222, 236, 277, 280, 312, 387, 396, 404, 420, 439, 442, 444, 445, 498, 535, 577, 637, 641, 650, 651, 661, 664, 667, 672, 767, 777, 816, 821, 833, 853, 887, 893, 965, 1001, 1021, 1026, 1028, 1029, 1080, 1116, 1187, 1191, 1200, 1201, 1210, 1211, 1214, 1217, 1222, 1260, 1272, 1273, 1282], "t_": [278, 312, 443, 777, 854, 887, 1027, 1260], "t_0": [244, 312, 593, 596, 598, 600, 602, 604, 607, 609, 611, 777, 838, 887], "t_1": [244, 312, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 777, 838, 887, 1027, 1260], "t_2": [443, 777, 1027, 1260], "t_a": [278, 312, 854, 887], "t_b": [278, 312, 854, 887], "t_c": [278, 312, 854, 887], "t_d": [278, 312, 854, 887], "t_i": [443, 777, 1027, 1260], "t_n": [244, 312, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 777, 838, 887, 1027, 1260], "t_struct": [278, 312, 854, 887], "tab_spann": [312, 316], "tab_stub": [312, 316], "tab_styl": [312, 316], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 140, 144, 145, 218, 237, 259, 264, 271, 280, 281, 312, 316, 756, 789, 820, 848, 856, 887, 1270, 1271, 1272, 1273, 1275, 1276, 1286, 1287], "table_nam": [34, 36, 259, 312, 848, 887], "table_path": [35, 133, 144, 145, 312], "table_styl": [36, 312], "tablemerg": [35, 312], "tablenotfounderror": [35, 312], "tables_scale_100": [125, 130], "tail": [202, 206, 312, 327, 623, 777, 887, 1047, 1174, 1260], "take": [36, 126, 134, 140, 159, 160, 168, 197, 198, 204, 226, 229, 236, 237, 241, 312, 337, 395, 417, 452, 459, 460, 501, 502, 534, 558, 560, 562, 626, 703, 705, 724, 726, 735, 777, 814, 816, 830, 836, 887, 911, 972, 998, 1039, 1040, 1083, 1084, 1251, 1260, 1278], "taken": [520, 654, 1102, 1204], "talkin": [672, 1222], "tan": [777, 1260, 1280], "tand": 1280, "tangent": [333, 334, 682, 683, 777, 907, 908, 1233, 1234, 1260, 1284], "tanh": [237, 312, 777, 1260], "target": [1, 34, 35, 36, 52, 134, 274, 312, 637, 664, 666, 667, 893, 1187, 1214, 1216, 1217, 1282], "target_alia": [35, 312], "target_t": [34, 312], "task": [54, 799, 887], "tb": [152, 154, 190, 312, 369, 1025, 1260], "tbl": [125, 130, 1289], "tbl0": 1275, "tbl1": [1273, 1275], "tbl2": [1273, 1275], "tbl3": 1273, "tbl4": 1273, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 183, 312, 803, 887], "tbl_width_char": 723, "td1": 893, "td2": 893, "td3": 893, "tdf": [236, 312], "technic": 773, "tell": [631, 652, 1181, 1202], "tempor": [87, 176, 204, 216, 244, 246, 247, 266, 312, 377, 472, 593, 596, 598, 600, 602, 604, 607, 609, 611, 777, 789, 795, 816, 838, 887, 893, 954, 1052, 1260, 1280, 1286], "temporalliter": [377, 777, 954, 987, 988, 1260], "temporari": [34, 312], "temporarili": [165, 168, 204, 244, 312, 593, 777, 816, 838, 887], "tend": [152, 154], "tensor": [274, 312, 1244, 1260], "tensordataset": [274, 312], "term": [442, 444, 445, 642, 654, 665, 777, 1026, 1028, 1029, 1192, 1204, 1215, 1260], "termin": [33, 42, 312, 887], "test": [0, 34, 131, 132, 134, 140, 237, 312, 789, 817, 824, 887], "test1": 1275, "test2": 1275, "test3": 1275, "test_1": [237, 312], "test_1_math": [237, 312], "test_1_phys": [237, 312], "test_2": [237, 312], "test_2_math": [237, 312], "test_2_phys": [237, 312], "test_data": 131, "test_df_height": 159, "test_func": 738, "test_lf": [861, 887], "test_miscellan": 1290, "test_numer": 1290, "test_price_calcul": 1290, "test_series_len": 163, "test_tabl": 132, "test_unique_xyz": 157, "testdb": 132, "testing1234": 1275, "text": [128, 131, 443, 642, 646, 647, 650, 651, 653, 654, 665, 757, 777, 1027, 1192, 1196, 1197, 1203, 1204, 1215, 1260, 1275, 1290], "texttt": [623, 777, 1174, 1260], "th": [198, 312, 460, 502, 515, 623, 642, 665, 777, 814, 887, 1040, 1084, 1097, 1174, 1192, 1215, 1260], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 177, 203, 216, 218, 219, 222, 235, 245, 246, 248, 280, 298, 312, 456, 458, 461, 463, 472, 486, 514, 533, 534, 535, 548, 580, 592, 614, 623, 642, 646, 648, 649, 657, 665, 674, 709, 739, 777, 798, 799, 815, 820, 821, 871, 887, 1052, 1096, 1116, 1137, 1148, 1161, 1174, 1192, 1196, 1198, 1199, 1207, 1215, 1224, 1241, 1260, 1290], "the_aws_access_key_id": [35, 133, 144, 145, 312], "the_aws_region": [35, 312], "the_aws_secret_access_kei": [35, 133, 144, 145, 312], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 219, 220, 247, 312, 652, 660, 661, 777, 798, 821, 887, 891, 893, 1202], "them": [54, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 191, 192, 204, 219, 229, 237, 244, 274, 282, 312, 349, 443, 472, 505, 565, 566, 573, 593, 707, 718, 719, 721, 722, 764, 765, 777, 799, 809, 816, 821, 830, 838, 887, 893, 923, 1027, 1032, 1087, 1125, 1126, 1260, 1278, 1287], "therebi": [143, 146, 147], "therefor": [190, 312, 535, 767, 777, 1025, 1260], "theta": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "thi": [1, 4, 5, 10, 12, 14, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 178, 179, 181, 183, 184, 187, 190, 192, 196, 197, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 227, 228, 229, 230, 232, 233, 235, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 259, 260, 261, 264, 266, 269, 270, 271, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 293, 298, 311, 312, 315, 316, 324, 327, 328, 337, 349, 355, 356, 357, 362, 371, 372, 374, 377, 387, 388, 390, 396, 397, 408, 414, 415, 417, 420, 421, 423, 426, 437, 441, 448, 458, 465, 467, 469, 470, 472, 476, 498, 499, 505, 514, 515, 516, 517, 518, 519, 521, 526, 527, 531, 532, 534, 535, 539, 540, 541, 542, 543, 544, 545, 547, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 573, 580, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 616, 617, 618, 619, 624, 625, 626, 629, 631, 637, 640, 643, 644, 648, 649, 652, 659, 660, 661, 662, 663, 668, 672, 674, 676, 678, 685, 686, 688, 689, 690, 691, 695, 699, 707, 710, 712, 713, 726, 727, 729, 731, 732, 735, 736, 739, 742, 744, 747, 749, 753, 754, 755, 758, 762, 766, 767, 768, 773, 777, 789, 792, 793, 794, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 815, 816, 818, 820, 821, 823, 825, 829, 830, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 852, 853, 855, 856, 858, 859, 860, 861, 862, 863, 866, 871, 885, 886, 887, 891, 893, 895, 902, 911, 923, 929, 930, 931, 936, 944, 946, 948, 949, 954, 955, 965, 966, 973, 974, 976, 985, 995, 996, 998, 1001, 1002, 1004, 1007, 1018, 1020, 1023, 1025, 1031, 1032, 1040, 1042, 1046, 1048, 1057, 1066, 1080, 1081, 1087, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1109, 1114, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1128, 1131, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1175, 1176, 1178, 1179, 1181, 1187, 1190, 1193, 1194, 1198, 1199, 1202, 1209, 1210, 1211, 1218, 1222, 1224, 1225, 1227, 1230, 1231, 1235, 1237, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1248, 1249, 1250, 1260, 1265, 1269, 1270, 1271, 1275, 1282, 1285, 1286, 1287, 1288, 1290], "thing": [143, 150], "think": [414, 415, 995, 996], "third": [534, 777], "thoma": [229, 312, 830, 887], "those": [5, 30, 36, 129, 247, 271, 281, 312, 456, 583, 637, 739, 777, 856, 887, 893, 1139, 1187, 1242, 1260], "though": [34, 131, 204, 312, 773, 816, 887], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 258, 312, 498, 535, 626, 703, 777, 799, 847, 887, 931, 1080, 1103, 1176, 1260], "thread_loc": [535, 777], "thread_pool_s": 166, "threadpool": 53, "three": [36, 173, 244, 273, 312, 388, 580, 593, 615, 642, 665, 777, 838, 887, 935, 966, 1108, 1137, 1192, 1215, 1260], "threshold": [250, 312, 840, 887], "through": [117, 131, 773, 893, 1260, 1275], "throw": [35, 118, 119, 122, 176, 185, 312, 644, 645, 795, 805, 887, 1194, 1195, 1260], "thu": [36, 192, 312, 315, 709, 1032, 1260], "thursdai": [204, 312, 395, 705, 816, 887, 972], "ti": [583, 777, 1139, 1260], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 139, 143, 144, 146, 147, 159, 160, 163, 183, 192, 204, 219, 244, 282, 312, 344, 371, 372, 396, 397, 399, 400, 401, 404, 405, 414, 415, 417, 420, 421, 423, 425, 426, 434, 437, 443, 493, 494, 526, 592, 593, 596, 598, 600, 602, 604, 607, 609, 611, 619, 664, 667, 671, 684, 685, 686, 707, 708, 718, 719, 720, 721, 722, 723, 729, 764, 765, 777, 798, 799, 803, 816, 821, 834, 838, 887, 893, 918, 944, 973, 974, 976, 977, 981, 982, 998, 1001, 1002, 1004, 1006, 1007, 1015, 1018, 1027, 1032, 1075, 1076, 1148, 1170, 1214, 1217, 1221, 1243, 1245, 1260, 1269, 1275, 1283, 1290], "time_column": [282, 312], "time_format": [33, 42, 312, 887], "time_unit": [62, 64, 397, 399, 405, 425, 437, 667, 720, 721, 722, 723, 729, 893, 974, 976, 982, 1006, 1018, 1217], "time_unit_m": [397, 974], "time_unit_n": [397, 974], "time_unit_u": 437, "time_zon": [62, 400, 402, 420, 667, 720, 721, 722, 893, 973, 977, 981, 1001, 1217], "timedelta": [204, 219, 244, 282, 312, 417, 421, 434, 443, 593, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 718, 719, 721, 722, 764, 765, 777, 816, 821, 838, 887, 892, 893, 986, 992, 998, 1002, 1015, 1027, 1125, 1126, 1178, 1250, 1260], "timeout": [54, 799, 887], "timestamp": [123, 133, 144, 204, 312, 420, 421, 434, 729, 816, 887, 1001, 1002, 1015, 1280], "timestamp_m": 425, "timestamp_n": 1006, "timestamp_u": [425, 1006], "timestep": 729, "timeunit": [33, 42, 62, 64, 312, 397, 399, 425, 437, 667, 720, 721, 722, 723, 887, 893, 974, 976, 1006, 1018, 1217], "timezon": [62, 133, 144, 402, 893, 1283], "tip": [535, 777], "titl": [36, 312, 1269], "titlecas": [672, 1222], "tm": [399, 893, 1283], "to_arrow": [217, 312, 1241, 1260, 1287], "to_batch": [217, 312], "to_dict": [176, 312, 795, 887, 893], "to_dummi": [269, 274, 312, 1260], "to_fram": [374, 405, 421, 425, 434, 664, 966, 1137, 1162, 1164, 1206, 1207, 1214, 1260, 1265], "to_init_repr": [123, 312, 1260], "to_jax": [274, 312, 1260], "to_list": [123, 244, 312, 1180, 1191, 1260], "to_lowercas": 564, "to_numpi": [269, 274, 312, 534, 777, 1260], "to_panda": [312, 1260], "to_phys": [777, 948, 1260], "to_python": 892, "to_seri": [48, 199, 312, 664, 704, 752, 1214], "to_sql": [34, 312], "to_str": [423, 1004], "to_struct": [312, 638], "to_torch": [269, 312, 1260], "to_uppercas": [323, 563, 639, 777], "togeth": 1282, "token": [139, 141, 143, 145, 146, 147, 148], "tokyo": [123, 893], "tokyo_tz": 893, "toler": [152, 153, 154, 155, 219, 312, 821, 887], "tone": [36, 312], "tonight": [631, 652, 1181, 1202], "too": [14, 237, 312, 887], "toomanyrowsreturnederror": [245, 312], "top": [36, 259, 275, 312, 315, 686, 777, 848, 852, 887, 1260, 1265, 1287], "top_col": [36, 312], "top_k": [175, 312, 371, 372, 686, 777, 793, 887, 944, 1260], "top_k_bi": [371, 372, 685, 777], "top_row": [36, 312], "tor_id": 123, "torch": [151, 274, 312, 1244, 1260], "torchexporttyp": [274, 312], "tostructstrategi": [526, 1108], "total": [36, 190, 293, 312, 427, 428, 429, 430, 431, 432, 433, 487, 507, 777, 866, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1025, 1069, 1089, 1260], "total_gross": 1269, "toward": [293, 487, 507, 777, 866, 1069, 1089, 1260], "tp": [1, 50], "tpch": [125, 130], "tpu": [269, 312, 1239, 1260], "traceback": [152, 153, 154, 155, 270, 312, 588, 777, 1144, 1241, 1260], "tracebacktyp": 1287, "track": [133, 144, 145, 222, 312, 526, 1287], "trail": [28, 202, 312, 659, 660, 1209, 1210], "train": [274, 312], "train_lf": [861, 887], "transfer": 132, "transferencod": [366, 367, 633, 634, 939, 940, 1183, 1184], "transform": [222, 259, 312, 534, 672, 756, 777, 848, 887, 1222], "transform_dens": [1260, 1265], "transit": [195, 312, 812, 887], "translat": 131, "transpar": [798, 887], "transpos": [237, 312], "travel": [133, 144], "travers": [595, 597, 599, 601, 603, 606, 608, 610, 777, 1150, 1151, 1153, 1156, 1157, 1158, 1260], "treat": [129, 130, 143, 170, 443, 630, 632, 641, 650, 651, 767, 777, 895, 1027, 1180, 1182, 1191, 1200, 1201, 1260], "tree": [548, 808, 887], "tree_format": [808, 887], "trend": [36, 312], "tri": [222, 312], "triangl": [298, 871], "trigger": [35, 220, 271, 312, 777, 891, 1242, 1260], "trigonometri": [1280, 1286], "trim": [123, 1282], "trim_decimal_zero": 28, "trip": 131, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 172, 176, 177, 178, 183, 185, 189, 194, 195, 197, 199, 201, 202, 203, 204, 209, 211, 212, 213, 216, 218, 219, 220, 225, 226, 232, 233, 235, 237, 238, 245, 246, 247, 248, 250, 258, 259, 262, 265, 267, 269, 270, 271, 274, 276, 277, 278, 280, 281, 282, 286, 292, 294, 296, 299, 300, 301, 302, 303, 304, 305, 312, 322, 323, 324, 325, 326, 327, 338, 340, 341, 344, 348, 349, 357, 361, 365, 366, 368, 370, 372, 373, 382, 383, 384, 385, 386, 388, 395, 397, 400, 403, 405, 407, 414, 415, 417, 418, 420, 421, 422, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 444, 445, 452, 459, 461, 462, 463, 464, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 494, 501, 503, 505, 521, 526, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 548, 549, 567, 568, 570, 572, 575, 576, 580, 585, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 618, 619, 623, 625, 626, 629, 630, 631, 632, 633, 635, 640, 641, 643, 644, 645, 650, 651, 655, 656, 658, 664, 666, 667, 669, 671, 675, 677, 686, 688, 691, 694, 695, 696, 697, 698, 700, 703, 704, 705, 709, 718, 721, 727, 733, 739, 749, 752, 756, 759, 764, 767, 768, 777, 795, 796, 797, 798, 799, 803, 805, 808, 811, 812, 815, 816, 820, 821, 823, 825, 829, 834, 840, 845, 847, 848, 853, 854, 855, 856, 859, 865, 867, 869, 872, 873, 874, 875, 876, 877, 878, 886, 887, 891, 893, 900, 901, 912, 914, 915, 918, 922, 923, 931, 938, 939, 941, 943, 945, 947, 949, 952, 953, 966, 972, 973, 974, 977, 980, 981, 982, 983, 984, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1023, 1024, 1026, 1028, 1029, 1036, 1044, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1071, 1072, 1076, 1083, 1085, 1087, 1103, 1116, 1122, 1128, 1130, 1133, 1134, 1137, 1140, 1141, 1155, 1174, 1176, 1179, 1180, 1181, 1182, 1183, 1185, 1190, 1191, 1193, 1194, 1195, 1200, 1201, 1205, 1206, 1208, 1214, 1216, 1217, 1219, 1221, 1236, 1241, 1242, 1249, 1251, 1260, 1265, 1269, 1270, 1272, 1274, 1278, 1279, 1282, 1287, 1290], "truediv": [456, 777], "truncat": [123, 129, 130, 143, 202, 204, 216, 246, 247, 266, 312, 816, 834, 887, 1286], "truncate_nod": [834, 887], "truncate_ragged_lin": [129, 130, 143], "truncate_str": 434, "truncate_td": 434, "trust": [390, 777, 804, 887], "try": [53, 54, 110, 129, 130, 135, 139, 141, 143, 146, 147, 148, 798, 799, 808, 834, 845, 887], "try_cast": 1280, "try_parse_d": [125, 129, 130, 143], "try_parse_hive_d": [141, 146, 148], "ts_local": [420, 1001], "tseri": [414, 415, 995, 996], "tstamp": 893, "tstamp_tokyo": 893, "tstamp_utc": 893, "tue": [312, 315], "tuesdai": [204, 312, 816, 887], "tupl": [36, 56, 132, 134, 140, 173, 216, 222, 235, 245, 246, 247, 254, 274, 290, 312, 589, 777, 834, 845, 887, 892, 893, 1145, 1166, 1260], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 312, 798, 799, 808, 820, 821, 825, 834, 887], "twice": [36, 312], "two": [36, 46, 84, 85, 118, 120, 122, 132, 173, 195, 197, 219, 228, 229, 246, 273, 279, 292, 298, 312, 316, 322, 392, 399, 456, 459, 462, 526, 580, 625, 701, 702, 707, 709, 711, 718, 721, 753, 754, 756, 777, 812, 821, 829, 830, 855, 865, 871, 887, 893, 935, 969, 976, 1108, 1137, 1260, 1275, 1276, 1279, 1288], "two_a": 1287, "tworld": [661, 1209, 1211], "txt": [1, 12, 143, 630, 641, 1191], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 170, 173, 179, 188, 191, 197, 202, 204, 205, 217, 218, 222, 244, 249, 264, 269, 270, 273, 274, 277, 289, 312, 324, 326, 329, 330, 331, 332, 333, 334, 337, 342, 343, 344, 346, 349, 360, 361, 365, 366, 367, 368, 369, 370, 373, 374, 377, 378, 379, 380, 381, 388, 389, 395, 396, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 446, 448, 459, 462, 465, 472, 473, 474, 475, 476, 477, 478, 487, 491, 492, 494, 499, 505, 507, 525, 526, 534, 535, 580, 582, 586, 587, 588, 589, 591, 592, 593, 621, 622, 629, 632, 633, 634, 636, 637, 638, 639, 642, 643, 645, 646, 647, 654, 655, 656, 657, 664, 665, 669, 682, 683, 684, 691, 700, 707, 710, 717, 718, 719, 720, 721, 722, 723, 725, 733, 734, 736, 737, 738, 739, 749, 752, 763, 764, 765, 768, 773, 777, 789, 798, 799, 807, 808, 809, 816, 820, 834, 838, 839, 845, 853, 863, 887, 892, 895, 900, 901, 912, 914, 915, 916, 917, 918, 920, 922, 923, 934, 935, 936, 938, 939, 940, 942, 945, 946, 954, 966, 967, 972, 973, 975, 977, 978, 979, 980, 981, 983, 984, 985, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1031, 1046, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1071, 1072, 1073, 1074, 1076, 1081, 1087, 1089, 1107, 1108, 1130, 1137, 1143, 1144, 1145, 1147, 1148, 1169, 1179, 1180, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1192, 1193, 1195, 1196, 1197, 1204, 1205, 1206, 1207, 1214, 1215, 1219, 1240, 1241, 1243, 1251, 1260, 1269, 1276, 1280, 1282, 1286, 1287], "type_coercion": [42, 43, 44, 45, 53, 54, 798, 799, 808, 834, 845, 887], "typeerror": [35, 312], "typenam": [36, 312], "typic": [119, 131, 148, 222, 312, 404, 893, 981, 1116, 1260], "tz": [667, 1217], "tzinfo": [133, 144, 893], "u": [36, 62, 64, 148, 161, 219, 312, 397, 399, 405, 425, 437, 664, 667, 696, 698, 720, 721, 722, 723, 729, 821, 887, 893, 974, 976, 982, 1006, 1018, 1214, 1217, 1273, 1283], "u1": [270, 312], "u16": [143, 1285, 1290], "u32": [12, 131, 174, 176, 182, 234, 288, 289, 293, 297, 303, 305, 312, 322, 328, 335, 336, 337, 338, 339, 342, 343, 345, 354, 369, 381, 382, 467, 487, 491, 492, 495, 507, 512, 555, 571, 583, 591, 592, 596, 598, 600, 602, 604, 607, 609, 611, 615, 632, 641, 646, 647, 684, 689, 691, 695, 699, 703, 704, 710, 712, 733, 736, 747, 777, 792, 795, 802, 832, 862, 863, 866, 870, 876, 878, 887, 893, 911, 912, 913, 916, 917, 919, 928, 945, 948, 960, 1048, 1073, 1074, 1077, 1089, 1094, 1139, 1147, 1148, 1163, 1182, 1191, 1196, 1197, 1243, 1247, 1249, 1260, 1269, 1277, 1278, 1282, 1287], "u64": [205, 289, 312, 465, 585, 777, 834, 863, 887, 893, 1046, 1141, 1260], "u8": [176, 267, 268, 280, 312, 588, 694, 777, 795, 887, 893, 1144, 1236, 1260, 1290], "udf": [165, 222, 236, 298, 312, 390, 535, 577, 739, 777, 804, 833, 871, 887, 1116, 1260], "ufunc": 90, "uid": 131, "uint": 1290, "uint16": [143, 385, 386, 680, 777, 893, 963, 964, 1231, 1241, 1244, 1260], "uint2": 1285, "uint32": [124, 151, 176, 190, 244, 289, 312, 337, 342, 343, 369, 381, 443, 459, 462, 487, 491, 492, 507, 586, 591, 592, 593, 632, 646, 647, 684, 710, 733, 736, 777, 795, 838, 863, 887, 893, 912, 916, 917, 942, 945, 1025, 1027, 1073, 1074, 1089, 1147, 1148, 1182, 1196, 1197, 1243, 1244, 1260], "uint4": 1287, "uint64": [124, 205, 244, 289, 312, 342, 343, 443, 465, 491, 492, 585, 593, 777, 838, 863, 887, 893, 916, 917, 1027, 1046, 1073, 1074, 1141, 1244, 1260], "uint8": [131, 176, 268, 269, 270, 280, 312, 385, 386, 588, 680, 694, 777, 795, 887, 893, 963, 964, 1144, 1231, 1244, 1260, 1290], "uint8_pair": 1290, "uit": [654, 1204], "uk": [638, 1188], "unabl": [92, 134], "unari": [569, 777], "unbias": [444, 445, 777, 1028, 1029, 1260], "unchang": [190, 312, 587, 684, 777, 825, 871, 887, 1025, 1143, 1243, 1260], "uncompress": [31, 37, 38, 41, 45, 135, 146, 312, 887], "undefin": [687, 777], "under": [46, 48, 49, 50, 51, 84, 85, 139, 141, 143, 146, 147, 148, 237, 259, 312, 769, 770, 772, 773, 778, 779, 782, 784, 785, 786, 848, 887, 1252, 1254, 1256, 1261, 1266, 1267, 1268], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 191, 192, 216, 217, 246, 264, 270, 312, 366, 397, 398, 399, 403, 406, 407, 408, 409, 410, 411, 412, 413, 416, 418, 419, 420, 422, 435, 436, 437, 438, 585, 612, 630, 633, 641, 777, 809, 887, 893, 939, 948, 974, 975, 976, 980, 983, 984, 985, 989, 990, 991, 993, 994, 997, 999, 1000, 1001, 1003, 1016, 1017, 1018, 1019, 1032, 1141, 1159, 1169, 1180, 1183, 1191, 1235, 1241, 1260, 1287], "understood": 739, "undo": [549, 556, 557, 559, 561, 563, 564], "unexpect": [99, 108, 131, 534, 535, 777, 1116, 1260], "unhelpfulli": [152, 154], "unicod": [20, 642, 647, 654, 665, 893, 1192, 1197, 1204, 1215], "unifi": [36, 269, 274, 312, 893], "uniform": [36, 312, 580, 777, 1137, 1260], "unimod": [623, 777, 1174, 1260], "unintend": [195, 312, 812, 887], "union": [53, 54, 55, 518, 798, 799, 808, 834, 845, 887, 893, 1100, 1286, 1287], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 174, 213, 218, 233, 237, 247, 303, 312, 328, 339, 354, 388, 483, 512, 555, 580, 664, 666, 667, 671, 689, 691, 699, 747, 777, 792, 820, 876, 887, 891, 913, 928, 966, 1065, 1094, 1123, 1137, 1214, 1216, 1217, 1221, 1247, 1249, 1260, 1276, 1278], "unique_column_valu": [237, 312], "unique_count": [777, 1260], "uniquekeepstrategi": [277, 312, 853, 887], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 190, 312, 369, 397, 399, 405, 425, 437, 443, 449, 532, 545, 664, 667, 690, 720, 721, 722, 723, 729, 777, 834, 887, 891, 893, 942, 974, 976, 982, 1006, 1018, 1025, 1027, 1033, 1114, 1214, 1217, 1248, 1260, 1290], "univers": [170, 895], "unix": [61, 62, 405, 729, 982], "unknown": [637, 737, 1187], "unless": [36, 47, 118, 269, 274, 312, 659, 660, 752, 887, 1209, 1282], "unlik": [126, 204, 312, 816, 887], "unnam": [639, 1189], "unnest": [126, 312, 388, 580, 591, 638, 639, 656, 657, 677, 678, 691, 777, 887, 935, 966, 1108, 1137, 1147, 1206, 1207, 1260, 1280, 1286], "unpivot": [228, 312, 829, 887], "unregist": [1271, 1272, 1273, 1287, 1289], "unsaf": [777, 891], "unset": [34, 141, 146, 158, 297, 312, 420, 526, 870, 1001, 1269], "unsign": [78, 79, 80, 81, 585, 777, 893, 1141, 1260], "unsigned_integ": 893, "unstabl": [41, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 259, 269, 274, 280, 281, 312, 315, 316, 387, 388, 421, 467, 535, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 753, 754, 777, 798, 799, 808, 848, 856, 887, 949, 965, 966, 1002, 1048, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1239, 1244, 1260, 1265], "unstack": 312, "unstackdirect": [280, 312], "unsuit": 115, "unsupport": [35, 312], "until": [84, 204, 220, 312, 648, 649, 674, 816, 887, 1198, 1199, 1224], "up": [10, 36, 76, 132, 216, 219, 237, 246, 247, 253, 266, 312, 376, 535, 642, 665, 777, 820, 821, 825, 843, 887, 893, 951, 1192, 1215, 1260], "upcast": [327, 777], "upcast_integer_typ": [1, 50], "updat": [35, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 183, 312, 803, 887], "upgrad": 95, "upheld": [825, 887], "upon": 130, "upper": [129, 130, 131, 190, 204, 312, 377, 467, 472, 526, 558, 690, 700, 718, 719, 721, 722, 764, 765, 777, 816, 887, 954, 1025, 1048, 1052, 1114, 1248, 1260, 1278, 1280], "upper_bound": [204, 312, 377, 472, 526, 777, 816, 887, 954, 1052, 1114, 1260], "uppercas": [564, 673, 1223, 1282], "upsampl": [204, 312, 816, 887], "urandom": [369, 942], "uri": [34, 35, 131, 132, 133, 144, 145, 312], "url": [131, 132, 141, 146, 148, 637, 639, 1187, 1189], "urllib": 132, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 174, 175, 176, 179, 183, 185, 187, 193, 194, 195, 197, 203, 204, 211, 213, 215, 216, 217, 219, 222, 228, 232, 233, 235, 236, 237, 244, 245, 246, 247, 248, 250, 251, 253, 258, 259, 260, 264, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 279, 280, 281, 282, 283, 286, 287, 288, 289, 291, 298, 312, 322, 324, 326, 328, 337, 338, 361, 366, 367, 372, 387, 390, 393, 394, 402, 420, 421, 423, 426, 434, 437, 439, 442, 443, 444, 445, 446, 450, 451, 452, 456, 467, 470, 471, 472, 484, 498, 514, 522, 526, 528, 534, 535, 538, 556, 559, 561, 563, 564, 573, 580, 583, 585, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 616, 618, 619, 623, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 646, 647, 650, 651, 652, 654, 656, 658, 660, 661, 662, 663, 664, 666, 667, 671, 674, 675, 678, 686, 692, 693, 695, 696, 697, 698, 699, 702, 703, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 729, 733, 734, 736, 737, 739, 740, 741, 743, 745, 746, 749, 752, 753, 754, 755, 756, 758, 759, 760, 761, 764, 765, 766, 767, 768, 773, 776, 777, 788, 789, 792, 793, 794, 795, 798, 799, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 815, 816, 817, 821, 823, 824, 829, 838, 839, 840, 841, 843, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 887, 892, 893, 900, 901, 931, 935, 939, 940, 949, 965, 967, 970, 971, 979, 987, 988, 1001, 1002, 1004, 1007, 1015, 1018, 1021, 1026, 1027, 1028, 1029, 1034, 1035, 1039, 1045, 1048, 1050, 1051, 1052, 1067, 1080, 1096, 1103, 1108, 1116, 1137, 1139, 1141, 1143, 1145, 1147, 1148, 1149, 1161, 1162, 1164, 1165, 1168, 1174, 1176, 1178, 1179, 1180, 1181, 1183, 1184, 1186, 1187, 1188, 1190, 1191, 1196, 1197, 1200, 1201, 1202, 1204, 1206, 1214, 1216, 1217, 1221, 1224, 1235, 1236, 1238, 1241, 1242, 1250, 1260, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1282, 1283, 1287, 1290], "usag": [159, 163, 256, 312, 893, 1169, 1260], "usd": [202, 312, 1290], "use_pyarrow": [41, 45, 129, 135, 137, 141, 270, 312, 887, 1241, 1260], "use_pyarrow_extension_arrai": [271, 312, 1242, 1260], "use_pyarrow_write_to_dataset": [41, 312], "use_statist": [141, 148], "user": [34, 131, 132, 170, 222, 236, 298, 312, 534, 535, 577, 616, 739, 777, 833, 871, 887, 891, 895, 1116, 1165, 1260], "user_conn": 131, "usernam": [129, 132, 135, 137], "userwarn": 1, "usr": 131, "usual": [91, 132, 274, 312, 396, 973], "utc": [133, 144, 396, 400, 402, 404, 420, 664, 667, 893, 973, 977, 981, 1001, 1214, 1217], "utc_tz": 893, "utf": [33, 42, 75, 312, 887], "utf8": [20, 129, 130, 143, 642, 654, 665, 1192, 1204, 1215], "utf8_borders_onli": 20, "utf8_ful": [20, 47, 123], "utf8_full_condens": [7, 20, 123], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [274, 312, 729, 887, 891], "uvw": [638, 1188], "v": [8, 9, 41, 190, 312, 615, 696, 698, 777, 1163, 1260, 1272, 1273], "v2": [8, 135, 146], "val": [36, 243, 312, 535, 577, 684, 767, 777, 837, 887], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 185, 190, 218, 312, 387, 630, 632, 637, 638, 639, 641, 645, 650, 651, 767, 777, 805, 820, 887, 893, 965, 1025, 1180, 1182, 1187, 1188, 1189, 1191, 1195, 1200, 1201, 1260, 1269, 1270], "validate_output_schema": [825, 887], "vals_phys": [684, 777], "valu": [4, 5, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 172, 174, 175, 183, 187, 189, 192, 193, 194, 195, 199, 202, 204, 205, 206, 210, 214, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 235, 237, 238, 239, 241, 244, 245, 246, 247, 248, 255, 258, 260, 261, 262, 263, 265, 266, 270, 271, 275, 276, 279, 280, 281, 282, 283, 290, 293, 294, 296, 299, 300, 302, 303, 312, 315, 316, 320, 321, 322, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 391, 393, 394, 399, 403, 413, 418, 435, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 495, 496, 497, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 521, 522, 523, 524, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 551, 552, 553, 554, 555, 565, 566, 567, 568, 571, 573, 574, 577, 578, 580, 581, 583, 586, 587, 588, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 620, 621, 622, 623, 625, 626, 627, 629, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 665, 674, 676, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 703, 706, 707, 708, 710, 712, 713, 714, 715, 716, 726, 727, 732, 733, 734, 735, 737, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 754, 760, 761, 767, 777, 792, 793, 803, 806, 810, 811, 812, 816, 818, 819, 820, 821, 826, 827, 828, 829, 831, 832, 835, 836, 838, 844, 847, 849, 850, 852, 855, 856, 857, 866, 867, 869, 872, 873, 875, 876, 887, 893, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 919, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 936, 937, 939, 940, 941, 942, 943, 945, 951, 954, 956, 957, 958, 960, 965, 966, 967, 968, 970, 971, 976, 980, 994, 999, 1016, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1101, 1103, 1104, 1105, 1106, 1109, 1110, 1116, 1117, 1118, 1120, 1121, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1136, 1137, 1138, 1139, 1143, 1144, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1161, 1162, 1163, 1164, 1167, 1171, 1172, 1173, 1174, 1176, 1179, 1180, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1215, 1224, 1227, 1231, 1232, 1233, 1234, 1241, 1242, 1243, 1247, 1249, 1251, 1260, 1269, 1274, 1276, 1278, 1279, 1281, 1282, 1283, 1285, 1287, 1289, 1290], "value1": [626, 777], "value2": [626, 777], "value_a": 1287, "value_b": 1287, "value_count": [689, 777, 1260], "value_cum_sum": [386, 777], "value_cum_sum_all_fil": [386, 777], "value_nam": [228, 279, 312, 829, 855, 887], "value_var": [228, 279, 312, 829, 855, 887], "valueerror": [15, 20], "valueexcept": 737, "var": [36, 164, 312, 610, 611, 777, 887, 1260, 1277], "var_samp": 1277, "vari": [396, 973, 1290], "variabl": [30, 72, 139, 141, 143, 146, 147, 148, 162, 165, 228, 267, 279, 312, 829, 855, 887, 1236, 1260, 1270, 1272, 1287], "variable_nam": [228, 279, 312, 829, 855, 887], "variad": 131, "varianc": [283, 312, 445, 484, 610, 611, 692, 766, 777, 857, 887, 1029, 1067, 1158, 1250, 1260, 1280], "variou": [131, 173, 179, 312, 777, 800, 887, 892, 893, 1260], "vector": [595, 597, 599, 601, 603, 606, 608, 610, 777, 1150, 1151, 1153, 1156, 1157, 1158, 1260], "vectoris": [414, 415, 995, 996], "vein": 168, "verbos": [29, 152, 154, 168, 638, 1188], "veri": [131, 216, 276, 312, 535, 777, 871, 1281], "verifi": [219, 312, 821, 887], "versicolor": [312, 315], "version": [34, 35, 52, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 172, 174, 184, 205, 228, 252, 259, 269, 270, 274, 288, 293, 312, 315, 390, 402, 414, 415, 437, 458, 465, 541, 547, 550, 587, 629, 636, 678, 693, 702, 751, 756, 777, 792, 804, 808, 829, 842, 848, 861, 862, 866, 887, 893, 979, 987, 988, 995, 996, 1018, 1045, 1046, 1143, 1179, 1186, 1239, 1241, 1244, 1260, 1265], "versu": [183, 312, 803, 887], "vertic": [55, 192, 280, 284, 312, 629, 643, 1179, 1193], "vertical_relax": 55, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 171, 173, 184, 216, 246, 312, 390, 535, 639, 777, 804, 887, 896, 1189], "view": [535, 777], "visibl": [17, 190, 312, 1025, 1260], "visit": [387, 777, 965, 1260], "visual": [211, 213, 312, 845, 887], "volk": 126, "vote": [637, 639, 1187, 1189], "vowel": [650, 651, 1200, 1201], "vstack": [55, 192, 312], "w": [36, 131, 204, 247, 312, 632, 637, 639, 696, 698, 816, 887, 893, 1182, 1187, 1189, 1210, 1272, 1273, 1276], "w_i": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "wa": [34, 52, 91, 134, 152, 184, 269, 270, 312, 315, 390, 588, 652, 723, 777, 804, 887, 893, 1144, 1202, 1241, 1260, 1265], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 203, 217, 236, 258, 291, 312, 421, 573, 577, 626, 637, 710, 773, 777, 801, 807, 815, 833, 839, 847, 858, 864, 871, 887, 1002, 1187], "walk": 708, "want": [54, 119, 121, 134, 192, 222, 233, 244, 259, 312, 395, 452, 534, 535, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 619, 631, 646, 652, 705, 713, 718, 721, 727, 749, 752, 768, 777, 799, 817, 824, 848, 887, 893, 972, 1032, 1116, 1181, 1196, 1202, 1260, 1275], "warehous": 132, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 573, 777, 1260], "watermark": [41, 312], "wb": [36, 312], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 183, 184, 204, 219, 237, 244, 282, 312, 390, 417, 421, 434, 467, 498, 526, 534, 535, 593, 596, 598, 600, 602, 604, 607, 609, 611, 639, 669, 717, 718, 719, 720, 721, 722, 737, 764, 765, 767, 777, 803, 804, 816, 821, 825, 838, 887, 998, 1002, 1015, 1048, 1080, 1116, 1189, 1219, 1260, 1272], "weather": [650, 651, 1200, 1201], "wed": [312, 315], "wednesdai": [204, 312, 423, 426, 816, 887, 1004, 1007], "week": [204, 219, 244, 282, 312, 395, 417, 421, 434, 436, 443, 593, 596, 598, 600, 602, 604, 607, 609, 611, 705, 718, 719, 721, 722, 723, 764, 765, 777, 816, 821, 838, 887, 893, 972, 998, 1002, 1015, 1017, 1027, 1260, 1283], "week_mask": [395, 705, 972], "weekdai": [403, 418], "weekend": [395, 705, 972], "weekli": [204, 312, 434, 816, 887, 1015], "weghorst": [639, 1189], "weight": [126, 442, 443, 444, 445, 594, 595, 597, 599, 601, 603, 606, 608, 610, 623, 777, 1026, 1027, 1028, 1029, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1174, 1260], "wei\u00df": 1282, "well": [36, 129, 130, 131, 143, 312, 472, 756, 777, 1052, 1260, 1287], "were": [168, 587, 588, 773, 777, 1143, 1144, 1260], "what": [173, 233, 312, 395, 534, 631, 652, 777, 972, 1181, 1202], "whatev": 168, "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 175, 183, 188, 190, 192, 194, 197, 204, 218, 222, 236, 245, 247, 250, 251, 255, 258, 264, 267, 269, 270, 274, 275, 277, 281, 287, 312, 356, 377, 395, 442, 444, 445, 451, 519, 526, 545, 577, 587, 588, 617, 625, 626, 631, 636, 640, 642, 646, 647, 652, 654, 659, 660, 661, 664, 665, 703, 705, 713, 727, 777, 793, 803, 811, 816, 820, 825, 840, 841, 844, 847, 852, 853, 856, 860, 887, 930, 954, 967, 972, 1025, 1026, 1028, 1029, 1032, 1035, 1101, 1143, 1144, 1162, 1164, 1167, 1181, 1186, 1190, 1192, 1196, 1197, 1202, 1204, 1209, 1210, 1211, 1214, 1215, 1235, 1236, 1241, 1260, 1275, 1287], "when_matched_update_al": [35, 312], "when_not_matched_insert_al": [35, 312], "where": [36, 47, 91, 131, 132, 134, 187, 192, 195, 204, 216, 228, 237, 246, 259, 260, 269, 274, 279, 281, 283, 312, 338, 436, 439, 441, 443, 452, 522, 528, 534, 568, 586, 615, 623, 626, 628, 652, 672, 692, 704, 709, 711, 753, 754, 756, 758, 766, 767, 777, 806, 812, 816, 829, 848, 849, 855, 856, 857, 887, 912, 1017, 1021, 1023, 1027, 1032, 1036, 1128, 1163, 1174, 1178, 1202, 1222, 1250, 1251, 1260, 1269, 1286, 1287, 1289], "wherea": [129, 143, 244, 312, 421, 434, 565, 566, 593, 777, 817, 824, 838, 887, 1002, 1015, 1125, 1126, 1260], "wherev": [36, 222, 298, 312, 535, 777, 1116, 1260], "whether": [33, 42, 120, 122, 126, 141, 146, 148, 163, 167, 189, 215, 219, 253, 258, 312, 324, 326, 340, 341, 407, 422, 464, 489, 490, 616, 626, 640, 703, 777, 821, 825, 843, 847, 887, 893, 900, 901, 914, 915, 947, 949, 984, 1003, 1024, 1044, 1045, 1071, 1072, 1190, 1260, 1272, 1287], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 159, 162, 164, 175, 176, 183, 184, 187, 192, 193, 203, 204, 209, 219, 237, 244, 252, 269, 270, 275, 277, 282, 312, 324, 361, 390, 395, 417, 421, 423, 434, 443, 449, 472, 474, 477, 479, 480, 481, 482, 526, 534, 535, 545, 547, 593, 596, 598, 600, 602, 604, 607, 609, 611, 669, 705, 718, 719, 721, 722, 723, 764, 765, 767, 777, 793, 795, 798, 801, 803, 804, 806, 807, 808, 816, 821, 838, 842, 852, 853, 858, 887, 893, 935, 972, 998, 1002, 1004, 1015, 1027, 1032, 1033, 1052, 1055, 1058, 1060, 1061, 1062, 1063, 1108, 1164, 1219, 1239, 1241, 1260, 1270, 1276, 1287, 1290], "while": [35, 54, 130, 133, 134, 144, 148, 159, 163, 168, 216, 228, 276, 279, 281, 312, 587, 647, 777, 799, 829, 855, 856, 887, 1143, 1197, 1260], "white": [36, 312], "whitespac": [123, 659, 660, 661, 1209, 1210, 1211, 1282], "whole": [534, 625, 626, 637, 777, 871, 887, 1187], "whose": [47, 219, 237, 312, 446, 725, 777, 821, 887, 893], "why": [798, 887], "wide": [131, 202, 228, 237, 279, 280, 312, 829, 855, 887], "width": [26, 36, 56, 129, 130, 143, 312, 315, 525, 887, 1107], "wiki": 20, "wikipedia": 20, "wildcard": [446, 675, 713, 714, 727, 751, 773, 777, 891], "win_loss": [36, 312], "window": [129, 130, 143, 204, 244, 312, 387, 442, 444, 445, 535, 573, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 707, 753, 754, 777, 816, 838, 887, 965, 1026, 1028, 1029, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1260], "window_s": [594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 753, 754, 777, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1260], "windowmappingstrategi": [573, 777], "winter": [640, 650, 651, 1190], "wise": [36, 47, 131, 197, 312, 329, 330, 331, 332, 333, 334, 378, 379, 380, 447, 530, 620, 621, 622, 682, 683, 727, 751, 777, 903, 904, 905, 906, 907, 908, 956, 957, 958, 1030, 1112, 1113, 1171, 1172, 1173, 1233, 1234, 1260], "wish": [175, 275, 312, 371, 372, 685, 686, 777, 793, 852, 887, 944, 1245, 1260], "with_column": [1, 12, 50, 53, 54, 204, 236, 244, 274, 280, 287, 312, 321, 323, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 354, 355, 356, 357, 361, 366, 367, 369, 373, 377, 382, 383, 384, 385, 386, 388, 391, 395, 396, 398, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 438, 440, 441, 443, 450, 451, 456, 461, 463, 465, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 533, 534, 535, 552, 554, 556, 557, 559, 561, 563, 564, 567, 568, 569, 573, 574, 577, 578, 580, 583, 587, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 617, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 672, 673, 674, 676, 678, 679, 684, 687, 694, 696, 698, 701, 705, 706, 707, 708, 713, 714, 716, 717, 719, 720, 724, 734, 738, 741, 743, 746, 757, 761, 763, 765, 767, 773, 777, 798, 799, 808, 816, 818, 833, 834, 838, 845, 860, 887, 893, 966, 1001, 1137, 1260, 1287], "with_column_nam": 143, "with_columns_seq": [312, 887], "with_context": 887, "with_field": [535, 777], "with_replac": [248, 312, 514, 614, 777, 1096, 1161, 1260], "with_row_count": [312, 887], "with_row_index": [1, 244, 288, 312, 596, 598, 600, 602, 604, 607, 609, 611, 777, 862, 887, 1162, 1260, 1265], "within": [41, 56, 72, 152, 153, 154, 155, 203, 204, 205, 219, 244, 282, 312, 465, 583, 626, 777, 816, 821, 838, 887, 1046, 1260, 1287], "without": [1, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 259, 269, 270, 274, 280, 281, 312, 315, 316, 387, 388, 421, 467, 535, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 631, 640, 652, 710, 753, 754, 755, 777, 798, 799, 808, 848, 856, 887, 947, 949, 965, 966, 1002, 1048, 1137, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1181, 1190, 1202, 1239, 1241, 1244, 1260, 1265, 1289], "without_fil": [133, 144, 145], "wod": [661, 1211], "womp": [278, 312, 854, 887], "word": [132, 650, 651, 660, 661, 672, 1222], "work": [36, 63, 65, 130, 149, 251, 287, 312, 324, 326, 362, 376, 377, 446, 455, 498, 527, 534, 535, 556, 557, 559, 561, 563, 564, 573, 642, 646, 647, 654, 665, 688, 777, 841, 860, 887, 893, 900, 901, 936, 951, 954, 1038, 1080, 1109, 1192, 1196, 1197, 1204, 1215, 1246, 1260], "workaround": 312, "workbook": [36, 134, 140, 312], "working_with_conditional_format": [36, 312], "working_with_sparklin": [36, 312], "worksheet": [36, 134, 140, 312], "world": [1, 20, 631, 652, 659, 660, 661, 893, 1087, 1181, 1202, 1209, 1210, 1211, 1271, 1274], "wors": [847, 887], "worth": [498, 1080], "worthwhil": [152, 154], "would": [90, 129, 130, 143, 173, 270, 274, 312, 315, 337, 348, 395, 503, 534, 535, 544, 573, 583, 703, 705, 777, 911, 922, 972, 1085, 1139, 1241, 1260, 1265, 1285], "wrap": [74, 123, 373, 472, 534, 777, 945, 1260], "wrap_numer": [373, 777, 945, 1260], "wrapper": [54, 799, 887], "writabl": [31, 33, 37, 38, 39, 40, 41, 252, 270, 312, 1241, 1260], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 179, 312, 377, 550, 777, 823, 845, 887, 893, 954, 1260], "write_ascii_frame_to_stdout": 168, "write_avro": 312, "write_clipboard": [128, 312], "write_csv": [32, 130, 143, 312], "write_databas": 312, "write_delta": 312, "write_excel": 312, "write_ipc": [135, 312], "write_ipc_stream": 312, "write_json": 312, "write_ndjson": [39, 312], "write_parquet": 312, "write_t": [41, 312], "write_to_dataset": [41, 312], "writeabl": [270, 312, 1241, 1260], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 252, 312, 547, 842, 887], "ww": [1282, 1289], "www": 677, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 134, 140, 143, 156, 157, 159, 172, 190, 208, 211, 213, 218, 237, 246, 247, 276, 279, 280, 312, 315, 321, 323, 325, 344, 349, 369, 382, 389, 440, 441, 456, 461, 463, 465, 486, 493, 505, 531, 533, 534, 535, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 572, 578, 586, 587, 588, 592, 620, 623, 656, 678, 679, 684, 687, 694, 696, 698, 701, 702, 707, 713, 714, 716, 727, 737, 738, 741, 743, 746, 751, 756, 761, 767, 777, 820, 825, 846, 848, 855, 887, 892, 893, 923, 948, 960, 1035, 1116, 1143, 1144, 1171, 1174, 1206, 1239, 1243, 1244, 1260, 1265, 1272, 1273, 1276, 1281, 1287, 1289], "x00": [365, 366, 367, 368, 370, 633, 938, 939, 940, 941, 943, 1183], "x00fvalu": [252, 312], "x07": 369, "x1": 369, "x80": 369, "x81": [547, 842, 887], "x82": [252, 312], "x83": [252, 312, 369], "x88": 369, "x8e": 369, "x99": 369, "x_0": [280, 312, 442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260], "x_1": [280, 312, 443, 777, 1027, 1260], "x_2": [442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260], "x_i": [443, 777, 1027, 1260], "x_invers": [578, 777], "x_n": [443, 777, 1027, 1260], "x_pow_8": 1281, "x_round": 1281, "x_round_1": 1281, "x_squar": [578, 777], "x_t": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "x_uniqu": [555, 777], "x_y": [349, 505], "xa1cagg": 547, "xa1csum": 547, "xa1fcolumncfoolpartition_bi": 547, "xa1fwindow": 547, "xa1gcolumn": [252, 312, 842, 887], "xa1kmapfunct": [842, 887], "xa1mdataframescan": [842, 887], "xa2einput": [842, 887], "xa4bdf": [842, 887], "xa4d": [842, 887], "xa4dnamecfoohdatatypeeint64lbit_set": [252, 312], "xa4hfunct": 547, "xb": 369, "xb9neq": 369, "xbd": 369, "xc14": 369, "xd3": 369, "xdist": 1290, "xee": 369, "xf4v": 369, "xf9": 369, "xfb": 369, "xff": [365, 366, 367, 368, 370, 633, 938, 939, 940, 941, 943, 1183], "xi": [638, 1188], "xl": 134, "xlog2": [554, 578, 777], "xlsb": 134, "xlsx": [36, 134, 312], "xlsx2csv": [134, 151], "xlsxwriter": [36, 151, 312], "xor": 777, "xor_xi": [694, 777], "xx": [10, 48, 50, 163, 183, 259, 312, 803, 887, 893, 1276, 1282, 1289], "xxx": 677, "xy": [48, 50], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 321, 632, 638, 777, 1182, 1188, 1237, 1260], "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 172, 190, 211, 213, 218, 237, 246, 247, 276, 279, 280, 312, 315, 321, 323, 325, 344, 349, 369, 423, 426, 440, 441, 461, 463, 486, 493, 505, 533, 535, 555, 557, 559, 561, 563, 564, 567, 568, 572, 586, 587, 588, 592, 664, 666, 667, 678, 687, 694, 696, 698, 701, 702, 716, 723, 737, 741, 743, 746, 756, 761, 777, 820, 846, 848, 855, 887, 892, 893, 923, 948, 1004, 1007, 1143, 1144, 1214, 1216, 1217, 1260, 1265, 1276, 1282, 1283, 1289], "y_": [442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260], "y_0": [280, 312, 442, 443, 444, 445, 777, 1026, 1027, 1028, 1029, 1260], "y_1": [280, 312], "y_i": [443, 777, 1027, 1260], "y_mul": 678, "y_t": [442, 444, 445, 777, 1026, 1028, 1029, 1260], "y_uniqu": [555, 777], "ya": [654, 1204], "ya29": 145, "year": [133, 144, 204, 219, 244, 259, 282, 312, 395, 407, 408, 417, 418, 421, 434, 435, 593, 596, 598, 600, 602, 604, 607, 609, 611, 705, 717, 718, 719, 720, 721, 722, 764, 765, 777, 816, 821, 838, 887, 893, 972, 984, 985, 998, 999, 1002, 1015, 1016, 1283], "yellow": [312, 316, 365, 366, 367, 368, 370], "yield": [120, 122, 129, 130, 131, 143, 190, 192, 215, 276, 312, 456, 534, 573, 777, 887, 1025, 1032, 1260], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 175, 192, 195, 204, 215, 216, 219, 222, 233, 237, 244, 245, 246, 247, 259, 266, 269, 275, 276, 277, 279, 298, 312, 315, 371, 372, 395, 414, 415, 417, 420, 423, 426, 446, 452, 472, 498, 526, 534, 535, 578, 585, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 619, 631, 646, 650, 651, 652, 672, 675, 685, 686, 705, 713, 718, 721, 723, 727, 739, 749, 752, 756, 768, 777, 793, 799, 806, 812, 816, 817, 821, 824, 838, 845, 848, 852, 853, 855, 871, 887, 891, 893, 944, 972, 995, 996, 1001, 1004, 1007, 1032, 1052, 1080, 1116, 1135, 1141, 1181, 1196, 1200, 1201, 1202, 1222, 1239, 1245, 1260, 1265, 1270, 1275, 1290], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 216, 222, 246, 247, 250, 266, 286, 291, 298, 312, 315, 400, 443, 458, 535, 639, 664, 666, 667, 674, 739, 777, 817, 824, 825, 840, 859, 864, 871, 887, 977, 1027, 1116, 1189, 1214, 1216, 1217, 1224, 1260, 1265, 1290], "yy": [10, 48, 50, 163, 183, 259, 312, 803, 887, 893, 1276, 1282, 1289], "yyi": 677, "yyyi": [36, 312], "yz": [48, 50], "z": [36, 55, 76, 123, 157, 190, 211, 213, 218, 246, 247, 276, 279, 280, 312, 321, 323, 325, 465, 493, 535, 557, 559, 561, 563, 564, 572, 586, 587, 588, 631, 638, 640, 652, 664, 667, 696, 698, 716, 741, 743, 746, 752, 756, 761, 777, 820, 846, 848, 855, 887, 892, 893, 1035, 1143, 1144, 1181, 1188, 1190, 1202, 1214, 1217, 1260, 1272, 1276, 1287, 1289], "z_0": [280, 312], "z_1": [280, 312], "zap": 893, "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 172, 194, 204, 216, 245, 259, 264, 270, 271, 312, 451, 526, 531, 615, 623, 674, 687, 777, 796, 811, 816, 887, 953, 1035, 1108, 1174, 1224, 1235, 1241, 1242, 1260, 1281, 1287], "zero_copy_onli": [1241, 1260], "zfill": [649, 694, 777, 1199], "zip": 1290, "zip_with": [197, 312, 1260], "zone": [62, 159, 160, 163, 396, 400, 420, 443, 667, 720, 721, 722, 777, 893, 973, 977, 1001, 1027, 1217, 1260], "zoneinfo": [62, 893], "zoom": [36, 312], "zstd": [37, 38, 41, 43, 45, 312, 887], "zz": [163, 183, 259, 312, 803, 887, 1276, 1282, 1289], "zzz": 677, "\u03bc": [123, 176, 204, 216, 244, 246, 247, 266, 282, 312, 396, 397, 399, 400, 401, 402, 404, 406, 409, 411, 412, 414, 415, 416, 417, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 593, 596, 598, 600, 602, 604, 607, 609, 611, 664, 667, 720, 721, 722, 723, 729, 777, 795, 816, 838, 887, 893, 973, 974, 976, 977, 978, 979, 981, 982, 983, 988, 989, 993, 995, 996, 997, 998, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1214, 1217, 1282], "\u0441\u0438\u043d\u0438\u0439": 1282, "\u0967\u096f\u096f\u096f": 893, "\u0968\u0966\u096d\u096d": 893, "\u4eac\u90fd": 893, "\u5927\u962a": 893, "\u6771\u4eac": [646, 647, 893, 1196, 1197], "\u90fd\u5e02": 893, "\ud835\udf0b": 1281}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1276, 1288], "IF": 1279, "__array__": [170, 895], "__arrow_c_stream__": [171, 896], "__dataframe__": 172, "__getitem__": [173, 897], "__iter__": 290, "ab": [320, 898, 1281], "aco": 1284, "acosd": 1284, "add": 321, "add_business_dai": [395, 972], "agg": [291, 864], "agg_group": 322, "aggreg": [169, 319, 791, 894, 1277], "alia": [323, 899], "alias": [1277, 1281, 1282], "align_fram": 47, "all": [292, 324, 340, 489, 695, 865, 900, 914, 1071, 1288], "all_horizont": 696, "and_": 325, "ani": [326, 341, 490, 697, 901, 915, 1072], "any_horizont": 698, "api": [1, 48, 49, 50, 51, 789, 1287], "append": [327, 902], "approx_n_uniqu": [174, 328, 699, 792], "arang": 700, "arcco": [329, 903], "arccosh": [330, 904], "arcsin": [331, 905], "arcsinh": [332, 906], "arctan": [333, 907], "arctan2": 701, "arctan2d": 702, "arctanh": [334, 908], "arg_max": [335, 342, 491, 909, 916, 1073], "arg_min": [336, 343, 492, 910, 917, 1074], "arg_sort": [337, 911], "arg_sort_bi": 703, "arg_tru": [338, 912], "arg_uniqu": [339, 913], "arg_wher": 704, "arr": [340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937], "arrai": [56, 769, 1252, 1278], "array_agg": 1278, "array_contain": 1278, "array_get": 1278, "array_length": 1278, "array_low": 1278, "array_mean": 1278, "array_revers": 1278, "array_sum": 1278, "array_to_str": 1278, "array_uniqu": 1278, "array_upp": 1278, "asin": 1284, "asind": 1284, "assert": 1290, "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "atan": 1284, "atan2": 1284, "atan2d": 1284, "atand": 1284, "attribut": [307, 883, 1253], "avail": 1, "avg": 1277, "avro": 790, "backward_fil": 364, "base_utc_offset": [396, 973], "batched_read": 125, "batchedcsvread": 125, "bin": [365, 366, 367, 368, 369, 370, 938, 939, 940, 941, 942, 943], "binari": [57, 770, 783, 1254], "bit_length": 1282, "boolean": [58, 771, 1255], "bottom_k": [175, 371, 793, 944], "bottom_k_bi": 372, "build_info": 52, "business_day_count": 705, "cach": 794, "cancel": 880, "cast": [176, 373, 795, 945, 1285], "cast_time_unit": [397, 974], "cat": [374, 946, 947, 948, 949], "categor": 59, "categori": [772, 1256], "categoricalremappingwarn": 86, "cbrt": [375, 950, 1281], "ceil": [376, 951, 1281], "centuri": [398, 975], "chronoformatwarn": 87, "chunk_length": 952, "claus": 1276, "clear": [177, 796, 953], "clip": [377, 954], "clipboard": 790, "clone": [178, 797, 955], "co": [378, 956, 1284], "coalesc": [706, 1279], "col": 773, "collect": 798, "collect_al": 53, "collect_all_async": 54, "collect_async": 799, "collect_schema": [179, 800], "column": [156, 157, 180, 774, 801], "columnnotfounderror": 88, "combin": [399, 976], "comparison": [783, 1264], "comput": [308, 775, 1257], "computeerror": 89, "concat": [55, 493, 629, 1075, 1179, 1282], "concat_list": 707, "concat_str": 708, "concat_w": 1282, "condit": 1279, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "conjunct": 783, "contain": [344, 365, 494, 630, 918, 938, 1076, 1180], "contains_ani": [631, 1181], "context": 168, "convers": 788, "convert_time_zon": [400, 977], "corr": [181, 709], "cosd": 1284, "cosh": [379, 957], "cot": [380, 958, 1284], "cotd": 1284, "count": [182, 293, 381, 710, 802, 866, 959, 1277], "count_match": [345, 495, 632, 919, 1077, 1182], "cov": 711, "creat": 1289, "create_list_strategi": 158, "csv": [125, 790], "cum_count": [382, 712, 960], "cum_fold": 713, "cum_max": [383, 961], "cum_min": [384, 962], "cum_prod": [385, 963], "cum_reduc": 714, "cum_sum": [386, 715, 964], "cum_sum_horizont": 716, "cumulative_ev": [387, 965], "customufuncwarn": 90, "cut": [388, 966], "dai": [403, 980], "data": 317, "databas": 790, "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312], "dataorientationwarn": 91, "dataset": 790, "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 317], "date": [61, 401, 717, 978, 1282], "date_part": 1283, "date_rang": [718, 719], "datetim": [62, 402, 720, 979], "datetime_rang": [721, 722], "decim": 63, "decod": [366, 633, 939, 1183], "decor": 168, "degre": [389, 1284], "delta": 790, "describ": [183, 803, 967], "descript": [309, 884, 1258], "deseri": [184, 390, 804], "diff": [391, 496, 968, 1078], "disable_string_cach": 84, "distinct": 1276, "div": 1281, "document": 1287, "dot": [392, 969], "drop": [185, 805, 1289], "drop_in_plac": 186, "drop_nan": [393, 970], "drop_nul": [187, 394, 497, 806, 971, 1079], "dst_offset": [404, 981], "dt": [395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "dtype": [160, 188, 807, 1020], "duplicateerror": 92, "durat": [64, 723], "element": 724, "enable_string_cach": 85, "encod": [367, 634, 940, 1184], "ends_with": [368, 635, 941, 1185, 1282], "entropi": [439, 1021], "enum": 65, "epoch": [405, 982], "eq": [440, 539, 1022], "eq_miss": [441, 1023], "equal": [189, 1024], "error": 318, "estimated_s": [190, 1025], "eval": [498, 1080], "ewm_mean": [442, 1026], "ewm_mean_bi": [443, 1027], "ewm_std": [444, 1028], "ewm_var": [445, 1029], "exampl": [1, 893, 1290], "excel": 790, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 318, 1288], "exclud": [446, 725], "execut": 1269, "execute_glob": 1270, "exp": [447, 1030, 1281], "explain": [808, 1289], "explod": [191, 346, 448, 499, 636, 809, 920, 1031, 1081, 1186], "export": [310, 1259], "expr": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694], "express": [777, 1287], "extend": [1, 192, 1032], "extend_const": [449, 1033], "extract": [637, 1187, 1283], "extract_al": [638, 1188], "extract_group": [639, 1189], "extract_mani": [640, 1190], "feather": 790, "fetch": 881, "fetch_block": 882, "field": [675, 1225, 1226], "fill_nan": [193, 450, 810, 1034], "fill_nul": [194, 451, 811, 1035], "filter": [195, 452, 812, 1036], "find": [641, 1191], "first": [294, 347, 453, 500, 726, 813, 867, 921, 1082, 1277], "flag": [196, 1037], "flatten": 454, "float32": 66, "float64": 67, "floor": [455, 1038, 1281], "floordiv": 456, "fold": [197, 727], "format": 728, "forward_fil": 457, "frame": 1287, "from": 1276, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_epoch": 729, "from_json": 458, "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "function": [1, 776, 788, 893, 1280], "gather": [459, 501, 1039, 1083], "gather_everi": [198, 460, 502, 814, 1040, 1084], "ge": [461, 1041], "get": [348, 462, 503, 922, 1085], "get_categori": [374, 946], "get_chunk": 1042, "get_column": [199, 201], "get_column_index": 200, "get_index_typ": 124, "glimps": 202, "global": 1287, "greatest": 1279, "group": [730, 1276], "group_bi": [203, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 815, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "group_by_dynam": [204, 816], "groupbi": [290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 885], "gt": [463, 1043], "has_multiple_output": 540, "has_nul": [464, 1044], "has_valid": 1045, "hash": [465, 1046], "hash_row": 205, "have": 1276, "head": [206, 295, 466, 504, 642, 731, 817, 868, 1047, 1086, 1192], "height": 207, "helper": 1290, "hist": [467, 1048], "hour": [406, 983], "hstack": 208, "iceberg": 790, "ifnul": 1279, "implod": [468, 732, 1049], "import": 893, "in_process": [880, 881, 882], "index": 0, "initcap": 1282, "inprocessqueri": [880, 881, 882, 886], "input": 790, "insert_column": 209, "inspect": [469, 818], "int16": 68, "int32": 69, "int64": 70, "int8": 71, "int_rang": [733, 734], "interfac": 1286, "interpol": [210, 470, 819, 1050], "interpolate_bi": [471, 1051], "intersect": 1288, "introduct": 1287, "invalidoperationerror": 93, "io": 125, "ipc": 790, "is_between": [472, 1052], "is_column_select": 541, "is_dupl": [211, 473, 1053], "is_empti": [212, 1054], "is_finit": [474, 1055], "is_first_distinct": [475, 1056], "is_in": [476, 1057], "is_infinit": [477, 1058], "is_last_distinct": [478, 1059], "is_leap_year": [407, 984], "is_loc": 947, "is_nan": [479, 1060], "is_not_nan": [480, 1061], "is_not_nul": [481, 1062], "is_nul": [482, 1063], "is_regex_project": 542, "is_sort": 1064, "is_uniqu": [213, 483, 1065], "iso_year": [408, 985], "item": [214, 1066], "iter_column": 215, "iter_row": 216, "iter_slic": 217, "join": [218, 349, 505, 643, 820, 923, 1087, 1193, 1276], "join_asof": [219, 821], "json": 790, "json_decod": [644, 1194], "json_encod": [676, 1227], "json_norm": 126, "json_path_match": [645, 1195], "keep": 556, "kurtosi": [484, 1067], "lake": 790, "last": [296, 350, 485, 506, 735, 822, 869, 924, 1088, 1277], "lazi": [220, 823], "lazyfram": [42, 43, 44, 45, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 887], "lazygroupbi": [864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "le": [486, 1068], "least": 1279, "left": 1282, "len": [297, 487, 507, 736, 870, 1069, 1089], "len_byt": [646, 1196], "len_char": [647, 1197], "length": 1282, "limit": [221, 488, 824, 1070, 1276], "list": [72, 161, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 778, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1261], "lit": 737, "ln": 1281, "load": [2, 168], "load_from_fil": 3, "load_profil": 162, "log": [529, 1111, 1281], "log10": [530, 1112, 1281], "log1p": [531, 1113, 1281], "log2": 1281, "lower": 1282, "lower_bound": [532, 1114], "lt": [533, 1115], "ltrim": 1282, "manag": 168, "manipul": [314, 781, 889, 1263], "map": 557, "map_batch": [534, 738, 825], "map_el": [535, 1116], "map_field": 558, "map_group": [298, 739, 871], "map_row": 222, "mapwithoutreturndtypewarn": 94, "math": 1281, "max": [223, 299, 351, 508, 536, 740, 826, 872, 925, 986, 1090, 1117, 1277], "max_horizont": [224, 741], "mean": [225, 300, 509, 537, 742, 827, 873, 987, 1091, 1118], "mean_horizont": [226, 743], "median": [227, 301, 352, 510, 538, 744, 828, 874, 926, 988, 1092, 1119, 1277], "melt": [228, 829], "merge_sort": [229, 830], "meta": [539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 779], "metadata": 890, "method": 1287, "microsecond": [409, 989], "millennium": [410, 990], "millisecond": [411, 991], "min": [230, 302, 353, 511, 551, 745, 831, 875, 927, 992, 1093, 1120, 1277], "min_horizont": [231, 746], "minut": [412, 993], "miscellan": [313, 780, 788, 888, 1262], "mod": [552, 1281], "mode": [553, 1121], "moduleupgraderequirederror": 95, "month": [413, 994], "month_end": [414, 995], "month_start": [415, 996], "mul": 554, "n_chunk": [232, 1122], "n_uniqu": [233, 303, 354, 512, 555, 747, 876, 928, 1094, 1123], "name": [556, 557, 558, 559, 560, 561, 562, 563, 564, 774, 782, 1124, 1288], "nan_max": [565, 1125], "nan_min": [566, 1126], "nanosecond": [416, 997], "ne": [543, 567, 1127], "ne_miss": [568, 1128], "neg": 569, "nest": 317, "new": 1, "new_from_index": 1129, "next_batch": 125, "nodataerror": 96, "norowsreturnederror": 97, "not_": [570, 1130], "nth": 748, "null": 73, "null_count": [234, 571, 832, 1131], "nullif": 1279, "numer": [317, 783, 1264], "object": 74, "octet_length": 1282, "od": 790, "offset": 1276, "offset_bi": [417, 998], "ones": 749, "oper": [783, 893, 1264, 1288, 1289], "option": 168, "or_": 572, "order": 1276, "ordinal_dai": [418, 999], "other": 317, "outofboundserror": 98, "output": 790, "output_nam": 544, "over": 573, "pad_end": [648, 1198], "pad_start": [649, 1199], "panic": 318, "panicexcept": 99, "parallel": 788, "parametercollisionerror": 100, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1290], "parquet": 790, "partition_bi": 235, "pct_chang": [574, 1132], "peak_max": [575, 1133], "peak_min": [576, 1134], "performancewarn": 101, "pi": 1281, "pipe": [236, 577, 833], "pivot": 237, "plot": [315, 1265], "plugin": 891, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1290], "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "pop": 545, "pow": [578, 1135, 1281], "prefix": 559, "prefix_field": 560, "product": [238, 579, 1136], "profil": [834, 1290], "provid": 1, "pyarrow": 790, "python": [789, 1287], "qcut": [580, 1137], "quantil": [239, 304, 581, 750, 835, 877, 1138], "quarter": [419, 1000], "queri": 1287, "radian": [582, 1284], "random": 788, "rank": [583, 1139], "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "rechunk": [240, 584, 1140], "reduc": 751, "refer": 789, "regexp_lik": 1282, "regist": 1271, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_glob": 1272, "register_lazyframe_namespac": 50, "register_mani": 1273, "register_series_namespac": 51, "registr": 1, "reinterpret": [585, 1141], "renam": [241, 836, 1142], "rename_field": [677, 1228], "repeat": 752, "repeat_bi": 586, "replac": [587, 650, 1143, 1200, 1282], "replace_al": [651, 1201], "replace_column": 242, "replace_mani": [652, 1202], "replace_strict": [588, 1144], "replace_time_zon": [420, 1001], "reshap": [589, 1145], "restore_default": 4, "revers": [243, 355, 513, 590, 653, 837, 929, 1095, 1146, 1203, 1282], "right": 1282, "rle": [591, 1147], "rle_id": [592, 1148], "roll": [244, 593, 838], "rolling_corr": 753, "rolling_cov": 754, "rolling_map": [594, 1149], "rolling_max": [595, 1150], "rolling_max_bi": 596, "rolling_mean": [597, 1151], "rolling_mean_bi": 598, "rolling_median": [599, 1152], "rolling_median_bi": 600, "rolling_min": [601, 1153], "rolling_min_bi": 602, "rolling_quantil": [603, 1154], "rolling_quantile_bi": 604, "rolling_skew": [605, 1155], "rolling_std": [606, 1156], "rolling_std_bi": 607, "rolling_sum": [608, 1157], "rolling_sum_bi": 609, "rolling_var": [610, 1158], "rolling_var_bi": 611, "root_nam": 546, "round": [421, 612, 1002, 1159, 1281], "round_sig_fig": [613, 1160], "row": [245, 246], "rows_by_kei": 247, "rowserror": 105, "rtrim": 1282, "sampl": [248, 514, 614, 1096, 1161], "save": [5, 168], "save_to_fil": 6, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "scatter": 1162, "schema": [249, 839, 892, 1229], "schemaerror": 108, "schemafieldnotfounderror": 109, "search_sort": [615, 1163], "second": [422, 1003], "select": [250, 314, 755, 781, 840, 889, 1263, 1276], "select_seq": [251, 841], "selector": 893, "seri": [163, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1260], "serial": [252, 313, 547, 842, 888], "set": [893, 1164, 1288], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [515, 1097], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [516, 1098], "set_profil": 164, "set_random_se": 150, "set_sort": [253, 616, 843, 1165], "set_streaming_chunk_s": 14, "set_symmetric_differ": [517, 1099], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [518, 1100], "set_verbos": 29, "shape": [254, 1166], "shapeerror": 110, "shift": [255, 356, 519, 617, 844, 930, 1101, 1167], "show": 1289, "show_graph": 845, "show_vers": 151, "shrink_dtyp": [618, 1168], "shrink_to_fit": [256, 1169], "shuffl": [619, 1170], "sign": [620, 1171, 1281], "sin": [621, 1172, 1284], "sind": 1284, "sinh": [622, 1173], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "size": [369, 942], "skew": [623, 1174], "slice": [257, 520, 624, 654, 846, 1102, 1175, 1204], "sort": [258, 357, 521, 625, 847, 931, 1103, 1176], "sort_bi": 626, "split": [655, 1205], "split_exact": [656, 1206], "splitn": [657, 1207], "sql": [259, 756, 848, 1276, 1280, 1286, 1287], "sql_expr": 757, "sqlcontext": [1269, 1270, 1271, 1272, 1273, 1274, 1275, 1287], "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "sqrt": [627, 1177, 1281], "starts_with": [370, 658, 943, 1208, 1282], "state": [30, 168], "std": [260, 358, 522, 628, 758, 849, 932, 1104, 1178], "stddev": 1277, "str": [629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224], "strategi": 1290, "strftime": [423, 1004, 1283], "string": [75, 317, 784, 1266, 1282], "stringcach": [46, 788], "stringcachemismatcherror": 111, "strip_char": [659, 1209], "strip_chars_end": [660, 1210], "strip_chars_start": [661, 1211], "strip_prefix": [662, 1212], "strip_suffix": [663, 1213], "strpo": 1282, "strptime": [664, 1214, 1282], "struct": [76, 675, 676, 677, 678, 759, 785, 1225, 1226, 1227, 1228, 1229, 1230, 1267], "structfieldnotfounderror": 112, "style": 316, "sub": 679, "substr": 1282, "suffix": 561, "suffix_field": 562, "sum": [261, 305, 359, 523, 680, 760, 850, 878, 933, 1105, 1231, 1277], "sum_horizont": [262, 761], "tabl": [1274, 1289], "tail": [263, 306, 524, 665, 681, 762, 851, 879, 1106, 1215, 1232], "tan": [682, 1233, 1284], "tand": 1284, "tanh": [683, 1234], "tempor": [317, 786, 1268, 1283], "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1290], "thread_pool_s": 165, "threadpool_s": 166, "time": [77, 424, 763, 1005], "time_rang": [764, 765], "timestamp": [425, 1006, 1282], "to_arrai": [525, 1107], "to_arrow": [264, 1235], "to_dat": [666, 1216], "to_datetim": [667, 1217], "to_decim": [668, 1218], "to_dict": [265, 266], "to_dummi": [267, 1236], "to_fram": 1237, "to_init_repr": [268, 1238], "to_integ": [669, 1219], "to_jax": [269, 1239], "to_list": [360, 934, 1240], "to_loc": 948, "to_lowercas": [563, 670, 1220], "to_numpi": [270, 1241], "to_panda": [271, 1242], "to_phys": [684, 1243], "to_seri": 272, "to_str": [426, 1007], "to_struct": [273, 361, 526, 935, 1108], "to_tim": [671, 1221], "to_titlecas": [672, 1222], "to_torch": [274, 1244], "to_uppercas": [564, 673, 1223], "toomanyrowsreturnederror": 113, "top_k": [275, 685, 852, 1245], "top_k_bi": 686, "total_dai": [427, 1008], "total_hour": [428, 1009], "total_microsecond": [429, 1010], "total_millisecond": [430, 1011], "total_minut": [431, 1012], "total_nanosecond": [432, 1013], "total_second": [433, 1014], "transpos": 276, "tree_format": 548, "trigonometri": 1284, "truediv": 687, "truncat": [434, 1015, 1289], "try_cast": 1285, "type": [317, 1285], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "undo_alias": 549, "union": 1288, "uniqu": [277, 362, 527, 688, 853, 936, 1109, 1246], "unique_count": [689, 1247], "unknown": 82, "unnest": [278, 854, 1230, 1278, 1289], "unpivot": [279, 855], "unregist": 1275, "unstablewarn": 114, "unstack": 280, "unsuitablesqlerror": 115, "updat": [281, 856], "upper": 1282, "upper_bound": [690, 1248], "upsampl": 282, "us": 168, "uses_lexical_ord": 949, "using_string_cach": 167, "utf8": 83, "value_count": [691, 1249], "var": [283, 363, 528, 692, 766, 857, 937, 1110, 1250], "varianc": 1277, "vstack": 284, "warn": 318, "week": [435, 1016], "weekdai": [436, 1017], "when": 767, "where": [693, 1276], "width": [285, 858], "window": 787, "with_column": [286, 859], "with_columns_seq": [287, 860], "with_context": 861, "with_field": 678, "with_row_count": [288, 862], "with_row_index": [289, 863], "with_time_unit": [437, 1018], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 550], "write_ndjson": 40, "write_parquet": 41, "xor": 694, "year": [438, 1019], "zero": 768, "zfill": [674, 1224], "zip_with": 1251}})